# Cluster Analysis {#sec-clusterAnalysis}

## Getting Started {#sec-clusterAnalysisGettingStarted}

### Load Packages {#sec-clusterAnalysisLoadPackages}

```{r}
library("mclust")
library("tidyverse")
```

### Load Data {#sec-clusterAnalysisLoadData}

```{r}
#| eval: false
#| include: false

load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/player_stats_weekly.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/player_stats_seasonal.RData", fsep = ""))
```

```{r}
load(file = "./data/player_stats_weekly.RData")
load(file = "./data/player_stats_seasonal.RData")
```

### Overview {#sec-clusterAnalysisOverview}

```{r}

```

### Example {#sec-clusterAnalysisExample}

#### Prepare Data {#sec-clusterAnalysisExamplePrepareData}

```{r}
recentSeason <- max(player_stats_seasonal_offense$season, na.rm = TRUE)
recentSeason

player_stats_seasonal_offense_recent <- player_stats_seasonal_offense %>% 
  filter(season == recentSeason)

player_stats_seasonal_offense_recentQB <- player_stats_seasonal_offense_recent %>% 
  filter(position_group == "QB")

player_stats_seasonal_offense_recentRB <- player_stats_seasonal_offense_recent %>% 
  filter(position_group == "RB")

player_stats_seasonal_offense_recentWR <- player_stats_seasonal_offense_recent %>% 
  filter(position_group == "WR")

player_stats_seasonal_offense_recentTE <- player_stats_seasonal_offense_recent %>% 
  filter(position_group == "TE")
```

#### Identify the Optimal Number of Tiers by Position {#sec-clusterAnalysisExampleNumTiers}

##### Quarterbacks {#sec-clusterAnalysisExampleNumTiersQBs}

```{r}
tiersQB_bic <- mclustBIC(
  data = player_stats_seasonal_offense_recentQB$fantasy_points,
  G = 1:9
)

tiersQB_bic
summary(tiersQB_bic)
plot(tiersQB_bic)

tiersQB_icl <- mclustICL(
  data = player_stats_seasonal_offense_recentQB$fantasy_points,
  G = 1:9
)

tiersQB_icl
summary(tiersQB_icl)
plot(tiersQB_icl)

tiersQB_boostrap <- mclustBootstrapLRT(
  player_stats_seasonal_offense_recentQB$fantasy_points,
  modelName = "V") # variable/unequal variance (for univariate data)

numTiersQB <- as.numeric(summary(tiersQB_boostrap)[,"Length"][1]) # or could specify the number of teams manually

tiersQB_boostrap
plot(
  tiersQB_boostrap,
  G = numTiersQB - 1)
```

##### Running Backs {#sec-clusterAnalysisExampleNumTiersRBs}

```{r}
tiersRB_bic <- mclustBIC(
  data = player_stats_seasonal_offense_recentRB$fantasy_points,
  G = 1:9
)

tiersRB_bic
summary(tiersRB_bic)
plot(tiersRB_bic)

tiersRB_icl <- mclustICL(
  data = player_stats_seasonal_offense_recentRB$fantasy_points,
  G = 1:9
)

tiersRB_icl
summary(tiersRB_icl)
plot(tiersRB_icl)

tiersRB_boostrap <- mclustBootstrapLRT(
  player_stats_seasonal_offense_recentRB$fantasy_points,
  modelName = "V") # variable/unequal variance (for univariate data)

numTiersRB <- as.numeric(summary(tiersRB_boostrap)[,"Length"][1]) # or could specify the number of teams manually

tiersRB_boostrap
plot(
  tiersRB_boostrap,
  G = numTiersRB - 1)
```

##### Wide Receivers {#sec-clusterAnalysisExampleNumTiersWRs}

```{r}
tiersWR_bic <- mclustBIC(
  data = player_stats_seasonal_offense_recentWR$fantasy_points,
  G = 1:9
)

tiersWR_bic
summary(tiersWR_bic)
plot(tiersWR_bic)

tiersWR_icl <- mclustICL(
  data = player_stats_seasonal_offense_recentWR$fantasy_points,
  G = 1:9
)

tiersWR_icl
summary(tiersWR_icl)
plot(tiersWR_icl)

tiersWR_boostrap <- mclustBootstrapLRT(
  player_stats_seasonal_offense_recentWR$fantasy_points,
  modelName = "V") # variable/unequal variance (for univariate data)

numTiersWR <- as.numeric(summary(tiersWR_boostrap)[,"Length"][1]) # or could specify the number of teams manually

tiersWR_boostrap
plot(
  tiersWR_boostrap,
  G = numTiersWR - 1)
```

##### Tight Ends {#sec-clusterAnalysisExampleNumTiersTEs}

```{r}
tiersTE_bic <- mclustBIC(
  data = player_stats_seasonal_offense_recentTE$fantasy_points,
  G = 1:9
)

tiersTE_bic
summary(tiersTE_bic)
plot(tiersTE_bic)

tiersTE_icl <- mclustICL(
  data = player_stats_seasonal_offense_recentTE$fantasy_points,
  G = 1:9
)

tiersTE_icl
summary(tiersTE_icl)
plot(tiersTE_icl)

tiersTE_boostrap <- mclustBootstrapLRT(
  player_stats_seasonal_offense_recentTE$fantasy_points,
  modelName = "V") # variable/unequal variance (for univariate data)

numTiersTE <- as.numeric(summary(tiersTE_boostrap)[,"Length"][1]) # or could specify the number of teams manually

tiersTE_boostrap
plot(
  tiersTE_boostrap,
  G = numTiersTE - 1)
```

#### Fit the Cluster Model to the Optimal Number of Tiers {#sec-clusterAnalysisExampleNumTiers}

##### Quarterbacks {#sec-clusterAnalysisExampleNumTiersQBs}

In our data, all of the following models are equivalent—i.e., they result in the same unequal variance model with a 4-cluster solution—but they arrive there in different ways.

```{r}
#| eval: false

Mclust(
  data = player_stats_seasonal_offense_recentQB$fantasy_points,
  G = numTiersQB,
)

Mclust(
  data = player_stats_seasonal_offense_recentQB$fantasy_points,
  G = 4,
)

Mclust(
  data = player_stats_seasonal_offense_recentQB$fantasy_points,
)

Mclust(
  data = player_stats_seasonal_offense_recentQB$fantasy_points,
  x = tiersQB_bic
)
```

Let's fit one of these:

```{r}
clusterModelQBs <- Mclust(
  data = player_stats_seasonal_offense_recentQB$fantasy_points,
  G = numTiersQB,
)
```

Here are the number of players that are in each of the four clusters (i.e., tiers):

```{r}
table(clusterModelQBs$classification)
```

We can merge the player's classification into the dataset and plot each player's classification:

```{r}
#| label: fig-qbTiers
#| fig-cap: "Quarterback Fantasy Points by Tier."

player_stats_seasonal_offense_recentQB$tier <- clusterModelQBs$classification

player_stats_seasonal_offense_recentQB$position_rank <- rank(
  player_stats_seasonal_offense_recentQB$fantasy_points * -1,
  na.last = "keep",
  ties.method = "min")

ggplot2::ggplot(
  data = player_stats_seasonal_offense_recentQB,
  mapping = aes(
    x = fantasy_points,
    y = position_rank,
    color = as.factor(tier)
  )) +
  geom_label(
    aes(
      x = fantasy_points,
      label = round(fantasy_points, 0),
      fill = as.factor(tier)
      ),
    color = "white",
    size = 5,
    #show.legend = FALSE
    ) +
  geom_label(
    aes(
      x = fantasy_points,
      label = player_display_name,
      fill = as.factor(tier)),
    color = "white",
    hjust = 1.1,
    size = 4,
    show.legend = FALSE
    ) +
  scale_y_continuous(trans = "reverse") +
  coord_cartesian(clip = "off") +
  theme_classic() +
  labs(
    x = "Projected Points",
    y = "Rank",
    title = "Quarterback Fantasy Points by Tier",
    fill = "Tier")
```

##### Running Backs {#sec-clusterAnalysisExampleNumTiersRBs}

##### Wide Receivers {#sec-clusterAnalysisExampleNumTiersWRs}

##### Tight Ends {#sec-clusterAnalysisExampleNumTiersTEs}


## Conclusion {#sec-clusterAnalysisConclusion}

::: {.content-visible when-format="html"}

## Session Info {#sec-clusterAnalysisSessionInfo}

```{r}
sessionInfo()
```

:::
