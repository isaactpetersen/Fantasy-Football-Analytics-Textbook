# Cluster Analysis {#sec-clusterAnalysis}

## Getting Started {#sec-clusterAnalysisGettingStarted}

### Load Packages {#sec-clusterAnalysisLoadPackages}

```{r}
library("mclust")
library("tidyverse")
library("plotly")
```

### Load Data {#sec-clusterAnalysisLoadData}

```{r}
#| eval: false
#| include: false

load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/player_stats_weekly.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/player_stats_seasonal.RData", fsep = ""))
```

```{r}
load(file = "./data/player_stats_weekly.RData")
load(file = "./data/player_stats_seasonal.RData")
```

### Overview {#sec-clusterAnalysisOverview}

```{r}

```

### Example: Tiers of Prior Season Fantasy Points {#sec-clusterAnalysisExample}

#### Prepare Data {#sec-clusterAnalysisExamplePrepareData}

```{r}
recentSeason <- max(player_stats_seasonal_offense$season, na.rm = TRUE)
recentSeason

player_stats_seasonal_offense_recent <- player_stats_seasonal_offense %>% 
  filter(season == recentSeason)

player_stats_seasonal_offense_recentQB <- player_stats_seasonal_offense_recent %>% 
  filter(position_group == "QB")

player_stats_seasonal_offense_recentRB <- player_stats_seasonal_offense_recent %>% 
  filter(position_group == "RB")

player_stats_seasonal_offense_recentWR <- player_stats_seasonal_offense_recent %>% 
  filter(position_group == "WR")

player_stats_seasonal_offense_recentTE <- player_stats_seasonal_offense_recent %>% 
  filter(position_group == "TE")
```

#### Identify the Optimal Number of Tiers by Position {#sec-clusterAnalysisExampleNumTiers}

##### Quarterbacks {#sec-clusterAnalysisExampleNumTiersQBs}

```{r}
tiersQB_bic <- mclustBIC(
  data = player_stats_seasonal_offense_recentQB$fantasy_points,
  G = 1:9
)

tiersQB_bic
summary(tiersQB_bic)
plot(tiersQB_bic)

tiersQB_icl <- mclustICL(
  data = player_stats_seasonal_offense_recentQB$fantasy_points,
  G = 1:9
)

tiersQB_icl
summary(tiersQB_icl)
plot(tiersQB_icl)

tiersQB_boostrap <- mclustBootstrapLRT(
  player_stats_seasonal_offense_recentQB$fantasy_points,
  modelName = "V") # variable/unequal variance (for univariate data)

numTiersQB <- as.numeric(summary(tiersQB_boostrap)[,"Length"][1]) # or could specify the number of teams manually

tiersQB_boostrap
plot(
  tiersQB_boostrap,
  G = numTiersQB - 1)
```

##### Running Backs {#sec-clusterAnalysisExampleNumTiersRBs}

```{r}
tiersRB_bic <- mclustBIC(
  data = player_stats_seasonal_offense_recentRB$fantasy_points,
  G = 1:9
)

tiersRB_bic
summary(tiersRB_bic)
plot(tiersRB_bic)

tiersRB_icl <- mclustICL(
  data = player_stats_seasonal_offense_recentRB$fantasy_points,
  G = 1:9
)

tiersRB_icl
summary(tiersRB_icl)
plot(tiersRB_icl)

numTiersRB <- 3

# The following code errors out:
#tiersRB_boostrap <- mclustBootstrapLRT(
#  player_stats_seasonal_offense_recentRB$fantasy_points,
#  modelName = "V") # variable/unequal variance (for univariate data)
#
#numTiersRB <- as.numeric(summary(tiersRB_boostrap)[,"Length"][1]) # or could specify the number of teams manually
#
#tiersRB_boostrap
#plot(
#  tiersRB_boostrap,
#  G = numTiersRB - 1)
```

##### Wide Receivers {#sec-clusterAnalysisExampleNumTiersWRs}

```{r}
tiersWR_bic <- mclustBIC(
  data = player_stats_seasonal_offense_recentWR$fantasy_points,
  G = 1:9
)

tiersWR_bic
summary(tiersWR_bic)
plot(tiersWR_bic)

tiersWR_icl <- mclustICL(
  data = player_stats_seasonal_offense_recentWR$fantasy_points,
  G = 1:9
)

tiersWR_icl
summary(tiersWR_icl)
plot(tiersWR_icl)

tiersWR_boostrap <- mclustBootstrapLRT(
  player_stats_seasonal_offense_recentWR$fantasy_points,
  modelName = "V") # variable/unequal variance (for univariate data)

numTiersWR <- as.numeric(summary(tiersWR_boostrap)[,"Length"][1]) # or could specify the number of teams manually

tiersWR_boostrap
plot(
  tiersWR_boostrap,
  G = numTiersWR - 1)
```

##### Tight Ends {#sec-clusterAnalysisExampleNumTiersTEs}

```{r}
tiersTE_bic <- mclustBIC(
  data = player_stats_seasonal_offense_recentTE$fantasy_points,
  G = 1:9
)

tiersTE_bic
summary(tiersTE_bic)
plot(tiersTE_bic)

tiersTE_icl <- mclustICL(
  data = player_stats_seasonal_offense_recentTE$fantasy_points,
  G = 1:9
)

tiersTE_icl
summary(tiersTE_icl)
plot(tiersTE_icl)

tiersTE_boostrap <- mclustBootstrapLRT(
  player_stats_seasonal_offense_recentTE$fantasy_points,
  modelName = "V") # variable/unequal variance (for univariate data)

numTiersTE <- as.numeric(summary(tiersTE_boostrap)[,"Length"][1]) # or could specify the number of teams manually

tiersTE_boostrap
plot(
  tiersTE_boostrap,
  G = numTiersTE - 1)
```

#### Fit the Cluster Model to the Optimal Number of Tiers {#sec-clusterAnalysisExampleModel}

##### Quarterbacks {#sec-clusterAnalysisExampleModelQBs}

In our data, all of the following models are equivalent—i.e., they result in the same unequal variance model with a 4-cluster solution—but they arrive there in different ways.

```{r}
#| eval: false

Mclust(
  data = player_stats_seasonal_offense_recentQB$fantasy_points,
  G = numTiersQB,
)

Mclust(
  data = player_stats_seasonal_offense_recentQB$fantasy_points,
  G = 4,
)

Mclust(
  data = player_stats_seasonal_offense_recentQB$fantasy_points,
)

Mclust(
  data = player_stats_seasonal_offense_recentQB$fantasy_points,
  x = tiersQB_bic
)
```

Let's fit one of these:

```{r}
clusterModelQBs <- Mclust(
  data = player_stats_seasonal_offense_recentQB$fantasy_points,
  G = numTiersQB,
)
```

Here are the number of players that are in each of the four clusters (i.e., tiers):

```{r}
table(clusterModelQBs$classification)
```

##### Running Backs {#sec-clusterAnalysisExampleModelRBs}

```{r}
clusterModelRBs <- Mclust(
  data = player_stats_seasonal_offense_recentRB$fantasy_points,
  G = numTiersRB,
)
```

Here are the number of players that are in each of the four clusters (i.e., tiers):

```{r}
table(clusterModelRBs$classification)
```

##### Wide Receivers {#sec-clusterAnalysisExampleModelWRs}

```{r}
clusterModelWRs <- Mclust(
  data = player_stats_seasonal_offense_recentWR$fantasy_points,
  G = numTiersWR,
)
```

Here are the number of players that are in each of the four clusters (i.e., tiers):

```{r}
table(clusterModelWRs$classification)
```

##### Tight Ends {#sec-clusterAnalysisExampleModelTEs}

```{r}
clusterModelTEs <- Mclust(
  data = player_stats_seasonal_offense_recentTE$fantasy_points,
  G = numTiersTE,
)
```

Here are the number of players that are in each of the four clusters (i.e., tiers):

```{r}
table(clusterModelTEs$classification)
```

#### Plot the Tiers {#sec-clusterAnalysisExamplePlotTiers}

We can merge the player's classification into the dataset and plot each player's classification.

##### Quarterbacks {#sec-clusterAnalysisExamplePlotTiersQB}

```{r}
#| label: fig-qbTiers
#| fig-cap: "Quarterback Fantasy Points by Tier."

player_stats_seasonal_offense_recentQB$tier <- clusterModelQBs$classification

player_stats_seasonal_offense_recentQB <- player_stats_seasonal_offense_recentQB %>%
  mutate(
    tier = factor(case_match( # recode so 1 is highest tier
      tier,
      1 ~ 4,
      2 ~ 3,
      3 ~ 2,
      4 ~ 1)))

player_stats_seasonal_offense_recentQB$position_rank <- rank(
  player_stats_seasonal_offense_recentQB$fantasy_points * -1,
  na.last = "keep",
  ties.method = "min")

plot_qbTiers <- ggplot2::ggplot(
  data = player_stats_seasonal_offense_recentQB,
  mapping = aes(
    x = fantasy_points,
    y = position_rank,
    color = tier
  )) +
  geom_point(
    aes(
      text = player_display_name # add player name for mouse over tooltip
  )) +
  scale_y_continuous(trans = "reverse") +
  coord_cartesian(clip = "off") +
  labs(
    x = "Projected Points",
    y = "Position Rank",
    title = "Quarterback Fantasy Points by Tier",
    color = "Tier") +
  theme_classic() +
  theme(legend.position = "top")

ggplotly(plot_qbTiers)
```

##### Running Backs {#sec-clusterAnalysisExamplePlotTiersRBs}

```{r}
#| label: fig-rbTiers
#| fig-cap: "Running Back Fantasy Points by Tier."

player_stats_seasonal_offense_recentRB$tier <- clusterModelRBs$classification

player_stats_seasonal_offense_recentRB <- player_stats_seasonal_offense_recentRB %>%
  mutate(
    tier = factor(case_match( # recode so 1 is highest tier
      tier,
      1 ~ 3,
      2 ~ 2,
      3 ~ 1)))

player_stats_seasonal_offense_recentRB$position_rank <- rank(
  player_stats_seasonal_offense_recentRB$fantasy_points * -1,
  na.last = "keep",
  ties.method = "min")

plot_rbTiers <- ggplot2::ggplot(
  data = player_stats_seasonal_offense_recentRB,
  mapping = aes(
    x = fantasy_points,
    y = position_rank,
    color = tier
  )) +
  geom_point(
    aes(
      text = player_display_name # add player name for mouse over tooltip
  )) +
  scale_y_continuous(trans = "reverse") +
  coord_cartesian(clip = "off") +
  labs(
    x = "Projected Points",
    y = "Position Rank",
    title = "Running Back Fantasy Points by Tier",
    color = "Tier") +
  theme_classic() +
  theme(legend.position = "top")

ggplotly(plot_rbTiers)
```

##### Wide Receivers {#sec-clusterAnalysisExamplePlotTiersWRs}

```{r}
#| label: fig-wrTiers
#| fig-cap: "Quarterback Fantasy Points by Tier."

player_stats_seasonal_offense_recentWR$tier <- clusterModelWRs$classification

player_stats_seasonal_offense_recentWR <- player_stats_seasonal_offense_recentWR %>%
  mutate(
    tier = factor(case_match( # recode so 1 is highest tier
      tier,
      1 ~ 5,
      2 ~ 4,
      3 ~ 3,
      4 ~ 2,
      5 ~ 1)))

player_stats_seasonal_offense_recentWR$position_rank <- rank(
  player_stats_seasonal_offense_recentWR$fantasy_points * -1,
  na.last = "keep",
  ties.method = "min")

plot_wrTiers <- ggplot2::ggplot(
  data = player_stats_seasonal_offense_recentWR,
  mapping = aes(
    x = fantasy_points,
    y = position_rank,
    color = tier
  )) +
  geom_point(
    aes(
      text = player_display_name # add player name for mouse over tooltip
  )) +
  scale_y_continuous(trans = "reverse") +
  coord_cartesian(clip = "off") +
  labs(
    x = "Projected Points",
    y = "Position Rank",
    title = "Wide Receiver Fantasy Points by Tier",
    color = "Tier") +
  theme_classic() +
  theme(legend.position = "top")

ggplotly(plot_wrTiers)
```

##### Tight Ends {#sec-clusterAnalysisExamplePlotTiersTEs}

```{r}
#| label: fig-teTiers
#| fig-cap: "Tight End Fantasy Points by Tier."

player_stats_seasonal_offense_recentTE$tier <- clusterModelTEs$classification

player_stats_seasonal_offense_recentTE <- player_stats_seasonal_offense_recentTE %>%
  mutate(
    tier = factor(case_match( # recode so 1 is highest tier
      tier,
      1 ~ 4,
      2 ~ 3,
      3 ~ 2,
      4 ~ 1)))

player_stats_seasonal_offense_recentTE$position_rank <- rank(
  player_stats_seasonal_offense_recentTE$fantasy_points * -1,
  na.last = "keep",
  ties.method = "min")

plot_teTiers <- ggplot2::ggplot(
  data = player_stats_seasonal_offense_recentTE,
  mapping = aes(
    x = fantasy_points,
    y = position_rank,
    color = tier
  )) +
  geom_point(
    aes(
      text = player_display_name # add player name for mouse over tooltip
  )) +
  scale_y_continuous(trans = "reverse") +
  coord_cartesian(clip = "off") +
  labs(
    x = "Projected Points",
    y = "Position Rank",
    title = "Tight End Fantasy Points by Tier",
    color = "Tier") +
  theme_classic() +
  theme(legend.position = "top")

ggplotly(plot_teTiers)
```

## Conclusion {#sec-clusterAnalysisConclusion}

::: {.content-visible when-format="html"}

## Session Info {#sec-clusterAnalysisSessionInfo}

```{r}
sessionInfo()
```

:::
