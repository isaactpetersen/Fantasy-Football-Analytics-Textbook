# Simulation: Bootstrapping and the Monte Carlo Method {#sec-simulation}

## Getting Started {#sec-simulationGettingStarted}

### Load Packages {#sec-simulationLoadPackages}

```{r}
library("ffanalytics")
library("data.table")
library("future")
library("future.apply")
library("tidyverse")
```

### Load Data {#sec-simulationLoadData}

```{r}
#| eval: false
#| include: false

load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/players_projectedPoints_seasonal.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_playerIDs.RData", fsep = ""))
```

```{r}
load(file = "./data/players_projectedPoints_seasonal.RData")
load(file = "./data/nfl_playerIDs.RData")
```

## Overview {#sec-simulationOverview}

A simulation is an "imitative representation" of a phenomenon that could exist the real world.
In statistics, simulations are computer-driven investigations to better understand a phenomenon by studying its behavior under different conditions.
For instance, we might want to determine the likely range of outcomes for a player, in terms of the range of fantasy points that a player might score over the course of a season.
Simulations can be conducted in various ways.
Two common ways of conducting simulations are via [bootstrapping](#sec-simulationOverviewBootstrapping) and via [Monte Carlo simulation](#sec-simulationOverviewMonteCarlo).

### Bootstrapping {#sec-simulationOverviewBootstrapping}

Bootstrapping involves repeated resampling (with replacement) from observed data.
For instance, if we have 100 sources provide projections for a player, we could estimate the most likely range of fantasy points for the player by repeatedly sampling from the 100 projections.

### Monte Carlo Simulation {#sec-simulationOverviewMonteCarlo}

Monte Carlo simulation involves repeated random sampling from a known distribution [@Sigal2016].
For instance, if we know the population distribution for the likely outcomes for a player—e.g., a normal distribution with a known mean (e.g., 150 points) and standard deviation (e.g., 20 points)—we can repeatedly sample randomly from this distribution.

## Simulation of Projected Statistics and Points {#sec-simulationProjectedPoints}

### Bootstrapping {#sec-simulationProjectedPointsBootstrapping}

```{r}
all_proj <- dplyr::bind_rows(players_projectedPoints_seasonal)
```

```{r}
vars_by_pos <- list(
  QB = c(
    "games",
    "pass_att", "pass_comp", "pass_yds", "pass_tds", "pass_int",
    "rush_att", "rush_yds", "rush_tds",
    "fumbles_lost",
    "sacks",
    "pass_09_tds", "pass_1019_tds", "pass_2029_tds", "pass_3039_tds", "pass_4049_tds", "pass_50_tds",  
    "pass_250_yds", "pass_300_yds", "pass_350_yds", "pass_40_yds", "pass_400_yds",
    "rush_100_yds", "rush_150_yds", "rush_200_yds", "rush_40_yds"
    ),
  RB = c(
    "games",
    "rush_att", "rush_yds", "rush_tds",
    "rec_tgt", "rec", "rec_yds", "rec_tds",
    "fumbles_lost",
    "return_yds", "return_tds",
    "rush_09_tds", "rush_1019_tds", "rush_2029_tds", "rush_3039_tds", "rush_4049_tds", "rush_50_tds",
    "rush_50_yds", "rush_100_yds", "rush_150_yds", "rush_200_yds", "rush_40_yds",
    "rec_rz_tgt", "rec_50_yds", "rec_100_yds", "rec_150_yds", "rec_200_yds", "rec_40_yds"
  ),
  WR = c(
    "games",
    "pass_att", "pass_comp", "pass_yds", "pass_tds", "pass_int",
    "rush_att", "rush_yds", "rush_tds",
    "rec_tgt", "rec", "rec_yds", "rec_tds",
    "fumbles_lost",
    "return_yds", "return_tds",
    "rush_09_tds", "rush_1019_tds", "rush_2029_tds", "rush_3039_tds", "rush_4049_tds", "rush_50_tds",
    "rush_50_yds", "rush_100_yds", "rush_150_yds", "rush_200_yds", "rush_40_yds",
    "rec_rz_tgt", "rec_50_yds", "rec_100_yds", "rec_150_yds", "rec_200_yds", "rec_40_yds"
  ),
  TE = c(
    "games",
    "pass_att", "pass_comp", "pass_yds", "pass_tds", "pass_int",
    "rush_att", "rush_yds", "rush_tds",
    "rec_tgt", "rec", "rec_yds", "rec_tds",
    "fumbles_lost",
    "return_yds", "return_tds",
    "rush_09_tds", "rush_1019_tds", "rush_2029_tds", "rush_3039_tds", "rush_4049_tds", "rush_50_tds",
    "rush_50_yds", "rush_100_yds", "rush_150_yds", "rush_200_yds", "rush_40_yds",
    "rec_rz_tgt", "rec_50_yds", "rec_100_yds", "rec_150_yds", "rec_200_yds", "rec_40_yds"
  ),
  K = c(
    "fg_50", "fg_50_att", "fg_49", "fg_49_att", "fg_39", "fg_att_39", "fg", "fg_att", "xp", "xp_att"
  ),
  DST = c(
    "dst_fum_recvr", "dst_sacks", "dst_fumbles", "dst_tackles", "dst_td", "dst_yds_against", "dst_pts_against"
  ) ### ADD IDP VARS
)
```

```{r}
bootstrapSimulation <- function(projectedStats, vars_by_pos, n_iter = 10000, seed = NULL) {
  dt <- data.table::as.data.table(projectedStats) # using data.table for speed
  all_ids <- unique(dt$id)
  
  if (!is.null(seed)) set.seed(seed)
  
  future::plan(future::multisession) # parallelize tasks across multiple background R sessions using multiple cores to speed up simulation
  
  results <- future.apply::future_lapply(
    all_ids, # apply the function below to each player using a parallelized loop
    function(player_id) {
      player_data <- dt[id == player_id]
      player_pos <- unique(player_data$pos)
      
      if (length(player_pos) != 1 || !player_pos %in% names(vars_by_pos)) return(NULL)
      
      stat_vars <- vars_by_pos[[player_pos]] # pulls the relevant stat variables to simulate for this player's position
      out <- data.table(iteration = seq_len(n_iter), id = player_id, pos = player_pos)
      
      for (var in stat_vars) { # Loop over each stat variable that should be simulated for the player's position
        if (var %in% names(player_data)) {
          non_na_values <- player_data[[var]][!is.na(player_data[[var]])] # pulls non-missing values of the stat for the player (from all projection sources)
          
          if (length(non_na_values) > 0) {
            out[[var]] <- sample(non_na_values, n_iter, replace = TRUE) # If there are valid values, sample with replacement to simulate n_iter values
          } else {
            out[[var]] <- NA_real_ # specifies a numeric missing value (if all values were missing)
          }
        } else {
          out[[var]] <- NA_real_ # specifies a numeric missing value (if the stat variable doesn't exist)
        }
      }
      
      return(out)
    },
    future.seed = TRUE # ensures that each parallel process gets a reproducible random seed
  )
  
  data.table::rbindlist(results, use.names = TRUE, fill = TRUE) # combines all the individual player results into one large data table, aligning columns by name; fill = TRUE ensures that missing columns are filled with NA where necessary
}
```

```{r}
bootstappedStats <- bootstrapSimulation(
  projectedStats = all_proj,
  vars_by_pos = vars_by_pos,
  n_iter = 10000,
  seed = 52242)
```

```{r}
bootstappedStats$data_src <- bootstappedStats$iteration

bootstappedStatsByPosition <- split(
  bootstappedStats,
  by = "pos",
  keep.by = TRUE)

bootstappedStatsByPosition <- lapply(
  bootstappedStatsByPosition,
  as_tibble)

attr(bootstappedStatsByPosition, "season") <- 2024
attr(bootstappedStatsByPosition, "week") <- 0

bootstrappedFantasyPoints <- ffanalytics:::source_points(
  data_result = bootstappedStatsByPosition,
  scoring_rules = ffanalytics::scoring)

bootstrappedFantasyPoints$iteration <- bootstrappedFantasyPoints$data_src
bootstrappedFantasyPoints$data_src <- NULL

bootstrappedFantasyPoints <- bootstrappedFantasyPoints %>% 
  left_join(
    nfl_playerIDs[,c("mfl_id","name","merge_name","team")],
    by = c("id" = "mfl_id")
  )

bootstrappedFantasyPoints <- bootstrappedFantasyPoints %>% 
  rename(projectedPoints = raw_points) %>% 
  arrange(-projectedPoints)
```

```{r}
#| eval: false
#| include: false

# https://github.com/FantasyFootballAnalytics/ffanalytics/blob/08cab3cbe6eb645b853bb814e671e186b78a0837/R/calc_projections.R#L218-L253

# This gives an example for the data format accepted by the source_points() function
l = ffanalytics:::scrape_espn(season = 2024, week = 0)

# The two important things for the "data_result" object going into the source_points()
# function are the format of the list (with positions as names) and the attributes:
# season and week

# Before sending the data_result to the source_points() function make sure it has these attributes set 
# (e.g., this is for 2024 week 0)

attr(data_result, "season") <- 2024
attr(data_result, "week") <- 0

df <- ffanalytics:::source_points(data_result = l, scoring_rules = ffanalytics::scoring)
```

```{r}
bootstrappedFantasyPoints_summary <- bootstrappedFantasyPoints %>% 
  group_by(id) %>% 
  summarise(
    mean = mean(projectedPoints, na.rm = TRUE),
    SD = sd(projectedPoints, na.rm = TRUE),
    min = min(projectedPoints, na.rm = TRUE),
    max = max(projectedPoints, na.rm = TRUE),
    range = max(projectedPoints, na.rm = TRUE) - min(projectedPoints, na.rm = TRUE),
    IQR = IQR(projectedPoints, na.rm = TRUE),
    MAD = mad(projectedPoints, na.rm = TRUE),
    CV = SD/mean,
    median = median(projectedPoints, na.rm = TRUE),
    pseudomedian = DescTools::HodgesLehmann(projectedPoints, na.rm = TRUE),
    mode = petersenlab::Mode(projectedPoints, multipleModes = "mean"),
    skewness = psych::skew(projectedPoints, na.rm = TRUE),
    kurtosis = psych::kurtosi(projectedPoints, na.rm = TRUE)
  )

bootstrappedFantasyPoints_summary <- bootstrappedFantasyPoints_summary %>% 
  left_join(
    nfl_playerIDs[,c("mfl_id","name","merge_name","team","position")],
    by = c("id" = "mfl_id")
  ) %>% 
  select(name, team, position, mean:kurtosis, everything()) %>% 
  arrange(-mean)
```

```{r}
bootstrappedFantasyPoints_summary %>% 
  filter(position == "QB") %>% 
  mutate(
    across(
      where(is.numeric),
      \(x) round(x, digits = 2)))

bootstrappedFantasyPoints_summary %>% 
  filter(position == "RB") %>% 
  mutate(
    across(
      where(is.numeric),
      \(x) round(x, digits = 2)))

bootstrappedFantasyPoints_summary %>% 
  filter(position == "WR") %>% 
  mutate(
    across(
      where(is.numeric),
      \(x) round(x, digits = 2)))

bootstrappedFantasyPoints_summary %>% 
  filter(position == "TE") %>% 
  mutate(
    across(
      where(is.numeric),
      \(x) round(x, digits = 2)))

bootstrappedFantasyPoints_summary %>% 
  filter(position == "PK") %>% 
  mutate(
    across(
      where(is.numeric),
      \(x) round(x, digits = 2)))
```


```{r}
#| eval: false
#| include: false

bootstrappedFantasyPoints_summary %>% filter(mean > 100 & position == "QB") %>% arrange(CV) %>% head
bootstrappedFantasyPoints_summary %>% filter(mean > 100 & position == "QB") %>% arrange(-CV) %>% head
```

An example distribution of projected fantasy points is in @fig-bootstrapping1.

```{r}
#| label: fig-bootstrapping1
#| fig-cap: "Distribution of Projected Fantasy Points for Patrick Mahomes from Bootstrapping."
#| fig-alt: "Distribution of Projected Fantasy Points for Patrick Mahomes from Bootstrapping."

ggplot2::ggplot(
  data = bootstrappedFantasyPoints %>%
    filter(pos == "QB" & name == "Patrick Mahomes"),
  mapping = aes(
    x = raw_points)
) +
  geom_histogram(
    aes(y = after_stat(density)),
    color = "#000000",
    fill = "#0099F8"
  ) +
  geom_density(
    color = "#000000",
    fill = "#F85700",
    alpha = 0.6 # add transparency
  ) +
  geom_rug() +
  #coord_cartesian(
  #  xlim = c(0,400)) +
  labs(
    x = "Fantasy Points",
    y = "Density",
    title = "Distribution of Projected Fantasy Points for Patrick Mahomes"
  ) +
  theme_classic() +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) # horizontal y-axis title
```

Projections of two players—one with relatively narrow uncertainty and one with relatively wide uncertainty—are depicted in @fig-bootstrapping2.

```{r}
#| label: fig-bootstrapping2
#| fig-cap: "Distribution of Projected Fantasy Points for Two Players from Bootstrapping. There is relatively narrow uncertainty around projected fantasy points for Dak Prescott, whereas there is relatively wide uncertainty around the projected fantasy points for Drake Maye."
#| fig-alt: "Distribution of Projected Fantasy Points for Two Players from Bootstrapping. There is relatively narrow uncertainty around projected fantasy points for Dak Prescott, whereas there is relatively wide uncertainty around the projected fantasy points for Drake Maye."

ggplot2::ggplot(
  data = bootstrappedFantasyPoints %>%
    filter(pos == "QB" & (name %in% c("Dak Prescott", "Drake Maye"))),
  mapping = aes(
    x = raw_points,
    group = name,
    #color = name,
    fill = name)
) +
  geom_histogram(
    aes(y = after_stat(density))
  ) +
  geom_density(
    alpha = 0.6 # add transparency
  ) +
  coord_cartesian(
    xlim = c(0,NA),
    expand = FALSE) +
  #geom_rug() +
  labs(
    x = "Fantasy Points",
    y = "Density",
    fill = "",
    color = "",
    title = "Distribution of Projected Fantasy Points"
  ) +
  theme_classic() +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) # horizontal y-axis title
```

### Monte Carlo Simulation {#sec-simulationProjectedPointsMonteCarlo}

```{r}
#| eval: false
#| include: false

calculate_fantasyPoints <- function(df, scoring_rules){
  #fantasyPoints <-
  
  #return(fantasyPoints)
}

monte_carlo_simulation <- function(position_df, num_simulations = 10000){
  player_ids <- unique(position_df$id)
  
  results <- lapply(player_ids, function(player_id){ # use curly brackets when there are multiple expressions
    player_data <- position_df %>% filter(id == player_id)
    
    # Run the simulation for this player
    simulations <- replicate(
      num_simulations, {
        sampled_data <- player_data %>%
          summarise(across(
            c(pass_yds, pass_tds, rush_yds, rush_tds, rec_yds, rec_tds), # add more statistical categories
            ~ if (all(is.na(.))) NA else sample(.[!is.na(.)], 1, replace = TRUE)))
        
        sampled_data # return last expression
        },
      simplify = FALSE)
    
    simulation_df <- dplyr::bind_rows(simulations)
    #simulation_df$fantasyPoints <- calculate_fantasyPoints(simulation_df) # write function to calculate fantasy points
    
    ci <- simulation_df %>%
      summarise(across(where(is.numeric), list(
        lower = \(x) quantile(x, 0.025, na.rm = TRUE),
        upper = \(x) quantile(x, 0.975, na.rm = TRUE))))
    
    ci <- ci %>% 
      mutate(id = player_id)
    
    return(ci)
    })
    
    # Combine results for all players
    final_ci <- bind_rows(results)
    
    return(final_ci)
}

monte_carlo_simulation(players_projectedPoints_seasonal$QB, num_simulations = 10)

QB_ci <- monte_carlo_simulation(players_projectedPoints_seasonal$QB)
```

## Conclusion {#sec-simulationConclusion}

::: {.content-visible when-format="html"}

## Session Info {#sec-simulationSessionInfo}

```{r}
sessionInfo()
```

:::
