# Simulation: the Monte Carlo Method {#sec-simulation}

## Getting Started {#sec-simulationGettingStarted}

### Load Packages {#sec-simulationLoadPackages}

```{r}
library("tidyverse")
```

### Load Data {#sec-simulationLoadData}

```{r}
load(file = "./data/players_projectedPoints_seasonal.RData")
```

## Overview {#sec-simulationOverview}

A simulation is an "imitative representation" of a phenomenon that could exist the real world.
In statistics, simulations are computer-driven investigations to better understand a phenomenon by studying its behavior under different conditions.
For instance, we might want to determine the likely range of outcomes for a player, in terms of the range of fantasy points that a player might score over the course of a season.
Simulations can be conducted in various ways.
Two common ways of conducting simulations are via [bootstrapping](#sec-simulationOverviewBootstrapping) and via [Monte Carlo simulation](#sec-simulationOverviewMonteCarlo).

### Bootstrapping {#sec-simulationOverviewBootstrapping}

Bootstrapping involves repeated resampling (with replacement) from observed data.
For instance, if we have 100 sources provide projections for a player, we could estimate the most likely range of fantasy points for the player by repeatedly sampling from the 100 projections.

### Monte Carlo Simulation {#sec-simulationOverviewMonteCarlo}

Monte Carlo simulation involves repeated random sampling from a known distribution [@Sigal2016].
For instance, if we know the population distribution for the likely outcomes for a player—e.g., a normal distribution with a known mean (e.g., 150 points) and standard deviation (e.g., 20 points)—we can repeatedly sample randomly from this distribution.

## Simulation of Projected Statistics and Points {#sec-simulationProjectedPoints}

### Bootstrapping {#sec-simulationProjectedPointsBootstrapping}

### Monte Carlo Simulation {#sec-simulationProjectedPointsMonteCarlo}

```{r}
calculate_fantasyPoints <- function(df, scoring_rules){
  #fantasyPoints <-
  
  #return(fantasyPoints)
}

monte_carlo_simulation <- function(position_df, num_simulations = 10000){
  player_ids <- unique(position_df$id)
  
  results <- lapply(player_ids, function(player_id){ # use curly brackets when there are multiple expressions
    player_data <- position_df %>% filter(id == player_id)
    
    # Run the simulation for this player
    simulations <- replicate(
      num_simulations, {
        sampled_data <- player_data %>%
          summarise(across(
            c(pass_yds, pass_tds, rush_yds, rush_tds, rec_yds, rec_tds), # add more statistical categories
            ~ if (all(is.na(.))) NA else sample(.[!is.na(.)], 1, replace = TRUE)))
        
        sampled_data # return last expression
        },
      simplify = FALSE)
    
    simulation_df <- dplyr::bind_rows(simulations)
    #simulation_df$fantasyPoints <- calculate_fantasyPoints(simulation_df) # write function to calculate fantasy points
    
    ci <- simulation_df %>%
      summarise(across(where(is.numeric), list(
        lower = \(x) quantile(x, 0.025, na.rm = TRUE),
        upper = \(x) quantile(x, 0.975, na.rm = TRUE))))
    
    ci <- ci %>% 
      mutate(id = player_id)
    
    return(ci)
    })
    
    # Combine results for all players
    final_ci <- bind_rows(results)
    
    return(final_ci)
}

monte_carlo_simulation(players_projectedPoints_seasonal$QB, num_simulations = 10)

QB_ci <- monte_carlo_simulation(players_projectedPoints_seasonal$QB)
```

## Conclusion {#sec-simulationConclusion}

::: {.content-visible when-format="html"}

## Session Info {#sec-simulationSessionInfo}

```{r}
sessionInfo()
```

:::
