# Getting Started with `R` for Data Analysis {#sec-gettingStarted}

The book uses `R` for statistical analyses (<http://www.r-project.org>).
R is a free software environment; you can download it at no charge here: <https://cran.r-project.org>.

## Initial Setup {#sec-initialSetup}

To get started, follow the following steps:

1. Install `R`: <https://cran.r-project.org>
1. Install `RStudio Desktop`: <https://posit.co/download/rstudio-desktop>
1. After installing `RStudio`, open `RStudio` and run the following code in the console to install several key `R` packages:
   ```{r}
   #| eval: false
   
   install.packages(
     c("petersenlab","remotes","nflreadr","nflfastR","nfl4th","nflplotR",
     "gsisdecoder","progressr","lubridate","tidyverse","psych"))
   ```
1. Some necessary packages, including the `ffanalytics` package, are hosted in GitHub and need to be installed using the following code (after installing the `remotes` package above):
   ```{r}
   #| eval: false
   
   remotes::install_github("FantasyFootballAnalytics/ffanalytics")
   ```

::: {#nte-gettingStarted .callout-note title="If you are in Dr. Petersen's class"}
If you are in Dr. Petersen's class, also perform the following steps:

1. Set up a free account on [GitHub.com](https://github.com).
1. Download GitHub Desktop: <https://desktop.github.com>
1. Make sure you are logged into your GitHub account on [GitHub.com](https://github.com).
1. Go to the following GitHub repository: <https://github.com/isaactpetersen/QuartoBlogFantasyFootball> and complete the following steps:
  1. Click "Use this Template" (in the top right of the screen) > "Create a new repository"
  1. Make sure the checkbox is selected for the following option: "Include all branches"
  1. Make sure your Owner account is selected
  1. Specify the repository name to whatever you want, such as `FantasyFootballBlog`
  1. Type a brief description, such as `Files for my fantasy football blog`
  1. Keep the repository public (this is necessary for generating your blog)
  1. Select "Create repository"
1. After creating the new repository, make sure you are on the page of of your new repository and complete the following steps:
  1. Click "Settings" (in the topof the screen)
  1. Click "Actions" (in the left sidebar) > "General"
  1. Make sure the following are selected:
    - "Read and write permissions" (under "Workflow permissions")
    - "Allow GitHub Actions to create and approve pull requests"
    - then click "Save"
  1. Click "Pages" (in the left sidebar)
  1. Make sure the following are selected:
    - "Deploy from a branch" (under "Source")
    - "gh-pages/(root)" (under "Branch")
    - then click "Save"
1. Clone the repository to your local computer by clicking "Code" > "Open with GitHub Desktop", select the folder where you want the repository to be saved on your local computer, and click "Clone"
:::

## Installing Packages {#sec-installingPackages}

You can install `R` packages using the following syntax:

```{r}
#| eval: false

install.packages("INSERT_PACKAGE_NAME_HERE")
```

For instance, you can use the following code to install the `nflreadr` package:

```{r}
#| eval: false

install.packages("nflreadr")
```

## Load Packages {#sec-loadPackages}

```{r}
library("ffanalytics")
library("nflreadr")
library("nflfastR")
library("nfl4th")
library("nflplotR")
library("progressr")
library("lubridate")
library("tidyverse")
```

## Using Functions and Arguments {#sec-functionsArguments}

You can learn about a particular function and its arguments by entering a question mark before the name of the function:

```{r}
#| eval: false

?NAME_OF_FUNCTION()
```

Below, we provide examples for how to learn about and use functions and arguments, by using the `seq()` function as an example.
The `seq()` function creates a sequence of numbers.
To learn about the `seq()` function, which creates a sequence of numbers, you can execute the following command:

```{r}
#| eval: false

?seq()
```

This is what the documentation shows for the `seq()` function in the `Usage` section:

```{r}
#| eval: false

seq(
  from = 1,
  to = 1,
  by = ((to - from)/(length.out - 1)),
  length.out = NULL,
  along.with = NULL,
  ...)
```

Based on this information, we know that the `seq()` function takes the following arguments:

- `from`
- `to`
- `by`
- `length.out`
- `along.with`
- `...`

The arguments have default values that are used if the user does not specify values for the arguments.
The default values are provided in the `Usage` section and are in @tbl-seqFunction:

| Argument     | Default Value for Argument       |
|:-------------|:---------------------------------|
| `from`       | `1`                              |
| `to`         | `1`                              |
| `by`         | `((to - from)/(length.out - 1))` |
| `length.out` | `NULL`                           |
| `along.with` | `NULL`                           |

: Arguments and defaults for the `seq()` function. Arguments with a default of `NULL` are not used unless a value is provided by the user. {#tbl-seqFunction}

What each argument represents (i.e., the meaning of `from`, `to`, `by`, etc.) is provided in the `Arguments` section of the documentation.
You can specify a function and its arguments either by providing values for each argument in the order indicated by the function, or by naming its arguments.

Here is an example of providing values to the arguments in the order indicated by the function, to create a sequence of numbers from 1 to 9:

```{r}
seq(1, 9)
```

Here is an example of providing values to the arguments by naming its arguments:

```{r}
seq(
  from = 1,
  to = 9,
  by = 1)
```

If you provide values to arguments by naming the arguments, you can reorder the arguments and get the same answer:

```{r}
seq(
  by = 1,
  to = 9,
  from = 1)
```

There are various combinations of arguments that one could use to obtain the same result.
For instance, here is code to generate a sequence from 1 to 9 by 2:

```{r}
seq(
  from = 1,
  to = 9,
  by = 2)
```

Or, alternatively, you could specify the length of the desired sequence (5 values):

```{r}
seq(
  from = 1,
  to = 9,
  length.out = 5)
```

If you want to generate a series with decimal values, you could specify a long desired sequence of 81 values:

```{r}
seq(
  from = 1,
  to = 9,
  length.out = 81)
```

This is equivalent to specifying a sequence from 1 to 9 by 0.1:

```{r}
seq(
  from = 1,
  to = 9,
  by = 0.1)
```

Hopefully, that provides an example for how to learn about a particular function, its arguments, and how to use them.

## Download Football Data {#sec-downloadFootballData}

Below, we provide examples for how to download various types of National Football League (NFL) data.
For additional resources, @Congelio2023 provides a helpful introductory text for working with NFL data in `R`.

```{r}
#| eval: false
#| include: false

# Downloaded Data
load(file = "./data/nfl_players.RData")
load(file = "./data/nfl_teams.RData")
load(file = "./data/nfl_rosters.RData")
load(file = "./data/nfl_rosters_weekly.RData")
load(file = "./data/nfl_schedules.RData")
load(file = "./data/nfl_combine.RData")
load(file = "./data/nfl_draftPicks.RData")
load(file = "./data/nfl_depthCharts.RData")
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_pbp.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_4thdown.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_participation.RData", fsep = ""))
load(file = "./data/nfl_actualStats_weekly.RData")
load(file = "./data/nfl_injuries.RData")
load(file = "./data/nfl_snapCounts.RData")
load(file = "./data/nfl_espnQBR.RData")
load(file = "./data/nfl_nextGenStats_weekly.RData")
load(file = "./data/nfl_advancedStatsPFR.RData")
load(file = "./data/nfl_playerContracts.RData")
load(file = "./data/nfl_ftnCharting.RData")
load(file = "./data/nfl_playerIDs.RData")
load(file = "./data/nfl_rankings.RData")
load(file = "./data/nfl_expectedFantasyPoints_weekly.RData")
load(file = "./data/nfl_expectedFantasyPoints_offense.RData")

# Calculated Data
load(file = "./data/nfl_actualStats_career.RData")
load(file = "./data/nfl_actualStats_seasonal.RData")
```

### Players {#sec-downloadPlayers}

```{r}
#| eval: false

nfl_players <- progressr::with_progress(
  nflreadr::load_players())
```

```{r}
#| eval: false
#| include: false

save(
  nfl_players,
  file = "./data/nfl_players.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_players.RData")
```

### Teams {#sec-downloadTeams}

```{r}
#| eval: false

nfl_teams <- progressr::with_progress(
  nflreadr::load_teams(current = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_teams,
  file = "./data/nfl_teams.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_teams.RData")
```

### Player Info {#sec-downloadPlayerInfo}

### Rosters {#sec-downloadRosters}

A Data Dictionary for rosters is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_rosters.html>

```{r}
#| eval: false

nfl_rosters <- progressr::with_progress(
  nflreadr::load_rosters(seasons = TRUE))

nfl_rosters_weekly <- progressr::with_progress(
  nflreadr::load_rosters_weekly(seasons = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_rosters,
  file = "./data/nfl_rosters.RData"
)

save(
  nfl_rosters_weekly,
  file = "./data/nfl_rosters_weekly.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_rosters.RData")
load(file = "./data/nfl_rosters_weekly.RData")
```

### Game Schedules {#sec-downloadSchedules}

A Data Dictionary for game schedules data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_schedules.html>

```{r}
#| eval: false

nfl_schedules <- progressr::with_progress(
  nflreadr::load_schedules(seasons = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_schedules,
  file = "./data/nfl_schedules.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_schedules.RData")
```

### The Combine {#sec-combine}

A Data Dictionary for data from the combine is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_combine.html>

```{r}
#| eval: false

nfl_combine <- progressr::with_progress(
  nflreadr::load_combine(seasons = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_combine,
  file = "./data/nfl_combine.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_combine.RData")
```

### Draft Picks {#sec-draftPicks}

A Data Dictionary for draft picks data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_draft_picks.html>

```{r}
#| eval: false

nfl_draftPicks <- progressr::with_progress(
  nflreadr::load_draft_picks(seasons = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_draftPicks,
  file = "./data/nfl_draftPicks.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_draftPicks.RData")
```

### Depth Charts {#sec-depthCharts}

A Data Dictionary for data from weekly depth charts is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_depth_charts.html>

```{r}
#| eval: false

nfl_depthCharts <- progressr::with_progress(
  nflreadr::load_depth_charts(seasons = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_depthCharts,
  file = "./data/nfl_depthCharts.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_depthCharts.RData")
```

### Play-By-Play Data {#sec-downloadPlayByPlay}

To download play-by-play data from prior weeks and seasons, we can use the `load_pbp()` function of the `nflreadr` package.
We add a progress bar using the `with_progress()` function from the `progressr` package because it takes a while to run.
A Data Dictionary for the play-by-play data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_pbp.html>

::: {#nte-downloadPlayByPlay .callout-note title="Downloading play-by-play data"}
Note: the following code takes a while to run.
:::

```{r}
#| eval: false

nfl_pbp <- progressr::with_progress(
  nflreadr::load_pbp(seasons = TRUE))
```

```{r}
#| include: false

nfl_pbp <- nflreadr::load_pbp(seasons = TRUE)
```

```{r}
#| include: false

save(
  nfl_pbp,
  file = "./data/nfl_pbp.RData"
)
```

```{r}
#| eval: false
#| include: false

load(file = "./data/nfl_pbp.RData")
```

```{r}
#| eval: false
#| include: false

load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_pbp.RData", fsep = ""))
```

### 4th Down Data {#sec-download4thDown}

::: {#nte-download4thDownData .callout-note title="Downloading 4th down data"}
Note: the following code takes a while to run.
:::

```{r}
#| warning: false
#| message: false

nfl_4thdown <- nfl4th::load_4th_pbp(seasons = 2014:2023)
```

```{r}
#| include: false

save(
  nfl_4thdown,
  file = "./data/nfl_4thdown.RData"
)
```

```{r}
#| eval: false
#| include: false

load(file = "./data/nfl_4thdown.RData")
```

```{r}
#| eval: false
#| include: false

load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_4thdown.RData", fsep = ""))
```

### Participation {#sec-downloadParticipation}

A Data Dictionary for the participation data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_participation.html>

```{r}
nfl_participation <- progressr::with_progress(
  nflreadr::load_participation(
    seasons = TRUE,
    include_pbp = TRUE))
```

```{r}
#| include: false

save(
  nfl_participation,
  file = "./data/nfl_participation.RData"
)
```

```{r}
#| eval: false
#| include: false

load(file = "./data/nfl_participation.RData")
```

```{r}
#| eval: false
#| include: false

load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_participation.RData", fsep = ""))
```

### Historical Weekly Actual Player Statistics {#sec-downloadActualStats}

We can download historical week-by-week actual player statistics using the `load_player_stats()` function from the `nflreadr` package.
A Data Dictionary for statistics for offensive players is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_player_stats.html>.
A Data Dictionary for statistics for defensive players is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_player_stats_def.html>.

```{r}
#| eval: false

nfl_actualStats_offense_weekly <- progressr::with_progress(
  nflreadr::load_player_stats(
    seasons = TRUE,
    stat_type = "offense"))

nfl_actualStats_defense_weekly <- progressr::with_progress(
  nflreadr::load_player_stats(
    seasons = TRUE,
    stat_type = "defense"))

nfl_actualStats_kicking_weekly <- progressr::with_progress(
  nflreadr::load_player_stats(
    seasons = TRUE,
    stat_type = "kicking"))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_actualStats_offense_weekly, nfl_actualStats_defense_weekly, nfl_actualStats_kicking_weekly,
  file = "./data/nfl_actualStats_weekly.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualStats_weekly.RData")
```

### Injuries {#sec-injuries}

A Data Dictionary for injury data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_injuries.html>

```{r}
#| eval: false

nfl_injuries <- progressr::with_progress(
  nflreadr::load_injuries(seasons = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_injuries,
  file = "./data/nfl_injuries.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_injuries.RData")
```

### Snap Counts {#sec-snapCounts}

A Data Dictionary for snap counts data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_snap_counts.html>

```{r}
#| eval: false

nfl_snapCounts <- progressr::with_progress(
  nflreadr::load_snap_counts(seasons = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_snapCounts,
  file = "./data/nfl_snapCounts.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_snapCounts.RData")
```

### ESPN QBR {#sec-espnQBR}

A Data Dictionary for ESPN QBR data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_espn_qbr.html>

```{r}
#| eval: false

nfl_espnQBR_seasonal <- progressr::with_progress(
  nflreadr::load_espn_qbr(
    seasons = TRUE,
    summary_type = c("season")))

nfl_espnQBR_weekly <- progressr::with_progress(
  nflreadr::load_espn_qbr(
    seasons = TRUE,
    summary_type = c("weekly")))

nfl_espnQBR_weekly$game_week <- as.character(nfl_espnQBR_weekly$game_week)

nfl_espnQBR <- bind_rows(
  nfl_espnQBR_seasonal,
  nfl_espnQBR_weekly
)
```

```{r}
#| eval: false
#| include: false

save(
  nfl_espnQBR,
  file = "./data/nfl_espnQBR.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_espnQBR.RData")
```

### NFL Next Gen Stats {#sec-nextGenStats}

A Data Dictionary for NFL Next Gen Stats data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_nextgen_stats.html>

```{r}
#| eval: false

nfl_nextGenStats_pass_weekly <- progressr::with_progress(
  nflreadr::load_nextgen_stats(
    seasons = TRUE,
    stat_type = c("passing")))

nfl_nextGenStats_rush_weekly <- progressr::with_progress(
  nflreadr::load_nextgen_stats(
    seasons = TRUE,
    stat_type = c("rushing")))

nfl_nextGenStats_rec_weekly <- progressr::with_progress(
  nflreadr::load_nextgen_stats(
    seasons = TRUE,
    stat_type = c("receiving")))

nfl_nextGenStats_weekly <- bind_rows(
  nfl_nextGenStats_pass_weekly,
  nfl_nextGenStats_rush_weekly,
  nfl_nextGenStats_rec_weekly
)
```

```{r}
#| eval: false
#| include: false

save(
  nfl_nextGenStats_weekly,
  file = "./data/nfl_nextGenStats_weekly.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_nextGenStats_weekly.RData")
```

### Advanced Stats from PFR {#sec-advancedStatsPFR}

A Data Dictionary for PFR passing data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_pfr_passing.html>

```{r}
#| eval: false

nfl_advancedStatsPFR_pass_seasonal <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("pass"),
    summary_level = c("season")))

nfl_advancedStatsPFR_pass_weekly <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("pass"),
    summary_level = c("week")))

nfl_advancedStatsPFR_rush_seasonal <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("rush"),
    summary_level = c("season")))

nfl_advancedStatsPFR_rush_weekly <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("rush"),
    summary_level = c("week")))

nfl_advancedStatsPFR_rec_seasonal <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("rec"),
    summary_level = c("season")))

nfl_advancedStatsPFR_rec_weekly <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("rec"),
    summary_level = c("week")))

nfl_advancedStatsPFR_def_seasonal <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("def"),
    summary_level = c("season")))

nfl_advancedStatsPFR_def_weekly <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("def"),
    summary_level = c("week")))

nfl_advancedStatsPFR <- bind_rows(
  nfl_advancedStatsPFR_pass_seasonal,
  nfl_advancedStatsPFR_pass_weekly,
  nfl_advancedStatsPFR_rush_seasonal,
  nfl_advancedStatsPFR_rush_weekly,
  nfl_advancedStatsPFR_rec_seasonal,
  nfl_advancedStatsPFR_rec_weekly,
  nfl_advancedStatsPFR_def_seasonal,
  nfl_advancedStatsPFR_def_weekly,
)
```

```{r}
#| eval: false
#| include: false

save(
  nfl_advancedStatsPFR,
  file = "./data/nfl_advancedStatsPFR.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_advancedStatsPFR.RData")
```

### Player Contracts {#sec-playerContracts}

A Data Dictionary for player contracts data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_contracts.html>

```{r}
#| eval: false

nfl_playerContracts <- progressr::with_progress(
  nflreadr::load_contracts())
```

```{r}
#| eval: false
#| include: false

save(
  nfl_playerContracts,
  file = "./data/nfl_playerContracts.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_playerContracts.RData")
```

### FTN Charting Data {#sec-ftnCharting}

A Data Dictionary for FTN Charting data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_ftn_charting.html>

```{r}
#| eval: false

nfl_ftnCharting <- progressr::with_progress(
  nflreadr::load_ftn_charting(seasons = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_ftnCharting,
  file = "./data/nfl_ftnCharting.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_ftnCharting.RData")
```

### Fantasy Player IDs {#sec-fantasyPlayerIDs}

A Data Dictionary for fantasy player ID data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_ff_playerids.html>

```{r}
#| eval: false

nfl_playerIDs <- progressr::with_progress(
  nflreadr::load_ff_playerids())
```

```{r}
#| eval: false
#| include: false

save(
  nfl_playerIDs,
  file = "./data/nfl_playerIDs.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_playerIDs.RData")
```

### FantasyPros Rankings {#sec-fantasyProsRankings}

A Data Dictionary for FantasyPros ranking data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_ff_rankings.html>

```{r}
#| eval: false

#nfl_rankings <- progressr::with_progress( # currently throws error
#  nflreadr::load_ff_rankings(type = "all"))

nfl_rankings_draft <- progressr::with_progress(
  nflreadr::load_ff_rankings(type = "draft"))

nfl_rankings_weekly <- progressr::with_progress(
  nflreadr::load_ff_rankings(type = "week"))

nfl_rankings <- bind_rows(
  nfl_rankings_draft,
  nfl_rankings_weekly
)
```

```{r}
#| eval: false
#| include: false

save(
  nfl_rankings,
  file = "./data/nfl_rankings.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_rankings.RData")
```

### Expected Fantasy Points {#sec-expectedFantasyPoints}

A Data Dictionary for expected fantasy points data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_ff_opportunity.html>

```{r}
#| eval: false

nfl_expectedFantasyPoints_weekly <- progressr::with_progress(
  nflreadr::load_ff_opportunity(
    seasons = TRUE,
    stat_type = "weekly",
    model_version = "latest"
  ))

nfl_expectedFantasyPoints_pass <- progressr::with_progress(
  nflreadr::load_ff_opportunity(
    seasons = TRUE,
    stat_type = "pbp_pass",
    model_version = "latest"
  ))

nfl_expectedFantasyPoints_rush <- progressr::with_progress(
  nflreadr::load_ff_opportunity(
    seasons = TRUE,
    stat_type = "pbp_rush",
    model_version = "latest"
  ))

nfl_expectedFantasyPoints_weekly$season <- as.integer(nfl_expectedFantasyPoints_weekly$season)

nfl_expectedFantasyPoints_offense <- bind_rows(
  nfl_expectedFantasyPoints_pass,
  nfl_expectedFantasyPoints_rush
)
```

```{r}
#| eval: false
#| include: false

save(
  nfl_expectedFantasyPoints_weekly,
  file = "./data/nfl_expectedFantasyPoints_weekly.RData"
)

save(
  nfl_expectedFantasyPoints_offense,
  file = "./data/nfl_expectedFantasyPoints_offense.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_expectedFantasyPoints_weekly.RData")
load(file = "./data/nfl_expectedFantasyPoints_offense.RData")
```

## Data Dictionary {#sec-dataDictionary}

Data Dictionaries are metadata that describe the meaning of the variables in a datset.
You can find Data Dictionaries for the various NFL datasets at the following link: <https://nflreadr.nflverse.com/articles/index.html>.

## Create a Data Frame {#sec-createDF}

Here is an example of creating a data frame:

```{r}
players <- data.frame(
  ID = 1:12,
  name = c(
    "Ken Cussion",
    "Ben Sacked",
    "Chuck Downfield",
    "Ron Ingback",
    "Rhonda Ball",
    "Hugo Long",
    "Lionel Scrimmage",
    "Drew Blood",
    "Chase Emdown",
    "Justin Time",
    "Spike D'Ball",
    "Isac Ulooz"),
  position = c("QB","QB","QB","RB","RB","WR","WR","WR","WR","TE","TE","LB"),
  age = c(40, 30, 24, 20, 18, 23, 27, 32, 26, 23, NA, 37)
  )

fantasyPoints <- data.frame(
  ID = c(2, 7, 13, 14),
  fantasyPoints = c(250, 170, 65, 15)
)
```

## Variable Names {#sec-variableNames}

To see the names of variables in a data frame, use the following syntax:

```{r}
names(nfl_players)

names(players)

names(fantasyPoints)
```

## Logical Operators {#sec-logicalOperators}

### Is Equal To: `==` {#sec-logicalOperatorEqual}

```{r}
players$position == "RB"
```

### Is Not Equal To: `!=` {#sec-logicalOperatorNotEqual}

```{r}
players$position != "RB"
```

### Is Greater Than: `>` {#sec-logicalOperatorGreaterThan}

```{r}
players$age > 30
```

### Is Less Than: `<` {#sec-logicalOperatorLessThan}

```{r}
players$age < 30
```

### Is Greater Than or Equal To: `>=` {#sec-logicalOperatorGreaterThanEqual}

```{r}
players$age >= 30
```

### Is Less Than or Equal To: `<=` {#sec-logicalOperatorLessThanEqual}

```{r}
players$age <= 30
```

### Is In a Value of Another Vector: `%in%` {#sec-logicalOperatorInVector}

```{r}
players$position %in% c("RB","WR")
```

### Is Not In a Value of Another Vector: `!(%in%)` {#sec-logicalOperatorNotInVector}

```{r}
!(players$position %in% c("RB","WR"))
```

### Is Missing: `is.na()` {#sec-logicalOperatorMissing}

```{r}
is.na(players$age)
```

### Is Not Missing: `!is.na()` {#sec-logicalOperatorNotMissing}

```{r}
!is.na(players$age)
```

### And: `&`{#sec-logicalOperatorAnd}

```{r}
players$position == "WR" & players$age > 26
```

### Or: `|` {#sec-logicalOperatorOr}

```{r}
players$position == "WR" | players$age > 23
```

## Subset {#sec-subset}

To subset a data frame, use brackets to specify the subset of rows and columns to keep, where the value/vector before the comma specifies the rows to keep, and the value/vector after the comma specifies the columns to keep:

```{r}
#| eval: false

dataframe[rowsToKeep, columnsToKeep]
```

You can subset by using any of the following:

- numeric indices of the rows/columns to keep (or drop)
- names of the rows/columns to keep (or drop)
- values of `TRUE` and `FALSE` corresponding to which rows/columns to keep

### One Variable {#sec-subsetOneVariable}

To subset one variable, use the following syntax:

```{r}
players$name
```

or:

```{r}
players[,"name"]
```

### Particular Rows of One Variable {#sec-subsetParticularRowsOneVariable}

To subset one variable, use the following syntax:

```{r}
players$name[which(players$position == "RB")]
```

or:

```{r}
players[which(players$position == "RB"), "name"]
```

### Particular Columns (Variables) {#sec-subsetParticularColumns}

To subset particular columns/variables, use the following syntax:

#### Base `R` {#sec-subsetParticularColumnsBaseR}

```{r}
subsetVars <- c("name","age")

players[,c(2,4)]
players[,c("name","age")]
players[,subsetVars]
```

Or, to drop columns:

```{r}
dropVars <- c("name","age")

players[,-c(2,4)]
players[,!(names(players) %in% c("name","age"))]
players[,!(names(players) %in% dropVars)]
```

#### Tidyverse {#sec-subsetParticularColumnsTidyverse}

```{r}
players %>%
  select(name, age)

players %>%
  select(name:age)

players %>%
  select(all_of(subsetVars))
```

Or, to drop columns:

```{r}
players %>%
  select(-name, -age)

players %>%
  select(-c(name:age))

players %>%
  select(-all_of(dropVars))
```

### Particular Rows {#sec-subsetParticularRows}

To subset particular rows, use the following syntax:

#### Base `R` {#sec-subsetParticularRowsBaseR}

```{r}
subsetRows <- c(4,5)

players[c(4,5),]
players[subsetRows,]
players[which(players$position == "RB"),]
```

#### Tidyverse {#sec-subsetParticularRowsTidyverse}

```{r}
players %>%
  filter(position == "WR")

players %>%
  filter(position == "WR", age <= 26)

players %>%
  filter(position == "WR" | age >= 26)
```

### Particular Rows and Columns {#sec-subsetParticularRowsAndColumns}

To subset particular rows and columns, use the following syntax:

#### Base `R` {#sec-subsetParticularRowsAndColumnsBaseR}

```{r}
players[c(4,5), c(2,4)]
players[subsetRows, subsetVars]
players[which(players$position == "RB"), subsetVars]
```

#### Tidyverse {#sec-subsetParticularRowsAndColumnsTidyverse}

```{r}
players %>%
  filter(position == "RB") %>%
  select(all_of(subsetVars))
```

## View Data {#sec-viewData}

### All Data {#sec-viewDataAll}

To view data, use the following syntax:

```{r}
#| eval: false

View(players)
```

### First 6 Rows/Elements {#sec-viewDataHead}

To view only the first six rows (if a data frame) or elements (if a vector), use the following syntax:

```{r}
head(nfl_players)
head(nfl_players$display_name)
```

## Data Characteristics {#sec-dataCharacteristics}

### Data Structure {#sec-dataCharacteristicsStructure}

```{r}
str(nfl_players)
```

### Data Dimensions {#sec-dataCharacteristicsDimensions}

Number of rows and columns:

```{r}
dim(nfl_players)
```

Number of rows:

```{r}
nrow(nfl_players)
```

Number of columns:

```{r}
ncol(nfl_players)
```

### Number of Elements {#sec-dataCharacteristicsLength}

```{r}
length(nfl_players$display_name)
```

### Number of Missing Elements {#sec-dataCharacteristicsMissingElements}

```{r}
length(nfl_players$college_name[which(is.na(nfl_players$college_name))])
```

### Number of Non-Missing Elements {#sec-dataCharacteristicsNonMissingElements}

```{r}
length(nfl_players$college_name[which(!is.na(nfl_players$college_name))])
length(na.omit(nfl_players$college_name))
```

## Create New Variables {#sec-createNewVars}

To create a new variable, use the following syntax:

```{r}
players$newVar <- NA
```

Here is an example of creating a new variable:

```{r}
players$newVar <- 1:nrow(players)
```

```{r}
#| include: false

players$newVar <- NULL
```

## Recode Variables {#sec-recodeVars}

Here is an example of recoding a variable:

```{r}
players$oldVar1 <- NA
players$oldVar1[which(players$position == "QB")] <- "quarterback"
players$oldVar1[which(players$position == "RB")] <- "running back"
players$oldVar1[which(players$position == "WR")] <- "wide receiver"
players$oldVar1[which(players$position == "TE")] <- "tight end"

players$oldVar2 <- NA
players$oldVar2[which(players$age < 30)] <- "young"
players$oldVar2[which(players$age >= 30)] <- "old"
```

Recode multiple variables:

```{r}
players %>%
  mutate(across(c(
    oldVar1:oldVar2),
    ~ case_match(
      .,
      c("quarterback","old","running back") ~ 0,
      c("wide receiver","tight end","young") ~ 1)))
```

## Rename Variables {#renameVars}

```{r}
players <- players %>% 
  rename(
    newVar1 = oldVar1,
    newVar2 = oldVar2)
```

Using a vector of variable names:

```{r}
#| eval: false

varNamesFrom <- c("oldVar1","oldVar2")
varNamesTo <- c("newVar1","newVar2")

players <- players %>% 
  rename_with(~ varNamesTo, all_of(varNamesFrom))
```

## Convert the Types of Variables {#convertVarTypes}

One variable:

```{r}
players$factorVar <- factor(players$ID)
players$numericVar <- as.numeric(players$age)
players$integerVar <- as.integer(players$newVar1)
players$characterVar <- as.character(players$newVar2)
```

Multiple variables:

```{r}
players %>%
  mutate(across(c(
    ID,
    age),
    as.numeric))

players %>%
  mutate(across(
    age:newVar1,
    as.character))

players %>%
  mutate(across(where(is.factor), as.character))
```

## Merging/Joins {#sec-merging}

### Overview {#sec-mergingOverview}

Merging (also called joining) merges two data objects using a shared set of variables called "keys."
The keys are the variable(s) that uniquely identify each row (i.e., they account for the levels of nesting).
In some data objects, the key might be the player's identification number (e.g., `player_id`).
However, some data objects have multiple keys.
For instance, in long form data objects, each participant may have multiple rows corresponding to multiple seasons.
In this case, the keys may be `player_id` and `season`.
If a participant has multiple rows corresponding to seasons and games/weeks, the keys are `player_id`, `season`, and `week`.
In general, each row should have a value on each of the keys; there should be no missingness in the keys.

To merge two objects, the key(s) that will be used to match the records must be present in both objects.
The keys are used to merge the variables in object 1 (`x`) with the variables in object 2 (`y`).
Different merge types select different rows to merge.

Note: if the two objects include variables with the same name (apart from the keys), `R` will not know how you want each to appear in the merged object.
So, it will add a suffix (e.g., `.x`, `.y`) to each common variable to indicate which object (i.e., object `x` or object `y`) the variable came from, where object `x` is the first object—i.e., the object to which object `y` (the second object) is merged.
In general, apart from the keys, you should not include variables with the same name in two objects to be merged.
To prevent this, either remove or rename the shared variable in one of the objects, or include the shared variable as a key.
However, as described above, you should include it as a key ***only*** if it uniquely identifies each row in terms of levels of nesting.

### Data Before Merging {#sec-mergingData}

Here are the data in the `players` object:

```{r}
players

dim(players)
```

The data are structured in ID form.
That is, every row in the dataset is uniquely identified by the variable, `ID`.

Here are the data in the `fantasyPoints` object:

```{r}
fantasyPoints

dim(fantasyPoints)
```

### Types of Joins {#sec-mergeTypes}

#### Visual Overview of Join Types {#sec-mergeTypesVisual}

Below is a visual that depicts various types of merges/joins.
Object `x` is the circle labeled as `x`.
Object `y` is the circle labeled as `y`.
The area of overlap in the Venn diagram indicates the rows on the keys that are shared between the two objects (e.g., the same `player_id`, `season`, and `week`).
The non-overlapping area indicates the rows on the keys that are unique to each object.
The shaded blue area indicates which rows (on the keys) are kept in the merged object from each of the two objects, when using each of the merge types.
For instance, a left outer join keeps the shared rows and the rows that are unique to object `x`, but it drops the rows that are unique to object `y`.

![Types of merges/joins](images/joinTypes.png)

#### Full Outer Join {#sec-fullJoin}

A full outer join includes all rows in `x` **or** `y`.
It returns columns from `x` and `y`.
Here is how to merge two data frames using a full outer join (i.e., "full join"):

```{r}
fullJoinData <- full_join(
  players,
  fantasyPoints,
  by = "ID")

fullJoinData

dim(fullJoinData)
```

#### Left Outer Join {#sec-leftJoin}

A left outer join includes all rows in `x`.
It returns columns from `x` and `y`.
Here is how to merge two data frames using a left outer join ("left join"):

```{r}
leftJoinData <- left_join(
  players,
  fantasyPoints,
  by = "ID")

leftJoinData

dim(leftJoinData)
```

#### Right Outer Join {#sec-rightJoin}

A right outer join includes all rows in `y`.
It returns columns from `x` and `y`.
Here is how to merge two data frames using a right outer join ("right join"):

```{r}
rightJoinData <- right_join(
  players,
  fantasyPoints,
  by = "ID")

rightJoinData

dim(rightJoinData)
```

#### Inner Join {#sec-innerJoin}

An inner join includes all rows that are in **both** `x` **and** `y`.
An inner join will return one row of `x` for each matching row of `y`, and can duplicate values of records on either side (left or right) if `x` and `y` have more than one matching record.
It returns columns from `x` and `y`.
Here is how to merge two data frames using an inner join:

```{r}
innerJoinData <- inner_join(
  players,
  fantasyPoints,
  by = "ID")

innerJoinData

dim(innerJoinData)
```

#### Semi Join {#sec-semiJoin}

A semi join is a filter.
A left semi join returns all rows from `x` **with** a match in `y`.
That is, it filters out records from `x` that are not in `y`.
Unlike an [inner join](#innerJoin), a left semi join will never duplicate rows of `x`, and it includes columns from only `x` (not from `y`). 
Here is how to merge two data frames using a left semi join:

```{r}
semiJoinData <- semi_join(
  players,
  fantasyPoints,
  by = "ID")

semiJoinData

dim(semiJoinData)
```

#### Anti Join {#sec-antiJoin}

An anti join is a filter.
A left anti join returns all rows from `x` **without** a match in `y`.
That is, it filters out records from `x` that are in `y`.
It returns columns from only `x` (not from `y`).
Here is how to merge two data frames using a left anti join:

```{r}
antiJoinData <- anti_join(
  players,
  fantasyPoints,
  by = "ID")

antiJoinData

dim(antiJoinData)
```

#### Cross Join {#sec-crossJoin}

A cross join combines each row in `x` with each row in `y`.

```{r}
crossJoinData <- cross_join(
  players,
  fantasyPoints)

crossJoinData

dim(crossJoinData)
```

## Transform Data from Long to Wide {#sec-longToWide}

Depending on the analysis, it may be important to restructure the data to be in long or wide form.
When the data are in wide form, each player has only one row.
When the data are in long form, each player has multiple rows—e.g., a row for each game.
The data structure is called wide or long form because a dataset in wide form has more columns and fewer rows (i.e., it appears wider and shorter), whereas a dataset in long form has more rows and fewer columns (i.e., it appears narrower and taller).

Here are the data in the `nfl_actualStats_offense_weekly` object.
The data are structured in "player-season-week form".
That is, every row in the dataset is uniquely identified by the variables, `player_id`, `season`, and `week`.
This is an example of long form, because each player has multiple rows.

Original data:

```{r}
dataLong <- nfl_actualStats_offense_weekly %>% 
  select(player_id, player_display_name, season, week, fantasy_points)

dim(dataLong)

names(dataLong)
```

Below, we widen the data by two variables (`season` and `week`), using `tidyverse`, so that the data are now in "player form" (where each row is uniquely identified by the `player_id` variable): 

```{r}
dataWide <- dataLong %>% 
  pivot_wider(
    names_from = c(season, week),
    names_glue = "{.value}_{season}_week{week}",
    values_from = fantasy_points)

dim(dataWide)

names(dataWide)
```

## Transform Data from Wide to Long {#sec-wideToLong}

Conversely, we can also restructure data from wide to long.

Original data:

```{r}
dataWide <- nfl_actualStats_offense_weekly %>% 
  select(player_id, player_display_name, season, week, recent_team, opponent_team)

dim(dataWide)

names(dataWide)
```

Data in long form, transformed from wide form using `tidyverse`:

```{r}
dataLong <- dataWide %>% 
  pivot_longer(
    cols = c(recent_team, opponent_team),
    names_to = "role",
    values_to = "team")

dim(dataLong)

names(dataLong)
```

## Loops {#sec-loops}

If you want to perform the same computation multiple times, it can be faster to do it in a loop compared to writing out the same computation many times.
For instance, here is a loop that runs from 1 to `{r} length(players$ID)` (the number of players in the `players` object), incrementing by 1 after each iteration.
The loop prints each element of a vector (i.e., the player's name) and the loop index (`i`) that indicates where the loop is in terms of its iterations:

```{r}
for(i in 1:length(players$ID)){
  print(paste("The loop is at index:", i, sep = " "))
  print(paste("My favorite player is:", players$name[i], sep = " "))
}
```

## Calculations {#sec-calculations}

### Historical Actual Player Statistics {#sec-calculateActualStats}

In addition to week-by-week actual player statistics, we can also compute historical actual player statistics as a function of different timeframes, including season-by-season and career statistics.

#### Career Statistics {#sec-calculateActualCareerStats}

First, we can compute the players' career statistics using the `calculate_player_stats()`, `calculate_player_stats_def()`, and `calculate_player_stats_kicking()` functions from the `nflfastR` package for offensive players, defensive players, and kickers, respectively.

::: {#nte-calculateActualCareerStats .callout-note title="Calculating players' career statistics"}
Note: the following code takes a while to run.
:::

```{r}
#| eval: false

nfl_actualStats_offense_career <- nflfastR::calculate_player_stats(
  nfl_pbp,
  weekly = FALSE)

nfl_actualStats_defense_career <- nflfastR::calculate_player_stats_def(
  nfl_pbp,
  weekly = FALSE)

nfl_actualStats_kicking_career <- nflfastR::calculate_player_stats_kicking(
  nfl_pbp,
  weekly = FALSE)
```

```{r}
#| eval: false
#| include: false

save(
  nfl_actualStats_offense_career, nfl_actualStats_defense_career, nfl_actualStats_kicking_career,
  file = "./data/nfl_actualStats_career.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualStats_career.RData")
```

#### Season-by-Season Statistics {#sec-calculateActualSeasonalStats}

Second, we can compute the players' season-by-season statistics.

```{r}
seasons <- unique(nfl_pbp$season)

nfl_pbp_seasonalList <- list()
nfl_actualStats_offense_seasonalList <- list()
nfl_actualStats_defense_seasonalList <- list()
nfl_actualStats_kicking_seasonalList <- list()
```

::: {#nte-calculateActualSeasonalStats .callout-note title="Calculating players' season-by-season statistics"}
Note: the following code takes a while to run.
:::

```{r}
#| eval: false

pb <- txtProgressBar(
  min = 0,
  max = length(seasons),
  style = 3)

for(i in 1:length(seasons)){
  # Subset play-by-play data by season
  nfl_pbp_seasonalList[[i]] <- nfl_pbp %>% 
    filter(season == seasons[i])
  
  # Compute actual statistics by season
  nfl_actualStats_offense_seasonalList[[i]] <- 
    nflfastR::calculate_player_stats(
      nfl_pbp_seasonalList[[i]],
      weekly = FALSE)

  nfl_actualStats_defense_seasonalList[[i]] <- 
    nflfastR::calculate_player_stats_def(
      nfl_pbp_seasonalList[[i]],
      weekly = FALSE)

  nfl_actualStats_kicking_seasonalList[[i]] <- 
    nflfastR::calculate_player_stats_kicking(
      nfl_pbp_seasonalList[[i]],
      weekly = FALSE)

  nfl_actualStats_offense_seasonalList[[i]]$season <- seasons[i]
  nfl_actualStats_defense_seasonalList[[i]]$season <- seasons[i]
  nfl_actualStats_kicking_seasonalList[[i]]$season <- seasons[i]
  
  print(
    paste("Completed computing projections for season: ", seasons[i], sep = ""))

  # Update the progress bar
  setTxtProgressBar(pb, i)
}

# Close the progress bar
close(pb)

nfl_actualStats_offense_seasonal <- nfl_actualStats_offense_seasonalList %>% 
  bind_rows()
nfl_actualStats_defense_seasonal <- nfl_actualStats_defense_seasonalList %>% 
  bind_rows()
nfl_actualStats_kicking_seasonal <- nfl_actualStats_kicking_seasonalList %>% 
  bind_rows()
```

```{r}
#| eval: false
#| include: false

save(
  nfl_actualStats_offense_seasonal, nfl_actualStats_defense_seasonal, nfl_actualStats_kicking_seasonal,
  file = "./data/nfl_actualStats_seasonal.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualStats_seasonal.RData")
```

#### Week-by-Week Statistics {#sec-calculateActualWeeklyStats}

We already load players' week-by-week statistics [above](#sec-downloadActualStats).
Nevertheless, we could compute players' weekly statistics from the play-by-play data using the following syntax:

```{r}
#| eval: false

nfl_actualStats_offense_weekly <- nflfastR::calculate_player_stats(
  nfl_pbp,
  weekly = TRUE)

nfl_actualStats_defense_weekly <- nflfastR::calculate_player_stats_def(
  nfl_pbp,
  weekly = TRUE)

nfl_actualStats_kicking_weekly <- nflfastR::calculate_player_stats_kicking(
  nfl_pbp,
  weekly = TRUE)
```

### Historical Actual Fantasy Points {#sec-calculateActualPoints}

Specify scoring settings:

#### Weekly {#sec-calculateActualPointsWeekly}

#### Seasonal {#sec-calculateActualPointsSeasonal}

#### Career {#sec-calculateActualPointsCareer}

### Player Age {#sec-calculatePlayerAge}

```{r}
# Reshape from wide to long format
nfl_actualStats_offense_weekly_long <- nfl_actualStats_offense_weekly %>% 
  pivot_longer(
    cols = c(recent_team, opponent_team),
    names_to = "role",
    values_to = "team")

# Perform separate inner join operations for the home_team and away_team
nfl_actualStats_offense_weekly_home <- inner_join(
  nfl_actualStats_offense_weekly_long,
  nfl_schedules,
  by = c("season","week","team" = "home_team")) %>% 
  mutate(home_away = "home_team")

nfl_actualStats_offense_weekly_away <- inner_join(
  nfl_actualStats_offense_weekly_long,
  nfl_schedules,
  by = c("season","week","team" = "away_team")) %>% 
  mutate(home_away = "away_team")

nfl_actualStats_defense_weekly_home <- inner_join(
  nfl_actualStats_defense_weekly,
  nfl_schedules,
  by = c("season","week","team" = "home_team")) %>% 
  mutate(home_away = "home_team")

nfl_actualStats_defense_weekly_away <- inner_join(
  nfl_actualStats_defense_weekly,
  nfl_schedules,
  by = c("season","week","team" = "away_team")) %>% 
  mutate(home_away = "away_team")

nfl_actualStats_kicking_weekly_home <- inner_join(
  nfl_actualStats_kicking_weekly,
  nfl_schedules,
  by = c("season","week","team" = "home_team")) %>% 
  mutate(home_away = "home_team")

nfl_actualStats_kicking_weekly_away <- inner_join(
  nfl_actualStats_kicking_weekly,
  nfl_schedules,
  by = c("season","week","team" = "away_team")) %>% 
  mutate(home_away = "away_team")

# Combine the results of the join operations
nfl_actualStats_offense_weekly_schedules_long <- bind_rows(
  nfl_actualStats_offense_weekly_home,
  nfl_actualStats_offense_weekly_away)

nfl_actualStats_defense_weekly_schedules_long <- bind_rows(
  nfl_actualStats_defense_weekly_home,
  nfl_actualStats_defense_weekly_away)

nfl_actualStats_kicking_weekly_schedules_long <- bind_rows(
  nfl_actualStats_kicking_weekly_home,
  nfl_actualStats_kicking_weekly_away)

# Reshape from long to wide
player_game_gameday_offense <- nfl_actualStats_offense_weekly_schedules_long %>%
  distinct(player_id, season, week, game_id, home_away, team, gameday) %>% #, .keep_all = TRUE
  pivot_wider(
    names_from = home_away,
    values_from = team)

player_game_gameday_defense <- nfl_actualStats_defense_weekly_schedules_long %>%
  distinct(player_id, season, week, game_id, home_away, team, gameday) %>% #, .keep_all = TRUE
  pivot_wider(
    names_from = home_away,
    values_from = team)

player_game_gameday_kicking <- nfl_actualStats_kicking_weekly_schedules_long %>%
  distinct(player_id, season, week, game_id, home_away, team, gameday) %>% #, .keep_all = TRUE
  pivot_wider(
    names_from = home_away,
    values_from = team)

# Merge player birthdate and the game date
player_game_birthdate_gameday_offense <- left_join(
  player_game_gameday_offense,
  unique(nfl_players[,c("gsis_id","birth_date")]),
  by = c("player_id" = "gsis_id")
)

player_game_birthdate_gameday_defense <- left_join(
  player_game_gameday_defense,
  unique(nfl_players[,c("gsis_id","birth_date")]),
  by = c("player_id" = "gsis_id")
)

player_game_birthdate_gameday_kicking <- left_join(
  player_game_gameday_kicking,
  unique(nfl_players[,c("gsis_id","birth_date")]),
  by = c("player_id" = "gsis_id")
)

player_game_birthdate_gameday_offense$birth_date <- ymd(player_game_birthdate_gameday_offense$birth_date)
player_game_birthdate_gameday_offense$gameday <- ymd(player_game_birthdate_gameday_offense$gameday)

player_game_birthdate_gameday_defense$birth_date <- ymd(player_game_birthdate_gameday_defense$birth_date)
player_game_birthdate_gameday_defense$gameday <- ymd(player_game_birthdate_gameday_defense$gameday)

player_game_birthdate_gameday_kicking$birth_date <- ymd(player_game_birthdate_gameday_kicking$birth_date)
player_game_birthdate_gameday_kicking$gameday <- ymd(player_game_birthdate_gameday_kicking$gameday)

# Calculate player's age for a given week as the difference between their birthdate and the game date
player_game_birthdate_gameday_offense$age <- interval(
  start = player_game_birthdate_gameday_offense$birth_date,
  end = player_game_birthdate_gameday_offense$gameday
) %>% 
  time_length(unit = "years")

player_game_birthdate_gameday_defense$age <- interval(
  start = player_game_birthdate_gameday_defense$birth_date,
  end = player_game_birthdate_gameday_defense$gameday
) %>% 
  time_length(unit = "years")

player_game_birthdate_gameday_kicking$age <- interval(
  start = player_game_birthdate_gameday_kicking$birth_date,
  end = player_game_birthdate_gameday_kicking$gameday
) %>% 
  time_length(unit = "years")

# Merge with player info
player_age_offense <-  left_join(
  player_game_birthdate_gameday_offense,
  nfl_players %>% select(-birth_date, -season),
  by = c("player_id" = "gsis_id"))

player_age_defense <-  left_join(
  player_game_birthdate_gameday_defense,
  nfl_players %>% select(-birth_date, -season),
  by = c("player_id" = "gsis_id"))

player_age_kicking <-  left_join(
  player_game_birthdate_gameday_kicking,
  nfl_players %>% select(-birth_date, -season),
  by = c("player_id" = "gsis_id"))

# Add game_id to weekly stats to facilitate merging
nfl_actualStats_game_offense_weekly <- nfl_actualStats_offense_weekly %>% 
  left_join(
    player_age_offense[,c("season","week","player_id","game_id")],
    by = c("season","week","player_id"))

nfl_actualStats_game_defense_weekly <- nfl_actualStats_defense_weekly %>% 
  left_join(
    player_age_offense[,c("season","week","player_id","game_id")],
    by = c("season","week","player_id"))

nfl_actualStats_game_kicking_weekly <- nfl_actualStats_kicking_weekly %>% 
  left_join(
    player_age_offense[,c("season","week","player_id","game_id")],
    by = c("season","week","player_id"))

# Merge with player weekly stats
player_age_stats_offense <- left_join(
  player_age_offense %>% select(-position, -position_group),
  nfl_actualStats_game_offense_weekly,
  by = c(c("season","week","player_id","game_id")))

player_age_stats_defense <- left_join(
  player_age_defense %>% select(-position, -position_group),
  nfl_actualStats_game_defense_weekly,
  by = c(c("season","week","player_id","game_id")))

player_age_stats_kicking <- left_join(
  player_age_kicking %>% select(-position, -position_group),
  nfl_actualStats_game_kicking_weekly,
  by = c(c("season","week","player_id","game_id")))

player_age_stats_offense$years_of_experience <- as.integer(player_age_stats_offense$years_of_experience)
player_age_stats_defense$years_of_experience <- as.integer(player_age_stats_defense$years_of_experience)
player_age_stats_kicking$years_of_experience <- as.integer(player_age_stats_kicking$years_of_experience)

# Merge player info with seasonal stats
player_seasonal_offense <- left_join(
  nfl_actualStats_offense_seasonal,
  nfl_players %>% select(-position, -position_group, -season),
  by = c("player_id" = "gsis_id")
)

player_seasonal_defense <- left_join(
  nfl_actualStats_defense_seasonal,
  nfl_players %>% select(-position, -position_group, -season),
  by = c("player_id" = "gsis_id")
)

player_seasonal_kicking <- left_join(
  nfl_actualStats_kicking_seasonal,
  nfl_players %>% select(-position, -position_group, -season),
  by = c("player_id" = "gsis_id")
)

# Calculate age
season_startdate <- nfl_schedules %>% 
  group_by(season) %>% 
  summarise(startdate = min(gameday, na.rm = TRUE))

player_seasonal_offense <- player_seasonal_offense %>% 
  left_join(
    season_startdate,
    by = "season"
  )

player_seasonal_defense <- player_seasonal_defense %>% 
  left_join(
    season_startdate,
    by = "season"
  )

player_seasonal_kicking <- player_seasonal_kicking %>% 
  left_join(
    season_startdate,
    by = "season"
  )

player_seasonal_offense$age <- interval(
  start = player_seasonal_offense$birth_date,
  end = player_seasonal_offense$startdate
) %>% 
  time_length(unit = "years")

player_seasonal_defense$age <- interval(
  start = player_seasonal_defense$birth_date,
  end = player_seasonal_defense$startdate
) %>% 
  time_length(unit = "years")

player_seasonal_kicking$age <- interval(
  start = player_seasonal_kicking$birth_date,
  end = player_seasonal_kicking$startdate
) %>% 
  time_length(unit = "years")
```

## Plotting {#sec-plotting}

### Rushing Yards per Carry By Player Age {#sec-plotRushEPAbyAge}

```{r}
#| label: fig-rushYPCperSeasonByAge
#| fig-cap: "2023 NFL Rushing Yards Per Carry per Season by Player Age"

# Prepare Data
rushing_attempts <- nfl_pbp %>% 
  dplyr::filter(
    season_type == "REG") %>% 
    filter(
      rush == 1,
      rush_attempt == 1,
      qb_scramble == 0,
      qb_dropback == 0,
      !is.na(rushing_yards))

rb_yardsPerCarry <- rushing_attempts %>% 
  group_by(rusher_id, season) %>% 
  summarise(
    ypc = mean(rushing_yards, na.rm = TRUE),
    rush_attempts = n(),
    .groups = "drop") %>% 
  ungroup() %>% 
  left_join(
    nfl_players %>% select(-season),
    by = c("rusher_id" = "gsis_id")
  ) %>% 
  filter(
    position_group == "RB",
    rush_attempts >= 50) %>% 
  left_join(
    season_startdate,
    by = "season"
  )

rb_yardsPerCarry$age <- interval(
  start = rb_yardsPerCarry$birth_date,
  end = rb_yardsPerCarry$startdate
) %>% 
  time_length(unit = "years")

# Create Plot
ggplot2::ggplot(
  data = rb_yardsPerCarry,
  ggplot2::aes(
    x = age,
    y = ypc)) +
  ggplot2::geom_point() +
  ggplot2::geom_smooth() +
  ggplot2::labs(
    x = "Rushing Back Age (years)",
    y = "Rushing Yards per Carry/season",
    title = "2023 NFL Rushing Yards Per Carry per Season by Player Age",
    subtitle = "(minimum 50 rushing attempts)"
  ) +
  ggplot2::theme_classic()
```

```{r}
#| label: fig-rushEPAperSeasonByAge
#| fig-cap: "2023 NFL Rushing Expected Points Added (EPA) per Season by Player Age"

# Subset Data
rb_seasonal <- player_seasonal_offense %>% 
  filter(position_group == "RB")

# Create Plot
ggplot2::ggplot(
  data = rb_seasonal,
  ggplot2::aes(
    x = age,
    y = rushing_epa)) +
  ggplot2::geom_point() +
  ggplot2::geom_smooth() +
  ggplot2::labs(
    x = "Rushing Back Age (years)",
    y = "Rushing EPA/season",
    title = "2023 NFL Rushing Expected Points Added (EPA) per Season by Player Age"
  ) +
  ggplot2::theme_classic()
```

### Defensive and Offensive EPA per Play {#sec-plotDefOffEPA}

Expected points added (EPA) per play by the team with possession.

```{r}
#| label: fig-plotDefOffEPA
#| fig-cap: "2023 NFL Offensive and Defensive EPA per Play"

pbp_regularSeason <- nfl_pbp %>% 
  dplyr::filter(
    season == 2023,
    season_type == "REG") %>%
  dplyr::filter(!is.na(posteam) & (rush == 1 | pass == 1))

epa_offense <- pbp_regularSeason %>%
  dplyr::group_by(team = posteam) %>%
  dplyr::summarise(off_epa = mean(epa, na.rm = TRUE))

epa_defense <- pbp_regularSeason %>%
  dplyr::group_by(team = defteam) %>%
  dplyr::summarise(def_epa = mean(epa, na.rm = TRUE))

epa_combined <- epa_offense %>%
  dplyr::inner_join(epa_defense, by = "team")

ggplot2::ggplot(
  data = epa_combined,
  ggplot2::aes(
    x = off_epa,
    y = def_epa)) +
  nflplotR::geom_mean_lines(
    ggplot2::aes(
      x0 = off_epa ,
      y0 = def_epa)) +
  nflplotR::geom_nfl_logos(
    ggplot2::aes(
      team_abbr = team),
      width = 0.065,
      alpha = 0.7) +
  ggplot2::labs(
    x = "Offense EPA/play",
    y = "Defense EPA/play",
    title = "2023 NFL Offensive and Defensive EPA per Play"
  ) +
  ggplot2::theme_classic() +
  ggplot2::scale_y_reverse()
```

::: {.content-visible when-format="html"}

## Session Info {#sec-gettingStartedSessionInfo}

At the end of each chapter in which `R` code is used, I provide the session information, which describes the system and operating system the code was run on and the versions of each package.
That way, if you get different results from me, you can see which differ, to help with reproducibility.
If you run the (all of) the exact same code as is provided in the text, in the exact same order, with the exact same setup (platform, operating system, package versions, etc.), you should get the exact same answer as is in the text.
That is the idea of reproducibility—getting the exact same result with the exact same inputs.
Reproducibility is crucial for studies to achieve greater confidence in their findings and to ensure better replicability of findings across studies.

```{r}
sessionInfo()
```

:::
