# Getting Started with R for Data Analysis {#sec-gettingStarted}

The book uses `R` for statistical analyses (<http://www.r-project.org>).
R is a free software environment; you can download it at no charge here: <https://cran.r-project.org>.

## Initial Setup {#sec-initialSetup}

To get started, follow the following steps:

1. Install `R`: <https://cran.r-project.org>
1. Install `RStudio Desktop`: <https://posit.co/download/rstudio-desktop>
1. After installing `RStudio`, open `RStudio` and run the following code in the console to install several key `R` packages:

```{r}
#| eval: false

install.packages(c("petersenlab","tidyverse","psych"))
```

::: {#nte-gettingStarted .callout-note title="If you are in Dr. Petersen's class"}
If you are in Dr. Petersen's class, also perform the following steps:

1. Set up a free account on [GitHub.com](https://github.com).
1. Download GitHub Desktop: <https://desktop.github.com>
:::

## Installing Packages {#sec-installingPackages}

You can install R packages using the following syntax:

```{r}
#| eval: false

install.packages("INSERT_PACKAGE_NAME_HERE")
```

For instance, you can use the following code to install the `nflreadr` package:

```{r}
#| eval: false

install.packages("nflreadr")
```

## Load Packages {#sec-loadPackages}

```{r}
library("nflreadr")
library("nflfastR")
library("nflplotR")
library("progressr")
library("lubridate")
library("tidyverse")
```

## Download Football Data {#sec-downloadFootballData}

```{r}
#| eval: false
#| include: false

library("here")

# Downloaded Data
load(file = here("data", "nfl_players.RData"))
load(file = here("data", "nfl_teams.RData"))
load(file = here("data", "nfl_rosters.RData"))
load(file = here("data", "nfl_rosters_weekly.RData"))
load(file = here("data", "nfl_schedules.RData"))
load(file = here("data", "nfl_combine.RData"))
load(file = here("data", "nfl_draftPicks.RData"))
load(file = here("data", "nfl_depthCharts.RData"))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_pbp.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_participation.RData", fsep = ""))
load(file = here("data", "nfl_actualStats_weekly.RData"))
load(file = here("data", "nfl_injuries.RData"))
load(file = here("data", "nfl_snapCounts.RData"))
load(file = here("data", "nfl_espnQBR.RData"))
load(file = here("data", "nfl_nextGenStats_weekly.RData"))
load(file = here("data", "nfl_advancedStatsPFR.RData"))
load(file = here("data", "nfl_playerContracts.RData"))
load(file = here("data", "nfl_ftnCharting.RData"))
load(file = here("data", "nfl_playerIDs.RData"))
load(file = here("data", "nfl_rankings.RData"))
load(file = here("data", "nfl_expectedFantasyPoints_weekly.RData"))
load(file = here("data", "nfl_expectedFantasyPoints_offense.RData"))

# Calculated Data
load(file = here("data", "nfl_actualStats_career.RData"))
load(file = here("data", "nfl_actualStats_seasonal.RData"))
```

### Players {#sec-downloadPlayers}

```{r}
#| eval: false

nfl_players <- progressr::with_progress(
  nflreadr::load_players())
```

```{r}
#| eval: false
#| include: false

save(
  nfl_players,
  file = here("data", "nfl_players.RData")
)
```

```{r}
#| include: false

library("here")

load(file = here("data", "nfl_players.RData"))
```

### Teams {#sec-downloadTeams}

```{r}
#| eval: false

nfl_teams <- progressr::with_progress(
  nflreadr::load_teams(current = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_teams,
  file = here("data", "nfl_teams.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_teams.RData"))
```

### Player Info {#sec-downloadPlayerInfo}

### Rosters {#sec-downloadRosters}

A Data Dictionary for rosters is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_rosters.html>

```{r}
#| eval: false

nfl_rosters <- progressr::with_progress(
  nflreadr::load_rosters(seasons = TRUE))

nfl_rosters_weekly <- progressr::with_progress(
  nflreadr::load_rosters_weekly(seasons = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_rosters,
  file = here("data", "nfl_rosters.RData")
)

save(
  nfl_rosters_weekly,
  file = here("data", "nfl_rosters_weekly.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_rosters.RData"))
load(file = here("data", "nfl_rosters_weekly.RData"))
```

### Game Schedules {#sec-downloadSchedules}

A Data Dictionary for game schedules data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_schedules.html>

```{r}
#| eval: false

nfl_schedules <- progressr::with_progress(
  nflreadr::load_schedules(seasons = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_schedules,
  file = here("data", "nfl_schedules.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_schedules.RData"))
```

### The Combine {#sec-combine}

A Data Dictionary for data from the combine is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_combine.html>

```{r}
#| eval: false

nfl_combine <- progressr::with_progress(
  nflreadr::load_combine(seasons = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_combine,
  file = here("data", "nfl_combine.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_combine.RData"))
```

### Draft Picks {#sec-draftPicks}

A Data Dictionary for draft picks data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_draft_picks.html>

```{r}
#| eval: false

nfl_draftPicks <- progressr::with_progress(
  nflreadr::load_draft_picks(seasons = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_draftPicks,
  file = here("data", "nfl_draftPicks.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_draftPicks.RData"))
```

### Depth Charts {#sec-depthCharts}

A Data Dictionary for data from weekly depth charts is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_depth_charts.html>

```{r}
#| eval: false

nfl_depthCharts <- progressr::with_progress(
  nflreadr::load_depth_charts(seasons = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_depthCharts,
  file = here("data", "nfl_depthCharts.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_depthCharts.RData"))
```

### Play-By-Play Data {#sec-downloadPlayByPlay}

To download play-by-play data from prior weeks and seasons, we can use the `load_pbp()` function of the `nflreadr` package.
We add a progress bar using the `with_progress()` function from the `progressr` package because it takes a while to run.
A Data Dictionary for the play-by-play data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_pbp.html>

::: {#nte-downloadPlayByPlay .callout-note title="Downloading play-by-play data"}
Note: the following code takes a while to run.
:::

```{r}
#| eval: false

nfl_pbp <- progressr::with_progress(
  nflreadr::load_pbp(seasons = TRUE))
```

```{r}
#| include: false

nfl_pbp <- nflreadr::load_pbp(seasons = TRUE)
```

```{r}
#| eval: false
#| include: false

save(
  nfl_pbp,
  file = here("data", "nfl_pbp.RData")
)
```

```{r}
#| eval: false
#| include: false

load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_pbp.RData", fsep = ""))
```

### Participation {#sec-downloadParticipation}

A Data Dictionary for the participation data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_participation.html>

```{r}
nfl_participation <- progressr::with_progress(
  nflreadr::load_participation(
    seasons = TRUE,
    include_pbp = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_participation,
  file = here("data", "nfl_participation.RData")
)
```

```{r}
#| eval: false
#| include: false

load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_participation.RData", fsep = ""))
```

### Historical Weekly Actual Player Statistics {#sec-downloadActualStats}

We can download historical week-by-week actual player statistics using the `load_player_stats()` function from the `nflreadr` package.
A Data Dictionary for statistics for offensive players is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_player_stats.html>.
A Data Dictionary for statistics for defensive players is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_player_stats_def.html>.

```{r}
#| eval: false

nfl_actualStats_offense_weekly <- progressr::with_progress(
  nflreadr::load_player_stats(
    seasons = TRUE,
    stat_type = "offense"))

nfl_actualStats_defense_weekly <- progressr::with_progress(
  nflreadr::load_player_stats(
    seasons = TRUE,
    stat_type = "defense"))

nfl_actualStats_kicking_weekly <- progressr::with_progress(
  nflreadr::load_player_stats(
    seasons = TRUE,
    stat_type = "kicking"))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_actualStats_offense_weekly, nfl_actualStats_defense_weekly, nfl_actualStats_kicking_weekly,
  file = here("data", "nfl_actualStats_weekly.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_actualStats_weekly.RData"))
```

### Injuries {#sec-injuries}

A Data Dictionary for injury data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_injuries.html>

```{r}
#| eval: false

nfl_injuries <- progressr::with_progress(
  nflreadr::load_injuries(seasons = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_injuries,
  file = here("data", "nfl_injuries.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_injuries.RData"))
```

### Snap Counts {#sec-snapCounts}

A Data Dictionary for snap counts data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_snap_counts.html>

```{r}
#| eval: false

nfl_snapCounts <- progressr::with_progress(
  nflreadr::load_snap_counts(seasons = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_snapCounts,
  file = here("data", "nfl_snapCounts.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_snapCounts.RData"))
```

### ESPN QBR {#sec-espnQBR}

A Data Dictionary for ESPN QBR data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_espn_qbr.html>

```{r}
#| eval: false

nfl_espnQBR_seasonal <- progressr::with_progress(
  nflreadr::load_espn_qbr(
    seasons = TRUE,
    summary_type = c("season")))

nfl_espnQBR_weekly <- progressr::with_progress(
  nflreadr::load_espn_qbr(
    seasons = TRUE,
    summary_type = c("weekly")))

nfl_espnQBR_weekly$game_week <- as.character(nfl_espnQBR_weekly$game_week)

nfl_espnQBR <- bind_rows(
  nfl_espnQBR_seasonal,
  nfl_espnQBR_weekly
)
```

```{r}
#| eval: false
#| include: false

save(
  nfl_espnQBR,
  file = here("data", "nfl_espnQBR.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_espnQBR.RData"))
```

### NFL Next Gen Stats {#sec-nextGenStats}

A Data Dictionary for NFL Next Gen Stats data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_nextgen_stats.html>

```{r}
#| eval: false

nfl_nextGenStats_pass_weekly <- progressr::with_progress(
  nflreadr::load_nextgen_stats(
    seasons = TRUE,
    stat_type = c("passing")))

nfl_nextGenStats_rush_weekly <- progressr::with_progress(
  nflreadr::load_nextgen_stats(
    seasons = TRUE,
    stat_type = c("rushing")))

nfl_nextGenStats_rec_weekly <- progressr::with_progress(
  nflreadr::load_nextgen_stats(
    seasons = TRUE,
    stat_type = c("receiving")))

nfl_nextGenStats_weekly <- bind_rows(
  nfl_nextGenStats_pass_weekly,
  nfl_nextGenStats_rush_weekly,
  nfl_nextGenStats_rec_weekly
)
```

```{r}
#| eval: false
#| include: false

save(
  nfl_nextGenStats_weekly,
  file = here("data", "nfl_nextGenStats_weekly.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_nextGenStats_weekly.RData"))
```

### Advanced Stats from PFR {#sec-advancedStatsPFR}

A Data Dictionary for PFR passing data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_pfr_passing.html>

```{r}
#| eval: false

nfl_advancedStatsPFR_pass_seasonal <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("pass"),
    summary_level = c("season")))

nfl_advancedStatsPFR_pass_weekly <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("pass"),
    summary_level = c("week")))

nfl_advancedStatsPFR_rush_seasonal <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("rush"),
    summary_level = c("season")))

nfl_advancedStatsPFR_rush_weekly <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("rush"),
    summary_level = c("week")))

nfl_advancedStatsPFR_rec_seasonal <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("rec"),
    summary_level = c("season")))

nfl_advancedStatsPFR_rec_weekly <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("rec"),
    summary_level = c("week")))

nfl_advancedStatsPFR_def_seasonal <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("def"),
    summary_level = c("season")))

nfl_advancedStatsPFR_def_weekly <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("def"),
    summary_level = c("week")))

nfl_advancedStatsPFR <- bind_rows(
  nfl_advancedStatsPFR_pass_seasonal,
  nfl_advancedStatsPFR_pass_weekly,
  nfl_advancedStatsPFR_rush_seasonal,
  nfl_advancedStatsPFR_rush_weekly,
  nfl_advancedStatsPFR_rec_seasonal,
  nfl_advancedStatsPFR_rec_weekly,
  nfl_advancedStatsPFR_def_seasonal,
  nfl_advancedStatsPFR_def_weekly,
)
```

```{r}
#| eval: false
#| include: false

save(
  nfl_advancedStatsPFR,
  file = here("data", "nfl_advancedStatsPFR.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_advancedStatsPFR.RData"))
```

### Player Contracts {#sec-playerContracts}

A Data Dictionary for player contracts data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_contracts.html>

```{r}
#| eval: false

nfl_playerContracts <- progressr::with_progress(
  nflreadr::load_contracts())
```

```{r}
#| eval: false
#| include: false

save(
  nfl_playerContracts,
  file = here("data", "nfl_playerContracts.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_playerContracts.RData"))
```

### FTN Charting Data {#sec-ftnCharting}

A Data Dictionary for FTN Charting data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_ftn_charting.html>

```{r}
#| eval: false

nfl_ftnCharting <- progressr::with_progress(
  nflreadr::load_ftn_charting(seasons = TRUE))
```

```{r}
#| eval: false
#| include: false

save(
  nfl_ftnCharting,
  file = here("data", "nfl_ftnCharting.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_ftnCharting.RData"))
```

### Fantasy Player IDs {#sec-fantasyPlayerIDs}

A Data Dictionary for fantasy player ID data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_ff_playerids.html>

```{r}
#| eval: false

nfl_playerIDs <- progressr::with_progress(
  nflreadr::load_ff_playerids())
```

```{r}
#| eval: false
#| include: false

save(
  nfl_playerIDs,
  file = here("data", "nfl_playerIDs.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_playerIDs.RData"))
```

### FantasyPros Rankings {#sec-fantasyProsRankings}

A Data Dictionary for FantasyPros ranking data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_ff_rankings.html>

```{r}
#| eval: false

#nfl_rankings <- progressr::with_progress( # currently throws error
#  nflreadr::load_ff_rankings(type = "all"))

nfl_rankings_draft <- progressr::with_progress(
  nflreadr::load_ff_rankings(type = "draft"))

nfl_rankings_weekly <- progressr::with_progress(
  nflreadr::load_ff_rankings(type = "week"))

nfl_rankings <- bind_rows(
  nfl_rankings_draft,
  nfl_rankings_weekly
)
```

```{r}
#| eval: false
#| include: false

save(
  nfl_rankings,
  file = here("data", "nfl_rankings.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_rankings.RData"))
```

### Expected Fantasy Points {#sec-expectedFantasyPoints}

A Data Dictionary for expected fantasy points data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_ff_opportunity.html>

```{r}
#| eval: false

nfl_expectedFantasyPoints_weekly <- progressr::with_progress(
  nflreadr::load_ff_opportunity(
    seasons = TRUE,
    stat_type = "weekly",
    model_version = "latest"
  ))

nfl_expectedFantasyPoints_pass <- progressr::with_progress(
  nflreadr::load_ff_opportunity(
    seasons = TRUE,
    stat_type = "pbp_pass",
    model_version = "latest"
  ))

nfl_expectedFantasyPoints_rush <- progressr::with_progress(
  nflreadr::load_ff_opportunity(
    seasons = TRUE,
    stat_type = "pbp_rush",
    model_version = "latest"
  ))

nfl_expectedFantasyPoints_weekly$season <- as.integer(nfl_expectedFantasyPoints_weekly$season)

nfl_expectedFantasyPoints_offense <- bind_rows(
  nfl_expectedFantasyPoints_pass,
  nfl_expectedFantasyPoints_rush
)
```

```{r}
#| eval: false
#| include: false

save(
  nfl_expectedFantasyPoints_weekly,
  file = here("data", "nfl_expectedFantasyPoints_weekly.RData")
)

save(
  nfl_expectedFantasyPoints_offense,
  file = here("data", "nfl_expectedFantasyPoints_offense.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_expectedFantasyPoints_weekly.RData"))
load(file = here("data", "nfl_expectedFantasyPoints_offense.RData"))
```

## Data Dictionary {#sec-dataDictionary}

Data Dictionaries are metadata that describe the meaning of the variables in a datset.
You can find Data Dictionaries for the various NFL datasets at the following link: <https://nflreadr.nflverse.com/articles/index.html>.

## Calculations {#sec-calculations}

### Historical Actual Player Statistics {#sec-calculateActualStats}

In addition to week-by-week actual player statistics, we can also compute historical actual player statistics as a function of different timeframes, including season-by-season and career statistics.

#### Career Statistics {#sec-calculateActualCareerStats}

First, we can compute the players' career statistics using the `calculate_player_stats()`, `calculate_player_stats_def()`, and `calculate_player_stats_kicking()` functions from the `nflfastR` package for offensive players, defensive players, and kickers, respectively.

::: {#nte-calculateActualCareerStats .callout-note title="Calculating players' career statistics"}
Note: the following code takes a while to run.
:::

```{r}
#| eval: false

nfl_actualStats_offense_career <- nflfastR::calculate_player_stats(
  nfl_pbp,
  weekly = FALSE)

nfl_actualStats_defense_career <- nflfastR::calculate_player_stats_def(
  nfl_pbp,
  weekly = FALSE)

nfl_actualStats_kicking_career <- nflfastR::calculate_player_stats_kicking(
  nfl_pbp,
  weekly = FALSE)
```

```{r}
#| eval: false
#| include: false

save(
  nfl_actualStats_offense_career, nfl_actualStats_defense_career, nfl_actualStats_kicking_career,
  file = here("data", "nfl_actualStats_career.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_actualStats_career.RData"))
```

#### Season-by-Season Statistics {#sec-calculateActualSeasonalStats}

Second, we can compute the players' season-by-season statistics.

```{r}
seasons <- unique(nfl_pbp$season)

nfl_pbp_seasonalList <- list()
nfl_actualStats_offense_seasonalList <- list()
nfl_actualStats_defense_seasonalList <- list()
nfl_actualStats_kicking_seasonalList <- list()
```

::: {#nte-calculateActualSeasonalStats .callout-note title="Calculating players' season-by-season statistics"}
Note: the following code takes a while to run.
:::

```{r}
#| eval: false

pb <- txtProgressBar(
  min = 0,
  max = length(seasons),
  style = 3)

for(i in 1:length(seasons)){
  # Subset play-by-play data by season
  nfl_pbp_seasonalList[[i]] <- nfl_pbp %>% 
    filter(season == seasons[i])
  
  # Compute actual statistics by season
  nfl_actualStats_offense_seasonalList[[i]] <- 
    nflfastR::calculate_player_stats(
      nfl_pbp_seasonalList[[i]],
      weekly = FALSE)

  nfl_actualStats_defense_seasonalList[[i]] <- 
    nflfastR::calculate_player_stats_def(
      nfl_pbp_seasonalList[[i]],
      weekly = FALSE)

  nfl_actualStats_kicking_seasonalList[[i]] <- 
    nflfastR::calculate_player_stats_kicking(
      nfl_pbp_seasonalList[[i]],
      weekly = FALSE)

  nfl_actualStats_offense_seasonalList[[i]]$season <- seasons[i]
  nfl_actualStats_defense_seasonalList[[i]]$season <- seasons[i]
  nfl_actualStats_kicking_seasonalList[[i]]$season <- seasons[i]
  
  print(
    paste("Completed computing projections for season: ", seasons[i], sep = ""))

  # Update the progress bar
  setTxtProgressBar(pb, i)
}

# Close the progress bar
close(pb)

nfl_actualStats_offense_seasonal <- nfl_actualStats_offense_seasonalList %>% 
  bind_rows()
nfl_actualStats_defense_seasonal <- nfl_actualStats_defense_seasonalList %>% 
  bind_rows()
nfl_actualStats_kicking_seasonal <- nfl_actualStats_kicking_seasonalList %>% 
  bind_rows()
```

```{r}
#| eval: false
#| include: false

save(
  nfl_actualStats_offense_seasonal, nfl_actualStats_defense_seasonal, nfl_actualStats_kicking_seasonal,
  file = here("data", "nfl_actualStats_seasonal.RData")
)
```

```{r}
#| include: false

load(file = here("data", "nfl_actualStats_seasonal.RData"))
```

#### Week-by-Week Statistics {#sec-calculateActualWeeklyStats}

We already load players' week-by-week statistics [above](#sec-downloadActualStats).
Nevertheless, we could compute players' weekly statistics from the play-by-play data using the following syntax:

```{r}
#| eval: false

nfl_actualStats_offense_weekly <- nflfastR::calculate_player_stats(
  nfl_pbp,
  weekly = TRUE)

nfl_actualStats_defense_weekly <- nflfastR::calculate_player_stats_def(
  nfl_pbp,
  weekly = TRUE)

nfl_actualStats_kicking_weekly <- nflfastR::calculate_player_stats_kicking(
  nfl_pbp,
  weekly = TRUE)
```

### Historical Actual Fantasy Points {#sec-calculateActualPoints}

### Player Age {#sec-calculatePlayerAge}

```{r}
# Reshape from wide to long format
nfl_actualStats_offense_weekly_long <- nfl_actualStats_offense_weekly %>% 
  pivot_longer(
    cols = c(recent_team, opponent_team),
    names_to = "role",
    values_to = "team")

# Perform separate inner join operations for the home_team and away_team
nfl_actualStats_offense_weekly_home <- inner_join(
  nfl_actualStats_offense_weekly_long,
  nfl_schedules,
  by = c("season","week","team" = "home_team")) %>% 
  mutate(home_away = "home_team")

nfl_actualStats_offense_weekly_away <- inner_join(
  nfl_actualStats_offense_weekly_long,
  nfl_schedules,
  by = c("season","week","team" = "away_team")) %>% 
  mutate(home_away = "away_team")

nfl_actualStats_defense_weekly_home <- inner_join(
  nfl_actualStats_defense_weekly,
  nfl_schedules,
  by = c("season","week","team" = "home_team")) %>% 
  mutate(home_away = "home_team")

nfl_actualStats_defense_weekly_away <- inner_join(
  nfl_actualStats_defense_weekly,
  nfl_schedules,
  by = c("season","week","team" = "away_team")) %>% 
  mutate(home_away = "away_team")

nfl_actualStats_kicking_weekly_home <- inner_join(
  nfl_actualStats_kicking_weekly,
  nfl_schedules,
  by = c("season","week","team" = "home_team")) %>% 
  mutate(home_away = "home_team")

nfl_actualStats_kicking_weekly_away <- inner_join(
  nfl_actualStats_kicking_weekly,
  nfl_schedules,
  by = c("season","week","team" = "away_team")) %>% 
  mutate(home_away = "away_team")

# Combine the results of the join operations
nfl_actualStats_offense_weekly_schedules_long <- bind_rows(
  nfl_actualStats_offense_weekly_home,
  nfl_actualStats_offense_weekly_away)

nfl_actualStats_defense_weekly_schedules_long <- bind_rows(
  nfl_actualStats_defense_weekly_home,
  nfl_actualStats_defense_weekly_away)

nfl_actualStats_kicking_weekly_schedules_long <- bind_rows(
  nfl_actualStats_kicking_weekly_home,
  nfl_actualStats_kicking_weekly_away)

# Reshape from long to wide
player_game_gameday_offense <- nfl_actualStats_offense_weekly_schedules_long %>%
  distinct(player_id, season, week, game_id, home_away, team, gameday) %>% #, .keep_all = TRUE
  pivot_wider(
    names_from = home_away,
    values_from = team)

player_game_gameday_defense <- nfl_actualStats_defense_weekly_schedules_long %>%
  distinct(player_id, season, week, game_id, home_away, team, gameday) %>% #, .keep_all = TRUE
  pivot_wider(
    names_from = home_away,
    values_from = team)

player_game_gameday_kicking <- nfl_actualStats_kicking_weekly_schedules_long %>%
  distinct(player_id, season, week, game_id, home_away, team, gameday) %>% #, .keep_all = TRUE
  pivot_wider(
    names_from = home_away,
    values_from = team)

# Merge player birthdate and the game date
player_game_birthdate_gameday_offense <- left_join(
  player_game_gameday_offense,
  unique(nfl_players[,c("gsis_id","birth_date")]),
  by = c("player_id" = "gsis_id")
)

player_game_birthdate_gameday_defense <- left_join(
  player_game_gameday_defense,
  unique(nfl_players[,c("gsis_id","birth_date")]),
  by = c("player_id" = "gsis_id")
)

player_game_birthdate_gameday_kicking <- left_join(
  player_game_gameday_kicking,
  unique(nfl_players[,c("gsis_id","birth_date")]),
  by = c("player_id" = "gsis_id")
)

player_game_birthdate_gameday_offense$birth_date <- ymd(player_game_birthdate_gameday_offense$birth_date)
player_game_birthdate_gameday_offense$gameday <- ymd(player_game_birthdate_gameday_offense$gameday)

player_game_birthdate_gameday_defense$birth_date <- ymd(player_game_birthdate_gameday_defense$birth_date)
player_game_birthdate_gameday_defense$gameday <- ymd(player_game_birthdate_gameday_defense$gameday)

player_game_birthdate_gameday_kicking$birth_date <- ymd(player_game_birthdate_gameday_kicking$birth_date)
player_game_birthdate_gameday_kicking$gameday <- ymd(player_game_birthdate_gameday_kicking$gameday)

# Calculate player's age for a given week as the difference between their birthdate and the game date
player_game_birthdate_gameday_offense$age <- interval(
  start = player_game_birthdate_gameday_offense$birth_date,
  end = player_game_birthdate_gameday_offense$gameday
) %>% 
  time_length(unit = "years")

player_game_birthdate_gameday_defense$age <- interval(
  start = player_game_birthdate_gameday_defense$birth_date,
  end = player_game_birthdate_gameday_defense$gameday
) %>% 
  time_length(unit = "years")

player_game_birthdate_gameday_kicking$age <- interval(
  start = player_game_birthdate_gameday_kicking$birth_date,
  end = player_game_birthdate_gameday_kicking$gameday
) %>% 
  time_length(unit = "years")

# Merge with player info
player_age_offense <-  left_join(
  player_game_birthdate_gameday_offense,
  nfl_players %>% select(-birth_date, -season),
  by = c("player_id" = "gsis_id"))

player_age_defense <-  left_join(
  player_game_birthdate_gameday_defense,
  nfl_players %>% select(-birth_date, -season),
  by = c("player_id" = "gsis_id"))

player_age_kicking <-  left_join(
  player_game_birthdate_gameday_kicking,
  nfl_players %>% select(-birth_date, -season),
  by = c("player_id" = "gsis_id"))

# Add game_id to weekly stats to facilitate merging
nfl_actualStats_game_offense_weekly <- nfl_actualStats_offense_weekly %>% 
  left_join(
    player_age_offense[,c("season","week","player_id","game_id")],
    by = c("season","week","player_id"))

nfl_actualStats_game_defense_weekly <- nfl_actualStats_defense_weekly %>% 
  left_join(
    player_age_offense[,c("season","week","player_id","game_id")],
    by = c("season","week","player_id"))

nfl_actualStats_game_kicking_weekly <- nfl_actualStats_kicking_weekly %>% 
  left_join(
    player_age_offense[,c("season","week","player_id","game_id")],
    by = c("season","week","player_id"))

# Merge with player weekly stats
player_age_stats_offense <- left_join(
  player_age_offense %>% select(-position, -position_group),
  nfl_actualStats_game_offense_weekly,
  by = c(c("season","week","player_id","game_id")))

player_age_stats_defense <- left_join(
  player_age_defense %>% select(-position, -position_group),
  nfl_actualStats_game_defense_weekly,
  by = c(c("season","week","player_id","game_id")))

player_age_stats_kicking <- left_join(
  player_age_kicking %>% select(-position, -position_group),
  nfl_actualStats_game_kicking_weekly,
  by = c(c("season","week","player_id","game_id")))

player_age_stats_offense$years_of_experience <- as.integer(player_age_stats_offense$years_of_experience)
player_age_stats_defense$years_of_experience <- as.integer(player_age_stats_defense$years_of_experience)
player_age_stats_kicking$years_of_experience <- as.integer(player_age_stats_kicking$years_of_experience)

# Merge player info with seasonal stats
player_seasonal_offense <- left_join(
  nfl_actualStats_offense_seasonal,
  nfl_players %>% select(-position, -position_group, -season),
  by = c("player_id" = "gsis_id")
)

player_seasonal_defense <- left_join(
  nfl_actualStats_defense_seasonal,
  nfl_players %>% select(-position, -position_group, -season),
  by = c("player_id" = "gsis_id")
)

player_seasonal_kicking <- left_join(
  nfl_actualStats_kicking_seasonal,
  nfl_players %>% select(-position, -position_group, -season),
  by = c("player_id" = "gsis_id")
)

# Calculate age
season_startdate <- nfl_schedules %>% 
  group_by(season) %>% 
  summarise(startdate = min(gameday, na.rm = TRUE))

player_seasonal_offense <- player_seasonal_offense %>% 
  left_join(
    season_startdate,
    by = "season"
  )

player_seasonal_defense <- player_seasonal_defense %>% 
  left_join(
    season_startdate,
    by = "season"
  )

player_seasonal_kicking <- player_seasonal_kicking %>% 
  left_join(
    season_startdate,
    by = "season"
  )

player_seasonal_offense$age <- interval(
  start = player_seasonal_offense$birth_date,
  end = player_seasonal_offense$startdate
) %>% 
  time_length(unit = "years")

player_seasonal_defense$age <- interval(
  start = player_seasonal_defense$birth_date,
  end = player_seasonal_defense$startdate
) %>% 
  time_length(unit = "years")

player_seasonal_kicking$age <- interval(
  start = player_seasonal_kicking$birth_date,
  end = player_seasonal_kicking$startdate
) %>% 
  time_length(unit = "years")
```

## Plotting {#sec-plotting}

### Rushing Yards per Carry By Player Age {#sec-plotRushEPAbyAge}

```{r}
# Prepare Data
rushing_attempts <- nfl_pbp %>% 
  dplyr::filter(
    season_type == "REG") %>% 
    filter(
      rush == 1,
      rush_attempt == 1,
      qb_scramble == 0,
      qb_dropback == 0,
      !is.na(rushing_yards))

rb_yardsPerCarry <- rushing_attempts %>% 
  group_by(rusher_id, season) %>% 
  summarise(
    ypc = mean(rushing_yards, na.rm = TRUE),
    rush_attempts = n(),
    .groups = "drop") %>% 
  ungroup() %>% 
  left_join(
    nfl_players %>% select(-season),
    by = c("rusher_id" = "gsis_id")
  ) %>% 
  filter(
    position_group == "RB",
    rush_attempts >= 50) %>% 
  left_join(
    season_startdate,
    by = "season"
  )

rb_yardsPerCarry$age <- interval(
  start = rb_yardsPerCarry$birth_date,
  end = rb_yardsPerCarry$startdate
) %>% 
  time_length(unit = "years")

# Create Plot
ggplot2::ggplot(
  data = rb_yardsPerCarry,
  ggplot2::aes(
    x = age,
    y = ypc)) +
  ggplot2::geom_point() +
  ggplot2::geom_smooth() +
  ggplot2::labs(
    x = "Rushing Back Age (years)",
    y = "Rushing Yards per Carry/season",
    title = "2023 NFL Rushing Yards Per Carry per Season by Player Age",
    subtitle = "(minimum 50 rushing attempts)"
  ) +
  ggplot2::theme_classic()
```

```{r}
# Subset Data
rb_seasonal <- player_seasonal_offense %>% 
  filter(position_group == "RB")

# Create Plot
ggplot2::ggplot(
  data = rb_seasonal,
  ggplot2::aes(
    x = age,
    y = rushing_epa)) +
  ggplot2::geom_point() +
  ggplot2::geom_smooth() +
  ggplot2::labs(
    x = "Rushing Back Age (years)",
    y = "Rushing EPA/season",
    title = "2023 NFL Rushing EPA per Season by Player Age"
  ) +
  ggplot2::theme_classic()
```

### Defensive and Offensive EPA per Play {#sec-plotDefOffEPA}

Expected points added (EPA) per play by the team with possession.

```{r}
#| label: fig-plotDefOffEPA
#| fig-cap: "2023 NFL Offensive and Defensive EPA per Play"

pbp_regularSeason <- nfl_pbp %>% 
  dplyr::filter(
    season == 2023,
    season_type == "REG") %>%
  dplyr::filter(!is.na(posteam) & (rush == 1 | pass == 1))

epa_offense <- pbp_regularSeason %>%
  dplyr::group_by(team = posteam) %>%
  dplyr::summarise(off_epa = mean(epa, na.rm = TRUE))

epa_defense <- pbp_regularSeason %>%
  dplyr::group_by(team = defteam) %>%
  dplyr::summarise(def_epa = mean(epa, na.rm = TRUE))

epa_combined <- epa_offense %>%
  dplyr::inner_join(epa_defense, by = "team")

ggplot2::ggplot(
  data = epa_combined,
  ggplot2::aes(
    x = off_epa,
    y = def_epa)) +
  nflplotR::geom_mean_lines(
    ggplot2::aes(
      x0 = off_epa ,
      y0 = def_epa)) +
  nflplotR::geom_nfl_logos(
    ggplot2::aes(
      team_abbr = team),
      width = 0.065,
      alpha = 0.7) +
  ggplot2::labs(
    x = "Offense EPA/play",
    y = "Defense EPA/play",
    title = "2023 NFL Offensive and Defensive EPA per Play"
  ) +
  ggplot2::theme_classic() +
  ggplot2::scale_y_reverse()
```

