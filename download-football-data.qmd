# Download and Process NFL Football Data {#sec-downloadFootballData}

## Load Packages {#sec-downloadFootballDataLoadPackages}

```{r}
library("ffanalytics") # to install: install.packages("remotes"); remotes::install_github("FantasyFootballAnalytics/ffanalytics")
library("petersenlab") # to install: install.packages("remotes"); remotes::install_github("DevPsyLab/petersenlab")
library("nflreadr")
library("nflfastR")
library("nfl4th")
library("nflplotR")
library("progressr")
library("lubridate")
library("tidyverse")
```

## Data Dictionaries of NFL Data {#sec-dataDictionary}

Data Dictionaries are metadata that describe the meaning of the variables in a dataset.
You can find Data Dictionaries for the various National Football League (NFL) datasets at the following link: <https://nflreadr.nflverse.com/articles/index.html>.

## Types of NFL Data {#sec-downloadFootballDataOverview}

Below, we provide examples for how to download various types of NFL data using the `nflreadr` package.
For additional resources, @Congelio2023 provides a helpful introductory text for working with NFL data in `R`.
We save each data file after downloading it, so we can use the data in subsequent chapters.
If you have difficulty downloading the data files using the `nflreadr` package, we also saved the data files so they are publicly available on the Open Science Framework: <https://osf.io/z6pg4>.

This chapter extensively uses merging to process the data for later use.
See @sec-merging for a reminder of how to perform merging, the types of merges, and what you can expect when you merge data objects with different formats.
Guidance for how to merge the various NFL-related data files is provided at the following link: <https://github.com/nflverse/nfldata/blob/master/DATASETS.md>.

```{r}
#| eval: false
#| include: false

# Downloaded Data - Raw
load(file = "./data/nfl_players_raw.RData")
load(file = "./data/nfl_teams_raw.RData")
load(file = "./data/nfl_rosters_raw.RData")
load(file = "./data/nfl_rosters_weekly_raw.RData")
load(file = "./data/nfl_schedules_raw.RData")
load(file = "./data/nfl_combine_raw.RData")
load(file = "./data/nfl_draftPicks_raw.RData")
load(file = "./data/nfl_depthCharts_raw.RData")
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_pbp_raw.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_4thdown_raw.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_participation_raw.RData", fsep = ""))
load(file = "./data/nfl_actualStats_position_weekly_raw.RData")
load(file = "./data/nfl_actualStats_weekly_raw.RData")
load(file = "./data/nfl_injuries_raw.RData")
load(file = "./data/nfl_snapCounts_raw.RData")
load(file = "./data/nfl_espnQBR_seasonal_raw.RData")
load(file = "./data/nfl_espnQBR_weekly_raw.RData")
load(file = "./data/nfl_nextGenStats_weekly_raw.RData")
load(file = "./data/nfl_advancedStatsPFR_seasonal_raw.RData")
load(file = "./data/nfl_advancedStatsPFR_weekly_raw.RData")
load(file = "./data/nfl_playerContracts_raw.RData")
load(file = "./data/nfl_ftnCharting_raw.RData")
load(file = "./data/nfl_playerIDs_raw.RData")
load(file = "./data/nfl_rankings_draft_raw.RData")
load(file = "./data/nfl_rankings_weekly_raw.RData")
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_expectedFantasyPoints_weekly_raw.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_expectedFantasyPoints_pbp_raw.RData", fsep = ""))
load(file = "./data/players_projections_seasonal_raw.RData")

# Calculated Data - Raw
load(file = "./data/nfl_actualStats_career_raw.RData")
load(file = "./data/nfl_actualStats_seasonal_raw.RData")
load(file = "./data/nfl_actualFantasyPoints_career_raw.RData")
load(file = "./data/nfl_actualFantasyPoints_seasonal_raw.RData")
load(file = "./data/nfl_actualFantasyPoints_weekly_raw.RData")

# Downloaded Data - Processed
load(file = "./data/nfl_players.RData")
load(file = "./data/nfl_teams.RData")
load(file = "./data/nfl_rosters.RData")
load(file = "./data/nfl_rosters_weekly.RData")
load(file = "./data/nfl_schedules.RData")
load(file = "./data/nfl_combine.RData")
load(file = "./data/nfl_draftPicks.RData")
load(file = "./data/nfl_depthCharts.RData")
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_pbp.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_4thdown.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_participation.RData", fsep = ""))
load(file = "./data/nfl_actualStats_position_weekly.RData")
load(file = "./data/nfl_actualStats_weekly.RData")
load(file = "./data/nfl_injuries.RData")
load(file = "./data/nfl_snapCounts.RData")
load(file = "./data/nfl_espnQBR_seasonal.RData")
load(file = "./data/nfl_espnQBR_weekly.RData")
load(file = "./data/nfl_nextGenStats_weekly.RData")
load(file = "./data/nfl_advancedStatsPFR_seasonal.RData")
load(file = "./data/nfl_advancedStatsPFR_weekly.RData")
load(file = "./data/nfl_playerContracts.RData")
load(file = "./data/nfl_ftnCharting.RData")
load(file = "./data/nfl_playerIDs.RData")
load(file = "./data/nfl_rankings_draft.RData")
load(file = "./data/nfl_rankings_weekly.RData")
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_expectedFantasyPoints_weekly.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_expectedFantasyPoints_pbp.RData", fsep = ""))
load(file = "./data/players_projectedPoints_seasonal.RData")

# Calculated Data - Processed
load(file = "./data/nfl_actualStats_career.RData")
load(file = "./data/nfl_actualStats_seasonal.RData")
load(file = "./data/nfl_actualFantasyPoints_career.RData")
load(file = "./data/nfl_actualFantasyPoints_seasonal.RData")
load(file = "./data/nfl_actualFantasyPoints_weekly.RData")
```

### Players {#sec-downloadPlayers}

```{r}
#| eval: false

nfl_players_raw <- progressr::with_progress(
  nflreadr::load_players())
```

```{r}
#| eval: false

save(
  nfl_players_raw,
  file = "./data/nfl_players_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_players_raw.RData")
```

The `nfl_players` object is in `player` form.
That is, each row should be uniquely identified by `gsis_id`.
Let's rearrange the data accordingly:

```{r}
nfl_players <- nfl_players_raw %>% 
  select(gsis_id, everything()) %>% 
  arrange(display_name)
```

Let's check for duplicate `player` instances:

```{r}
nfl_players %>% 
  group_by(gsis_id) %>% 
  filter(n() > 1) %>% 
  head()
```

#### Processing {#sec-processingPlayers}

Let's do some data cleanup:

```{r}
# Convert missing values to NA
nfl_players[nfl_players == ""] <- NA

# Drop players with missing values for gsis_id
nfl_players <- nfl_players %>% 
  filter(!is.na(gsis_id))
```

```{r}
#| eval: false

save(
  nfl_players,
  file = "./data/nfl_players.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_players.RData")
```

### Teams {#sec-downloadTeams}

```{r}
#| eval: false

nfl_teams_raw <- progressr::with_progress(
  nflreadr::load_teams(current = TRUE))
```

```{r}
#| eval: false

save(
  nfl_teams_raw,
  file = "./data/nfl_teams_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_teams_raw.RData")
```

The `nfl_teams` object is in `team` form.
That is, each row should be uniquely identified by `team_id`.
Let's rearrange the data accordingly:

```{r}
nfl_teams <- nfl_teams_raw %>% 
  select(team_id, everything())
```

Let's check for duplicate `team` instances:

```{r}
nfl_teams %>% 
  group_by(team_id) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_teams,
  file = "./data/nfl_teams.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_teams.RData")
```

### Fantasy Player IDs {#sec-fantasyPlayerIDs}

A Data Dictionary for fantasy player ID data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_ff_playerids.html>

```{r}
#| eval: false

nfl_playerIDs_raw <- progressr::with_progress(
  nflreadr::load_ff_playerids())
```

```{r}
#| eval: false

save(
  nfl_playerIDs_raw,
  file = "./data/nfl_playerIDs_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_playerIDs_raw.RData")
```

The `nfl_playerIDs` object is in `player` form.
That is, each row should be uniquely identified by `mfl_id`.

```{r}
nfl_playerIDs <- nfl_playerIDs_raw %>% 
  arrange(name, mfl_id)
```

Let's check for duplicate `player` instances:

```{r}
nfl_playerIDs %>% 
  group_by(mfl_id) %>% 
  filter(n() > 1) %>% 
  head()

nfl_playerIDs %>% 
  filter(!is.na(gsis_id)) %>% 
  group_by(gsis_id) %>% 
  filter(n() > 1) %>% 
  head()
```

Let's do some data processing to help with merging the dataset with other datasets:

```{r}
nfl_playerIDs$name[which(nfl_playerIDs$name == "Bennett,Michael")] <- "Michael Bennett"

nfl_playerIDs <- nfl_playerIDs %>% 
  mutate(
    merge_name = nflreadr::clean_player_names(name, lowercase = TRUE)
  )
```

```{r}
#| eval: false

save(
  nfl_playerIDs,
  file = "./data/nfl_playerIDs.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_playerIDs.RData")
```

### Player Info {#sec-downloadPlayerInfo}

### Rosters {#sec-downloadRosters}

A Data Dictionary for rosters is located at the following links:

- <https://nflreadr.nflverse.com/articles/dictionary_rosters.html>
- <https://github.com/nflverse/nfldata/blob/master/DATASETS.md#rosters>

```{r}
#| eval: false

nfl_rosters_raw <- progressr::with_progress(
  nflreadr::load_rosters(seasons = TRUE))

nfl_rosters_weekly_raw <- progressr::with_progress(
  nflreadr::load_rosters_weekly(seasons = TRUE))

rosters <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/rosters.csv")
```

```{r}
#| eval: false

save(
  nfl_rosters_raw,
  rosters,
  file = "./data/nfl_rosters_raw.RData"
)

save(
  nfl_rosters_weekly_raw,
  file = "./data/nfl_rosters_weekly_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_rosters_raw.RData")
load(file = "./data/nfl_rosters_weekly_raw.RData")
```

The `nfl_rosters` object is in `player`-`season`-`team` form.
That is, each row should be uniquely identified by the combination of `gsis_id`, `season`, and `team`.
Let's rearrange the data accordingly:

```{r}
nfl_rosters <- nfl_rosters_raw %>% 
  left_join(
    rosters %>% select(playerid, season, team, side, category, games, starts, years, av),
    by = c("season","team","pfr_id" = "playerid"),
    na_matches = "never"
  ) %>% 
  select(gsis_id, season, team, week, everything()) %>% 
  arrange(full_name, gsis_id, season, team, week)
```

Let's check for duplicate `player`-`season`-`team` instances:

```{r}
nfl_rosters %>% 
  group_by(gsis_id, season, team) %>% 
  filter(n() > 1) %>% 
  head()
```

#### Processing {#sec-processingRosters}

Let's do some data cleanup:

```{r}
# Drop players with missing values for gsis_id
nfl_rosters <- nfl_rosters %>% 
  filter(!is.na(gsis_id))

# Fill in missing values for a player in their duplicate instances, and then keep only the first of the duplicate instances
nfl_rosters <- nfl_rosters %>% 
  group_by(gsis_id, season, team) %>% 
  fill(names(.), .direction = "downup") %>% 
  slice_head(n = 1) %>% 
  ungroup()
```

Let's check again for duplicate `player`-`season`-`team` instances:

```{r}
nfl_rosters %>% 
  group_by(gsis_id, season, team) %>% 
  filter(n() > 1) %>% 
  head()
```

The `nfl_rosters_weekly` object is in `player`-`season`-`week` form.
That is, each row should be uniquely identified by the combination of `gsis_id`, `season`, and `week`.
Let's rearrange the data accordingly:

```{r}
nfl_rosters_weekly <- nfl_rosters_weekly_raw %>% 
  select(gsis_id, season, week, everything()) %>% 
  arrange(full_name, gsis_id, season, week)
```

Let's check for duplicate `player`-`season`-`week` instances:

```{r}
nfl_rosters_weekly %>% 
  group_by(gsis_id, season, week) %>% 
  filter(n() > 1) %>% 
  head()
```

Let's do some data cleanup:

```{r}
# Drop players with missing values for gsis_id
nfl_rosters_weekly <- nfl_rosters_weekly %>% 
  filter(!is.na(gsis_id))

# Fill in missing values for a player in their duplicate instances, and then keep only the first of the duplicate instances
nfl_rosters_weekly <- nfl_rosters_weekly %>% 
  group_by(gsis_id, season, week) %>% 
  fill(names(.), .direction = "downup") %>% 
  slice_head(n = 1) %>% 
  ungroup()
```

Let's check again for duplicate `player`-`season`-`week` instances:

```{r}
nfl_rosters_weekly %>% 
  group_by(gsis_id, season, week) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_rosters,
  file = "./data/nfl_rosters.RData"
)

save(
  nfl_rosters_weekly,
  file = "./data/nfl_rosters_weekly.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_rosters.RData")
load(file = "./data/nfl_rosters_weekly.RData")
```

### Game Schedules {#sec-downloadSchedules}

A Data Dictionary for game schedules data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_schedules.html>

```{r}
#| eval: false

nfl_schedules_raw <- progressr::with_progress(
  nflreadr::load_schedules(seasons = TRUE))
```

```{r}
#| eval: false

save(
  nfl_schedules_raw,
  file = "./data/nfl_schedules_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_schedules_raw.RData")
```

The `nfl_schedules` object is in `game` form and in `season`-`week` (and -`game type`) form.
That is, each row should be uniquely identified by `game_id`.
Each row should also be uniquely identified by the combination of `season` and `week` (and `game type`).

```{r}
nfl_schedules <- nfl_schedules_raw
```

Let's check for duplicate `game` instances:

```{r}
nfl_schedules %>% 
  group_by(game_id) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_schedules,
  file = "./data/nfl_schedules.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_schedules.RData")
```

### Standings {#sec-standings}

A Data Dictionary for game schedules data is located at the following link: <https://github.com/nflverse/nfldata/blob/master/DATASETS.md#standings>

```{r}
#| eval: false

nfl_standings_raw <- read_csv("http://www.habitatring.com/standings.csv")
```

```{r}
#| eval: false

save(
  nfl_standings_raw,
  file = "./data/nfl_standings_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_standings_raw.RData")
```

The `nfl_standings` object is in `season`-`team` form.
That is, each row should be uniquely identified by the combination of `season` and `team`.

```{r}
nfl_standings <- nfl_standings_raw
```

Let's check for duplicate `season`-`team` instances:

```{r}
nfl_standings %>% 
  group_by(season, team) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_standings,
  file = "./data/nfl_standings.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_standings.RData")
```

### The Combine {#sec-combine}

A Data Dictionary for data from the combine is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_combine.html>

```{r}
#| eval: false

nfl_combine_raw <- progressr::with_progress(
  nflreadr::load_combine(seasons = TRUE))
```

```{r}
#| eval: false

save(
  nfl_combine_raw,
  file = "./data/nfl_combine_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_combine_raw.RData")
```

The `nfl_combine` object is in `player` form.
That is, each row should be uniquely identified by the player's `id`.
However, there is no `gsis_id` variable to merge it easily with other datasets.
Some of the players have other `id` variables, including `pfr_id` and `cfb_id`.
Let's rearrange the data accordingly:

```{r}
nfl_combine <- nfl_combine_raw %>% 
  select(pfr_id, cfb_id, everything()) %>% 
  arrange(season, player_name)
```

Let's do some data processing to help with merging the dataset with other datasets:

```{r}
nfl_combine <- nfl_combine %>% 
  mutate(
    merge_name = nflreadr::clean_player_names(player_name, lowercase = TRUE)
  )

# First, merge on both pfr_id and cfb_id
merged_data1 <- left_join(
  nfl_combine,
  nfl_playerIDs %>% select(pfr_id, cfbref_id, gsis_id),
  by = c("pfr_id", "cfb_id" = "cfbref_id"),
  na_matches = "never"
)

# Second, merge on pfr_id
merged_data2 <- left_join(
  nfl_combine,
  nfl_playerIDs %>% select(pfr_id, merge_name, position, gsis_id),
  by = c("pfr_id","merge_name","pos" = "position"),
  na_matches = "never"
)

# Third, merge on cfb_id
merged_data3 <- left_join(
  nfl_combine,
  nfl_playerIDs %>% select(cfbref_id, merge_name, position, gsis_id),
  by = c("cfb_id" = "cfbref_id","merge_name","pos" = "position"),
  na_matches = "never"
)

# Combine gsis_id across merges
nfl_combine$gsis_id <- coalesce(
  merged_data1$gsis_id,
  merged_data2$gsis_id,
  merged_data3$gsis_id
  )

# Rearrange the data
nfl_combine <- nfl_combine %>% 
  select(gsis_id, pfr_id, cfb_id, player_name, everything()) %>% 
  arrange(season, player_name)
```

Let's check for duplicate `gsis_id`, `pfr_id`, and `cfb_id` instances:

```{r}
nfl_combine %>% 
  group_by(gsis_id) %>% 
  filter(n() > 1, !is.na(gsis_id)) %>% 
  arrange(gsis_id) %>% 
  head()

nfl_combine %>% 
  group_by(pfr_id) %>% 
  filter(n() > 1, !is.na(pfr_id)) %>% 
  arrange(pfr_id) %>% 
  head()

nfl_combine %>% 
  group_by(cfb_id) %>% 
  filter(n() > 1, !is.na(cfb_id)) %>% 
  arrange(cfb_id) %>% 
  head()
```

Let's do some additional data processing:

```{r}
# Drop Stanford Samuels Jr.
nfl_combine$gsis_id[which(nfl_combine$cfb_id == "stanford-samuels-1")] <- NA

nfl_combine <- nfl_combine %>% 
  separate_wider_delim(
    ht,
    names = c("feet", "inches"),
    delim = "-") %>%
  mutate(
    feet = as.numeric(feet),
    inches = as.numeric(inches),
    ht = feet * 12 + inches
  ) %>%
  select(-feet, -inches)
```

However, these apparent duplicates appear to be different players at different positions:

```{r}
nfl_combine %>% 
  group_by(season, gsis_id, pos) %>% 
  filter(n() > 1, !is.na(gsis_id)) %>% 
  arrange(gsis_id) %>% 
  head()

nfl_combine %>% 
  group_by(season, pfr_id, pos) %>% 
  filter(n() > 1, !is.na(pfr_id)) %>% 
  arrange(pfr_id) %>% 
  head()

nfl_combine %>% 
  group_by(season, cfb_id, pos) %>% 
  filter(n() > 1, !is.na(cfb_id)) %>% 
  arrange(cfb_id) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_combine,
  file = "./data/nfl_combine.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_combine.RData")
```

### Draft Picks {#sec-draftPicks}

A Data Dictionary for draft picks data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_draft_picks.html>

```{r}
#| eval: false

nfl_draftPicks_raw <- progressr::with_progress(
  nflreadr::load_draft_picks(seasons = TRUE))
```

```{r}
#| eval: false

save(
  nfl_draftPicks_raw,
  file = "./data/nfl_draftPicks_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_draftPicks_raw.RData")
```

The `nfl_draftPicks` object is in `player` form.
That is, each row should be uniquely identified by `gsis_id`.
Let's rearrange the data accordingly:

```{r}
nfl_draftPicks <- nfl_draftPicks_raw %>% 
  select(gsis_id, everything()) %>% 
  arrange(pfr_player_name)
```

Let's check for duplicate `player` instances:

```{r}
nfl_draftPicks %>% 
  group_by(gsis_id) %>% 
  filter(n() > 1) %>% 
  head()
```

#### Processing {#sec-processingDraftPicks}

Let's do some data cleanup:

```{r}
# Convert missing values to NA
nfl_draftPicks[nfl_draftPicks == ""] <- NA

# Drop players with missing values for gsis_id
nfl_draftPicks <- nfl_draftPicks %>% 
  filter(!is.na(gsis_id))
```

Let's check again for duplicate `player` instances:

```{r}
nfl_draftPicks %>% 
  group_by(gsis_id) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_draftPicks,
  file = "./data/nfl_draftPicks.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_draftPicks.RData")
```

### Draft Values {#sec-draftValues}

A Data Dictionary for draft values data is located at the following link: <https://github.com/nflverse/nfldata/blob/master/DATASETS.md#draft_values>

```{r}
#| eval: false

nfl_draftValues_raw <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/draft_values.csv")
```

```{r}
#| eval: false

save(
  nfl_draftValues_raw,
  file = "./data/nfl_draftValues_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_draftValues_raw.RData")
```

The `nfl_draftValues` object is in `pick` form.
That is, each row should be uniquely identified by `pick`.
Let's rearrange the data accordingly:

```{r}
nfl_draftValues <- nfl_draftValues_raw %>% 
  select(pick, everything()) %>% 
  arrange(pick)
```

Let's check for duplicate `pick` instances:

```{r}
nfl_draftValues %>% 
  group_by(pick) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_draftValues,
  file = "./data/nfl_draftValues.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_draftValues.RData")
```

### Depth Charts {#sec-depthCharts}

A Data Dictionary for data from weekly depth charts is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_depth_charts.html>

```{r}
#| eval: false

nfl_depthCharts_raw <- progressr::with_progress(
  nflreadr::load_depth_charts(seasons = TRUE))
```

```{r}
#| eval: false

save(
  nfl_depthCharts_raw,
  file = "./data/nfl_depthCharts_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_depthCharts_raw.RData")
```

The `nfl_depthCharts` object is in `player`-`season`-`week`-`position` form.
That is, each row should be uniquely identified by the combination of `gsis_id`, `season`, `week`, and `depth_position`.
Let's rearrange the data accordingly:

```{r}
nfl_depthCharts <- nfl_depthCharts_raw %>% 
  select(gsis_id, season, week, depth_position, everything()) %>% 
  arrange(full_name, gsis_id, season, week, depth_position)
```

Let's check for duplicate `player`-`season`-`week`-`position` instances:

```{r}
nfl_depthCharts %>% 
  group_by(gsis_id, season, week, depth_position) %>% 
  filter(n() > 1) %>% 
  head()
```

#### Processing {#sec-processingDepthCharts}

Let's do some data cleanup:

```{r}
# Drop players with missing values for gsis_id
nfl_depthCharts <- nfl_depthCharts %>% 
  filter(!is.na(gsis_id))

# Fill in missing values for a player in their duplicate instances, and then keep only the first of the duplicate instances
nfl_depthCharts <- nfl_depthCharts %>% 
  group_by(gsis_id, season, week, depth_position) %>% 
  fill(names(.), .direction = "downup") %>% 
  slice_head(n = 1) %>% 
  ungroup()
```

Let's check again for duplicate `player`-`season`-`week`-`position` instances:

```{r}
nfl_depthCharts %>% 
  group_by(gsis_id, season, week, depth_position) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_depthCharts,
  file = "./data/nfl_depthCharts.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_depthCharts.RData")
```

### Trades {#sec-trades}

A Data Dictionary for game schedules data is located at the following link: <https://github.com/nflverse/nfldata/blob/master/DATASETS.md#trades>

```{r}
#| eval: false

nfl_trades_raw <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/trades.csv")
```

```{r}
#| eval: false

save(
  nfl_trades_raw,
  file = "./data/nfl_trades_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_trades_raw.RData")
```

The `nfl_trades` object is in `trade`-`player` form.
That is, each row should be uniquely identified by the combination of `trade_id` and `pfr_id`.

```{r}
nfl_trades <- nfl_trades_raw
```

Let's check for duplicate `trade`-`player` instances:

```{r}
nfl_trades %>%
  filter(!is.na(pfr_id)) %>% 
  group_by(trade_id, pfr_id) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_trades,
  file = "./data/nfl_trades.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_trades.RData")
```

### Play-By-Play Data {#sec-downloadPlayByPlay}

To download play-by-play data from prior weeks and seasons, we can use the `load_pbp()` function of the `nflreadr` package.
We add a progress bar using the `with_progress()` function from the `progressr` package because it takes a while to run.
A Data Dictionary for the play-by-play data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_pbp.html>

::: {#nte-downloadPlayByPlay .callout-note title="Downloading play-by-play data"}
Note: the following code takes a while to run.
:::

```{r}
#| eval: false

nfl_pbp_raw <- progressr::with_progress(
  nflreadr::load_pbp(seasons = TRUE))
```

```{r}
#| include: false

nfl_pbp_raw <- nflreadr::load_pbp(seasons = TRUE)
```

```{r}
save(
  nfl_pbp_raw,
  file = "./data/nfl_pbp_raw.RData"
)
```

```{r}
#| eval: false
#| include: false

load(file = "./data/nfl_pbp_raw.RData")
```

```{r}
#| eval: false
#| include: false

load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_pbp_raw.RData", fsep = ""))
```

The `nfl_pbp` object is in `game`-`drive`-`play` form.
That is, each row should be uniquely identified by the combination of `game_id`, `fixed_drive`, `play_id`.
Let's rearrange the data accordingly:

```{r}
nfl_pbp <- nfl_pbp_raw %>% 
  select(game_id, drive, play_id, everything()) %>% 
  arrange(game_id, drive, play_id)
```

Let's check for duplicate `game`-`drive`-`play` instances:

```{r}
nfl_pbp %>% 
  group_by(game_id, fixed_drive, play_id) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
save(
  nfl_pbp,
  file = "./data/nfl_pbp.RData"
)
```

```{r}
#| include: false

# garbage collection
rm(nfl_pbp_raw)
gc()
```

```{r}
#| eval: false
#| include: false

load(file = "./data/nfl_pbp.RData")
```

```{r}
#| eval: false
#| include: false

load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_pbp.RData", fsep = ""))
```

### 4th Down Data {#sec-download4thDown}

::: {#nte-download4thDownData .callout-note title="Downloading 4th down data"}
Note: the following code takes a while to run.
:::

```{r}
#| output: false

nfl_4thdown_raw <- nfl4th::load_4th_pbp(
  seasons = 2014:nflreadr::most_recent_season())
```

```{r}
save(
  nfl_4thdown_raw,
  file = "./data/nfl_4thdown_raw.RData"
)
```

```{r}
#| eval: false
#| include: false

load(file = "./data/nfl_4thdown_raw.RData")
```

```{r}
#| eval: false
#| include: false

load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_4thdown_raw.RData", fsep = ""))
```

The `nfl_4thdown` object is in `game`-`drive`-`play` form.
That is, each row should be uniquely identified by the combination of `game_id`, `drive`, `play_id`.
Let's rearrange the data accordingly:

```{r}
nfl_4thdown <- nfl_4thdown_raw %>% 
  select(game_id, drive, play_id, everything()) %>% 
  arrange(game_id, drive, play_id)
```

Let's check for duplicate `game`-`drive`-`play` instances:

```{r}
nfl_4thdown %>% 
  group_by(game_id, drive, play_id) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
save(
  nfl_4thdown,
  file = "./data/nfl_4thdown.RData"
)
```

```{r}
#| include: false

# garbage collection
rm(nfl_4thdown_raw)
rm(nfl_4thdown)
gc()
```

```{r}
#| eval: false
#| include: false

load(file = "./data/nfl_4thdown.RData")
```

```{r}
#| eval: false
#| include: false

load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_4thdown.RData", fsep = ""))
```

### Participation {#sec-downloadParticipation}

A Data Dictionary for the participation data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_participation.html>

```{r}
nfl_participation_raw <- progressr::with_progress(
  nflreadr::load_participation(
    seasons = TRUE,
    include_pbp = TRUE))
```

```{r}
save(
  nfl_participation_raw,
  file = "./data/nfl_participation_raw.RData"
)
```

```{r}
#| eval: false
#| include: false

load(file = "./data/nfl_participation_raw.RData")
```

```{r}
#| eval: false
#| include: false

load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_participation_raw.RData", fsep = ""))
```

The `nfl_participation` object is in `game`-`drive`-`play` form.
That is, each row should be uniquely identified by the combination of `nflverse_game_id`, `drive`, `play_id`.
Let's rearrange the data accordingly:

```{r}
nfl_participation <- nfl_participation_raw %>% 
  select(nflverse_game_id, drive, play_id, everything()) %>% 
  arrange(nflverse_game_id, drive, play_id)
```

Let's check for duplicate `game`-`drive`-`play` instances:

```{r}
nfl_participation %>% 
  group_by(nflverse_game_id, drive, play_id) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
save(
  nfl_participation,
  file = "./data/nfl_participation.RData"
)
```

```{r}
#| include: false

# garbage collection
rm(nfl_participation_raw)
rm(nfl_participation)
gc()
```

```{r}
#| eval: false
#| include: false

load(file = "./data/nfl_participation.RData")
```

```{r}
#| eval: false
#| include: false

load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_participation.RData", fsep = ""))
```

### Historical Actual Player Statistics {#sec-downloadActualStats}

#### Career Statistics {#sec-downloadActualCareerStats}

#### Season-by-Season Statistics {#sec-downloadActualSeasonalStats}

#### Week-by-Week Statistics {#sec-downloadActualWeeklyStats}

We can download historical week-by-week actual player statistics using the `load_player_stats()` function from the `nflreadr` package.
A Data Dictionary for statistics for offensive players is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_player_stats.html>.
A Data Dictionary for statistics for defensive players is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_player_stats_def.html>.

```{r}
#| eval: false

nfl_actualStats_offense_weekly_raw <- progressr::with_progress(
  nflreadr::load_player_stats(
    seasons = TRUE,
    stat_type = "offense"))

nfl_actualStats_defense_weekly_raw <- progressr::with_progress(
  nflreadr::load_player_stats(
    seasons = TRUE,
    stat_type = "defense"))

nfl_actualStats_kicking_weekly_raw <- progressr::with_progress(
  nflreadr::load_player_stats(
    seasons = TRUE,
    stat_type = "kicking"))
```

```{r}
#| eval: false

save(
  nfl_actualStats_offense_weekly_raw, nfl_actualStats_defense_weekly_raw, nfl_actualStats_kicking_weekly_raw,
  file = "./data/nfl_actualStats_position_weekly_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualStats_position_weekly_raw.RData")
```

The `nfl_actualStats_weekly` objects are in `player`-`season`-`week` form.
That is, each row should be uniquely identified by the combination of `player_id`, `season`, and `week`.
Let's rearrange the data accordingly:

```{r}
nfl_actualStats_offense_weekly <- nfl_actualStats_offense_weekly_raw %>% 
  rename(team = recent_team) %>% 
  select(player_id, season, week, everything()) %>% 
  arrange(player_display_name, player_id, season, week)

nfl_actualStats_defense_weekly <- nfl_actualStats_defense_weekly_raw %>% 
  select(player_id, season, week, everything()) %>% 
  arrange(player_display_name, player_id, season, week)

nfl_actualStats_kicking_weekly <- nfl_actualStats_kicking_weekly_raw %>% 
  select(player_id, season, week, everything()) %>% 
  arrange(player_display_name, player_id, season, week)
```

Let's check for duplicate `player`-`season`-`week` instances:

```{r}
nfl_actualStats_offense_weekly %>% 
  group_by(player_id, season, week) %>% 
  filter(n() > 1) %>% 
  head()

nfl_actualStats_defense_weekly %>% 
  group_by(player_id, season, week) %>% 
  filter(n() > 1) %>% 
  head()

nfl_actualStats_kicking_weekly %>% 
  group_by(player_id, season, week) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_actualStats_offense_weekly, nfl_actualStats_defense_weekly, nfl_actualStats_kicking_weekly,
  file = "./data/nfl_actualStats_position_weekly.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualStats_position_weekly.RData")
```

### Injuries {#sec-injuries}

A Data Dictionary for injury data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_injuries.html>

```{r}
#| eval: false

nfl_injuries_raw <- progressr::with_progress(
  nflreadr::load_injuries(seasons = TRUE))
```

```{r}
#| eval: false

save(
  nfl_injuries_raw,
  file = "./data/nfl_injuries_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_injuries_raw.RData")
```

The `nfl_injuries` object is in `player`-`season`-`week` form.
That is, each row should be uniquely identified by the combination of `gsis_id`, `season`, and `week`.
Let's rearrange the data accordingly:

```{r}
nfl_injuries <- nfl_injuries_raw %>% 
  select(gsis_id, season, week, everything()) %>% 
  arrange(full_name, gsis_id, season, week)
```

Let's check for duplicate `player`-`season`-`week` instances:

```{r}
nfl_injuries %>% 
  group_by(gsis_id, season, week) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_injuries,
  file = "./data/nfl_injuries.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_injuries.RData")
```

### Snap Counts {#sec-snapCounts}

A Data Dictionary for snap counts data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_snap_counts.html>

```{r}
#| eval: false

nfl_snapCounts_raw <- progressr::with_progress(
  nflreadr::load_snap_counts(seasons = TRUE))
```

```{r}
#| eval: false

save(
  nfl_snapCounts_raw,
  file = "./data/nfl_snapCounts_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_snapCounts_raw.RData")
```

The `nfl_snapCounts` object is in `game`-`player` form.
That is, each row should be uniquely identified by the combination of `game_id` and `pfr_player_id`.
Let's rearrange the data accordingly:

```{r}
nfl_snapCounts <- nfl_snapCounts_raw %>% 
  select(game_id, pfr_player_id, everything()) %>% 
  arrange(game_id, pfr_player_id)
```

Let's check for duplicate `game` instances:

```{r}
nfl_snapCounts %>% 
  group_by(game_id, pfr_player_id) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_snapCounts,
  file = "./data/nfl_snapCounts.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_snapCounts.RData")
```

### ESPN QBR {#sec-espnQBR}

A Data Dictionary for ESPN QBR data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_espn_qbr.html>

```{r}
#| eval: false

nfl_espnQBR_seasonal_raw <- progressr::with_progress(
  nflreadr::load_espn_qbr(
    seasons = TRUE,
    summary_type = c("season")))

nfl_espnQBR_weekly_raw <- progressr::with_progress(
  nflreadr::load_espn_qbr(
    seasons = TRUE,
    summary_type = c("week")))
```

```{r}
#| eval: false

save(
  nfl_espnQBR_seasonal_raw,
  file = "./data/nfl_espnQBR_seasonal_raw.RData"
)

save(
  nfl_espnQBR_weekly_raw,
  file = "./data/nfl_espnQBR_weekly_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_espnQBR_seasonal_raw.RData")
load(file = "./data/nfl_espnQBR_weekly_raw.RData")
```

The `nfl_espnQBR_seasonal` object is in `player`-`season`-`season type` form, where `season type` refers to regular season versus postseason.
That is, each row should be uniquely identified by the combination of `player_id`, `season`, and `season_type`.
Let's rearrange the data accordingly:

```{r}
nfl_espnQBR_seasonal <- nfl_espnQBR_seasonal_raw %>% 
  select(player_id, season, season_type, everything()) %>% 
  arrange(name_display, player_id, season, season_type)
```

Let's check for duplicate `player`-`season`-`team` instances:

```{r}
nfl_espnQBR_seasonal %>% 
  group_by(player_id, season, season_type) %>% 
  filter(n() > 1) %>% 
  head()
```

The `nfl_espnQBR_weekly` object is in both `game`-`player` form and `player`-`season`-`season type`-`week` form, where `season type` refers to regular season versus postseason.
That is, each row should be uniquely identified by the combination of `gsis_id`, `season`, and `week` or by the combination of `player_id`, `season`, `season_type`, and `week_num`.
Let's rearrange the data accordingly:

```{r}
nfl_espnQBR_weekly <- nfl_espnQBR_weekly_raw %>% 
  select(player_id, season, season_type, week_num, everything()) %>% 
  arrange(name_display, player_id, season, season_type, week_num)
```

Let's check for duplicate `game`-`player` or `player`-`season`-`season type`-`week` instances:

```{r}
nfl_espnQBR_weekly %>% 
  arrange(game_id, player_id) %>% 
  group_by(game_id, player_id) %>% 
  filter(n() > 1) %>% 
  head()

nfl_espnQBR_weekly %>% 
  arrange(player_id, season, season_type, week_num) %>% 
  group_by(player_id, season, season_type, week_num) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_espnQBR_seasonal,
  file = "./data/nfl_espnQBR_seasonal.RData"
)

save(
  nfl_espnQBR_weekly,
  file = "./data/nfl_espnQBR_weekly.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_espnQBR_seasonal.RData")
load(file = "./data/nfl_espnQBR_weekly.RData")
```

### NFL Next Gen Stats {#sec-nextGenStats}

A Data Dictionary for NFL Next Gen Stats data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_nextgen_stats.html>

```{r}
#| eval: false

nfl_nextGenStats_pass_weekly_raw <- progressr::with_progress(
  nflreadr::load_nextgen_stats(
    seasons = TRUE,
    stat_type = c("passing")))

nfl_nextGenStats_rush_weekly_raw <- progressr::with_progress(
  nflreadr::load_nextgen_stats(
    seasons = TRUE,
    stat_type = c("rushing")))

nfl_nextGenStats_rec_weekly_raw <- progressr::with_progress(
  nflreadr::load_nextgen_stats(
    seasons = TRUE,
    stat_type = c("receiving")))

nfl_nextGenStats_weekly_raw <- bind_rows(
  nfl_nextGenStats_pass_weekly_raw,
  nfl_nextGenStats_rush_weekly_raw,
  nfl_nextGenStats_rec_weekly_raw
)
```

```{r}
#| eval: false

save(
  nfl_nextGenStats_weekly_raw,
  file = "./data/nfl_nextGenStats_weekly_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_nextGenStats_weekly_raw.RData")
```

The `nfl_nextGenStats_weekly` object is in `player`-`season`-`season type`-`week` form, where `season type` refers to regular season versus postseason.
That is, each row should be uniquely identified by the combination of `player_gsis_id`, `season`, `season_type`, and `week`.
Let's rearrange the data accordingly:

```{r}
nfl_nextGenStats_weekly <- nfl_nextGenStats_weekly_raw %>% 
  select(player_gsis_id, season, season_type, week, everything()) %>% 
  arrange(player_display_name, player_gsis_id, season, season_type)
```

Let's check for duplicate `player`-`season`-`season type`-`week` instances:

```{r}
nfl_nextGenStats_weekly %>% 
  group_by(player_gsis_id, season, season_type, week) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_nextGenStats_weekly,
  file = "./data/nfl_nextGenStats_weekly.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_nextGenStats_weekly.RData")
```

### Advanced Stats from Pro Football Reference {#sec-advancedStatsPFR}

A Data Dictionary for Pro Football Reference passing data is located at the following links:

- <https://nflreadr.nflverse.com/articles/dictionary_pfr_passing.html>
- <https://www.pro-football-reference.com/about/advanced_stats.htm>

Advanced stats from the 2024 season are available at the following link: <https://www.pro-football-reference.com/years/2024/advanced.htm>

```{r}
#| eval: false

# Seasonal Data
nfl_advancedStatsPFR_pass_seasonal_raw <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("pass"),
    summary_level = c("season")))

nfl_advancedStatsPFR_rush_seasonal_raw <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("rush"),
    summary_level = c("season")))

nfl_advancedStatsPFR_rec_seasonal_raw <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("rec"),
    summary_level = c("season")))

nfl_advancedStatsPFR_def_seasonal_raw <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("def"),
    summary_level = c("season")))

# Weekly Data
nfl_advancedStatsPFR_pass_weekly_raw <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("pass"),
    summary_level = c("week")))

nfl_advancedStatsPFR_rush_weekly_raw <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("rush"),
    summary_level = c("week")))

nfl_advancedStatsPFR_rec_weekly_raw <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("rec"),
    summary_level = c("week")))

nfl_advancedStatsPFR_def_weekly_raw <- progressr::with_progress(
  nflreadr::load_pfr_advstats(
    seasons = TRUE,
    stat_type = c("def"),
    summary_level = c("week")))
```

```{r}
#| eval: false

save(
  nfl_advancedStatsPFR_pass_seasonal_raw,
  nfl_advancedStatsPFR_rush_seasonal_raw,
  nfl_advancedStatsPFR_rec_seasonal_raw,
  nfl_advancedStatsPFR_def_seasonal_raw,
  file = "./data/nfl_advancedStatsPFR_seasonal_raw.RData"
)

save(
  nfl_advancedStatsPFR_pass_weekly_raw,
  nfl_advancedStatsPFR_rush_weekly_raw,
  nfl_advancedStatsPFR_rec_weekly_raw,
  nfl_advancedStatsPFR_def_weekly_raw,
  file = "./data/nfl_advancedStatsPFR_weekly_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_advancedStatsPFR_seasonal_raw.RData")
load(file = "./data/nfl_advancedStatsPFR_weekly_raw.RData")
```

#### Processing {#sec-processingAdvancedStatsPFR}

```{r}
# Clean up player name for merging; name variables based on which data object they're from

## Seasonal Data
nfl_advancedStatsPFR_pass_seasonal <- nfl_advancedStatsPFR_pass_seasonal_raw %>% 
  mutate(
    merge_name = nflreadr::clean_player_names(player, lowercase = TRUE)
  ) %>% 
  rename_with(
    ~ paste0(., ".pass"),
    -c(pfr_id, merge_name, season, team))

nfl_advancedStatsPFR_rush_seasonal <- nfl_advancedStatsPFR_rush_seasonal_raw %>% 
  mutate(
    merge_name = nflreadr::clean_player_names(player, lowercase = TRUE)
  ) %>% 
  rename(
    team = tm
  ) %>% 
  rename_with(
    ~ paste0(., ".rush"),
    -c(pfr_id, merge_name, season, team))

nfl_advancedStatsPFR_rec_seasonal <- nfl_advancedStatsPFR_rec_seasonal_raw %>% 
  mutate(
    merge_name = nflreadr::clean_player_names(player, lowercase = TRUE)
  ) %>% 
  rename(
    team = tm
  ) %>% 
  rename_with(
    ~ paste0(., ".rec"),
    -c(pfr_id, merge_name, season, team))

nfl_advancedStatsPFR_def_seasonal <- nfl_advancedStatsPFR_def_seasonal_raw %>% 
  mutate(
    merge_name = nflreadr::clean_player_names(player, lowercase = TRUE)
  )  %>% 
  rename(
    team = tm
  ) %>% 
  rename_with(
    ~ paste0(., ".def"),
    -c(pfr_id, merge_name, season, team))

## Weekly Data
nfl_advancedStatsPFR_pass_weekly <- nfl_advancedStatsPFR_pass_weekly_raw %>% 
  mutate(
    merge_name = nflreadr::clean_player_names(pfr_player_name, lowercase = TRUE)
  ) %>% 
  rename_with(
    ~ paste0(., ".pass"),
    -c(game_id, pfr_player_id))

nfl_advancedStatsPFR_rush_weekly <- nfl_advancedStatsPFR_rush_weekly_raw %>% 
  mutate(
    merge_name = nflreadr::clean_player_names(pfr_player_name, lowercase = TRUE)
  ) %>% 
  rename_with(
    ~ paste0(., ".rush"),
    -c(game_id, pfr_player_id))

nfl_advancedStatsPFR_rec_weekly <- nfl_advancedStatsPFR_rec_weekly_raw %>% 
  mutate(
    merge_name = nflreadr::clean_player_names(pfr_player_name, lowercase = TRUE)
  ) %>% 
  rename_with(
    ~ paste0(., ".rec"),
    -c(game_id, pfr_player_id))

nfl_advancedStatsPFR_def_weekly <- nfl_advancedStatsPFR_def_weekly_raw %>% 
  mutate(
    merge_name = nflreadr::clean_player_names(pfr_player_name, lowercase = TRUE)
  ) %>% 
  rename_with(
    ~ paste0(., ".def"),
    -c(game_id, pfr_player_id))

## Merge across positions
nfl_advancedStatsPFR_seasonal_list <- list(
  nfl_advancedStatsPFR_pass_seasonal,
  nfl_advancedStatsPFR_rush_seasonal,
  nfl_advancedStatsPFR_rec_seasonal,
  nfl_advancedStatsPFR_def_seasonal)

nfl_advancedStatsPFR_weekly_list <- list(
  nfl_advancedStatsPFR_pass_weekly,
  nfl_advancedStatsPFR_rush_weekly,
  nfl_advancedStatsPFR_rec_weekly,
  nfl_advancedStatsPFR_def_weekly)

nfl_advancedStatsPFR_seasonalByTeam <- nfl_advancedStatsPFR_seasonal_list %>% 
  purrr::reduce(
    full_join,
    by = c("pfr_id","merge_name","season","team"))

nfl_advancedStatsPFR_weekly <- nfl_advancedStatsPFR_weekly_list %>% 
  purrr::reduce(
    full_join,
    by = c("game_id","pfr_player_id")) #merge_name

#nfl_advancedStatsPFR_weekly <- nfl_advancedStatsPFR_weekly_list %>% 
#  purrr::reduce(
#    full_join,
#    by = c("pfr_player_id","merge_name","season","week"))

nfl_advancedStatsPFR_seasonalByTeam <- nfl_advancedStatsPFR_seasonalByTeam %>% 
  mutate(
    pfr_player_name = coalesce(
      player.pass,
      player.rush,
      player.rec,
      player.def
    ),
    age = coalesce(
      #age.pass,
      age.rush,
      age.rec,
      age.def
    ),
    pos = coalesce(
      #pos.pass,
      pos.rush,
      pos.rec,
      pos.def
    ),
    g = coalesce(
      #g.pass,
      g.rush,
      g.rec,
      g.def
    ),
    gs = coalesce(
      #gs.pass,
      gs.rush,
      gs.rec,
      gs.def
    )
  ) %>% 
  select(-c(
    starts_with("player."),
    starts_with("age."),
    starts_with("pos."),
    starts_with("g."),
    starts_with("gs.")))

nfl_advancedStatsPFR_weekly <- nfl_advancedStatsPFR_weekly %>% 
  mutate(
    pfr_player_name = coalesce(
      pfr_player_name.pass,
      pfr_player_name.rush,
      pfr_player_name.rec,
      pfr_player_name.def
    ),
    season = coalesce(
      season.pass,
      season.rush,
      season.rec,
      season.def
    ),
    week = coalesce(
      week.pass,
      week.rush,
      week.rec,
      week.def
    ),
    team = coalesce(
      team.pass,
      team.rush,
      team.rec,
      team.def
    ),
    merge_name = coalesce(
      merge_name.pass,
      merge_name.rush,
      merge_name.rec,
      merge_name.def
    ),
    pfr_game_id = coalesce(
      pfr_game_id.pass,
      pfr_game_id.rush,
      pfr_game_id.rec,
      pfr_game_id.def
    ),
    game_type = coalesce(
      game_type.pass,
      game_type.rush,
      game_type.rec,
      game_type.def
    ),
    opponent = coalesce(
      opponent.pass,
      opponent.rush,
      opponent.rec,
      opponent.def
    )
  ) %>% 
  select(-c(
    starts_with("pfr_player_name."),
    starts_with("season."),
    starts_with("week."),
    starts_with("team."),
    starts_with("merge_name."),
    starts_with("pfr_game_id."),
    starts_with("game_type."),
    starts_with("opponent."),
    ))
```

The `nfl_advancedStatsPFR_seasonalByTeam` object is in `player`-`season`-`team` form.
That is, each row should be uniquely identified by the combination of `pfr_id`, `season`, and `team`.
Let's rearrange the data accordingly:

```{r}
nfl_advancedStatsPFR_seasonalByTeam <- nfl_advancedStatsPFR_seasonalByTeam %>% 
  select(pfr_id, season, team, pfr_player_name, everything()) %>% 
  arrange(pfr_player_name, pfr_id, season, team)
```

Let's check for duplicate `player`-`season`-`team` instances:

```{r}
nfl_advancedStatsPFR_seasonalByTeam %>% 
  group_by(pfr_id, season, team) %>% 
  filter(n() > 1) %>% 
  head()
```

Aggregate variables  within each pass/rush/rec/def object by team for seasonal data (so seasonal data are in player-season form, not player-season-team form).
Depending on the variable, aggregation was performed using a sum, weighted mean (weighted by the number of games played for each team), or a recomputed percentage.

```{r}
pfrVars <- nfl_advancedStatsPFR_seasonalByTeam %>% 
  select(pass_attempts.pass:m_tkl_percent.def, g, gs) %>% 
  names()

weightedAverageVars <- c(
  "pocket_time.pass",
  "ybc_att.rush","yac_att.rush",
  "ybc_r.rec","yac_r.rec","adot.rec","rat.rec",
  "yds_cmp.def","yds_tgt.def","dadot.def","m_tkl_percent.def","rat.def"
)

recomputeVars <- c(
  "drop_pct.pass", # drops.pass / pass_attempts.pass
  "bad_throw_pct.pass", # bad_throws.pass / pass_attempts.pass
  "on_tgt_pct.pass", # on_tgt_throws.pass / pass_attempts.pass
  "pressure_pct.pass", # times_pressured.pass / pass_attempts.pass
  "drop_percent.rec", # drop.rec / tgt.rec
  "rec_br.rec", # rec.rec / brk_tkl.rec
  "cmp_percent.def" # cmp.def / tgt.def
)

sumVars <- pfrVars[pfrVars %ni% c(
  weightedAverageVars, recomputeVars,
  "merge_name", "loaded.pass", "loaded.rush", "loaded.rec", "loaded.def")]

nfl_advancedStatsPFR_seasonal <- nfl_advancedStatsPFR_seasonalByTeam %>% 
  group_by(pfr_id, merge_name, season) %>% 
  summarise(
    across(all_of(weightedAverageVars), ~ weighted.mean(.x, w = g, na.rm = TRUE)),
    across(all_of(sumVars), ~ sum(.x, na.rm = TRUE)),
    .groups = "drop") %>% 
  mutate(
    drop_pct.pass = drops.pass / pass_attempts.pass,
    bad_throw_pct.pass = bad_throws.pass / pass_attempts.pass,
    on_tgt_pct.pass = on_tgt_throws.pass / pass_attempts.pass,
    pressure_pct.pass = times_pressured.pass / pass_attempts.pass,
    drop_percent.rec = drop.rec / tgt.rec,
    rec_br.rec = drop.rec / tgt.rec,
    cmp_percent.def = cmp.def / tgt.def
  )

# Merge with other player info
nfl_advancedStatsPFR_seasonalByTeam_1stTeam <- nfl_advancedStatsPFR_seasonalByTeam %>% 
  group_by(pfr_id, season) %>% 
  slice(1)

nfl_advancedStatsPFR_seasonalByTeam_1stTeam_mergeVars <- nfl_advancedStatsPFR_seasonalByTeam_1stTeam %>% 
  select(pfr_id, season, team, pfr_player_name, age, pos) #, g, gs

nfl_advancedStatsPFR_seasonal <- nfl_advancedStatsPFR_seasonal %>% 
  left_join(
    nfl_advancedStatsPFR_seasonalByTeam_1stTeam_mergeVars,
    by = c("pfr_id","season")
  ) %>% 
  select(
    pfr_id, season, pfr_player_name, pos, age, team, g, gs,
    contains(".pass"), contains(".rush"), contains(".rec"), contains(".def"),
    everything())
```

Let's check for duplicate `player`-`season` instances:

```{r}
nfl_advancedStatsPFR_seasonal %>% 
  group_by(pfr_id, season) %>% 
  filter(n() > 1) %>% 
  head()
```

The `nfl_advancedStatsPFR_weekly` object is in both `game`-`player` form and `player`-`season`-`week` form.
That is, each row should be uniquely identified by the combination of `pfr_player_id`, `season`, and `week` or by the combination of `pfr_player_id`, `season`, `game_type`, and `week`.
Let's rearrange the data accordingly:

```{r}
nfl_advancedStatsPFR_weekly <- nfl_advancedStatsPFR_weekly %>% 
  select(pfr_player_id, season, week, game_type, game_id, pfr_player_name, everything()) %>% 
  arrange(pfr_player_name, pfr_player_id, season, week)
```

Let's check for duplicate `game`-`player` or `player`-`season`-`week` instances:

```{r}
nfl_advancedStatsPFR_weekly %>% 
  arrange(game_id, pfr_player_id) %>% 
  group_by(game_id, pfr_player_id) %>% 
  filter(n() > 1) %>% 
  head()

nfl_advancedStatsPFR_weekly %>% 
  arrange(pfr_player_id, season, week) %>% 
  group_by(pfr_player_id, season, week) %>% 
  filter(n() > 1) %>% 
  head()
```

Merge with `gsis_id` for merging with other datasets:

```{r}
# Prepare data for merging
nfl_advancedStatsPFR_weekly <- nfl_advancedStatsPFR_weekly %>% 
  rename(pfr_id = pfr_player_id)

# Identify duplicates
nfl_advancedStatsPFR_seasonal %>% 
  select(pfr_id, season, age) %>% 
  na.omit() %>% 
  unique() %>% 
  group_by(pfr_id, season) %>% 
  filter(n() > 1) %>% 
  arrange(pfr_id, season) %>% 
  head()

# Merge seasonal data with the player IDs
nfl_advancedStatsPFR_seasonal <- left_join(
  nfl_advancedStatsPFR_seasonal,
  nfl_playerIDs %>% 
    filter(!is.na(pfr_id)) %>% 
    filter(gsis_id != "00-0039137") %>% # drop DL Byron Young, keep OLB Byron Young
    select(pfr_id, gsis_id) %>% 
    unique(),
  by = "pfr_id"
)

# Merge weekly data with the player IDs
nfl_advancedStatsPFR_weekly <- left_join(
  nfl_advancedStatsPFR_weekly,
  nfl_playerIDs %>% 
    filter(!is.na(pfr_id)) %>% 
    filter(gsis_id != "00-0039137") %>% # drop DL Byron Young, keep OLB Byron Young
    select(pfr_id, gsis_id) %>% 
    unique(),
  by = "pfr_id"
)

# Remove distinct players who were given the same `pfr_id` (to allow merging)
nfl_advancedStatsPFR_seasonal$gsis_id[which(nfl_advancedStatsPFR_seasonal$gsis_id == "00-0035665" & nfl_advancedStatsPFR_seasonal$pos %in% c("LB","LILB","RILB"))] <- NA # drop LB David Young, keep DB David Young
#nfl_advancedStatsPFR_weekly$gsis_id[which(nfl_advancedStatsPFR_weekly$gsis_id == "00-0035665" & nfl_advancedStatsPFR_weekly$team %in% c("TEN","MIA"))] <- NA # drop LB David Young, keep DB David Young

nfl_advancedStatsPFR_seasonal$gsis_id[which(nfl_advancedStatsPFR_seasonal$gsis_id == "00-0035292" & nfl_advancedStatsPFR_seasonal$pos %in% c("LB","LILB","RILB"))] <- NA # drop LB David Young, keep DB David Young
nfl_advancedStatsPFR_weekly$gsis_id[which(nfl_advancedStatsPFR_weekly$gsis_id == "00-0035292" & nfl_advancedStatsPFR_weekly$team %in% c("TEN","MIA"))] <- NA # drop LB David Young, keep DB David Young

nfl_advancedStatsPFR_seasonal$gsis_id[which(nfl_advancedStatsPFR_seasonal$gsis_id == "00-0033894" & nfl_advancedStatsPFR_seasonal$pos == "DB")] <- NA # drop S Marcus Williams, keep DB David Young
#nfl_advancedStatsPFR_weekly$gsis_id[which(nfl_advancedStatsPFR_weekly$gsis_id == "00-0033894" & nfl_advancedStatsPFR_weekly$pos == "DB")] <- NA # drop S Marcus Williams

nfl_advancedStatsPFR_seasonal$gsis_id[which(nfl_advancedStatsPFR_seasonal$gsis_id == "00-0038407" & nfl_advancedStatsPFR_seasonal$pos == "DB")] <- NA # drop DB Jaylon Jones, keep CB Jaylon Jones
#nfl_advancedStatsPFR_weekly$gsis_id[which(nfl_advancedStatsPFR_weekly$gsis_id == "00-0038407" & nfl_advancedStatsPFR_weekly$pos == "DB")] <- NA # drop DB Jaylon Jones, keep CB Jaylon Jones

nfl_advancedStatsPFR_seasonal$gsis_id[which(nfl_advancedStatsPFR_seasonal$gsis_id == "00-0037106" & nfl_advancedStatsPFR_seasonal$pos == "DB")] <- NA # drop DB Jaylon Jones, keep CB Jaylon Jones
#nfl_advancedStatsPFR_weekly$gsis_id[which(nfl_advancedStatsPFR_weekly$gsis_id == "00-0037106" & nfl_advancedStatsPFR_weekly$pos == "DB")] <- NA # drop DB Jaylon Jones, keep CB Jaylon Jones

nfl_advancedStatsPFR_seasonal$gsis_id[which(nfl_advancedStatsPFR_seasonal$gsis_id == "00-0038549" & nfl_advancedStatsPFR_seasonal$pos == "WR")] <- NA # drop WR DJ TUrner, keep CB DJ Turner
#nfl_advancedStatsPFR_weekly$gsis_id[which(nfl_advancedStatsPFR_weekly$gsis_id == "00-0038549" & nfl_advancedStatsPFR_weekly$pos == "WR")] <- NA # drop WR DJ TUrner, keep CB DJ Turner
```

Now, each row of the `nfl_advancedStatsPFR_seasonal` object should be uniquely identified by the combination of `gsis_id` (or `pfr_id`), and `season`.
Each row of the `nfl_advancedStatsPFR_weekly` object should be uniquely identified by the combination of `gsis_id` (or `pfr_id`), `season`, and `week` or by the combination of `gsis_id` (or `pfr_id`), `season`, `game_type`, and `week`.

Let's check again for duplicate `game`-`player` or `player`-`season`-`week` instances:

```{r}
# Based on gsis_id
nfl_advancedStatsPFR_seasonal %>% 
  select(gsis_id, everything()) %>% 
  filter(!is.na(gsis_id)) %>% 
  group_by(gsis_id, season) %>% 
  filter(n() > 1) %>% 
  head()

nfl_advancedStatsPFR_weekly %>% 
  select(gsis_id, everything()) %>% 
  filter(!is.na(gsis_id)) %>% 
  arrange(game_id, gsis_id) %>% 
  group_by(game_id, gsis_id) %>% 
  filter(n() > 1) %>% 
  head()

nfl_advancedStatsPFR_weekly %>% 
  select(gsis_id, everything()) %>% 
  filter(!is.na(gsis_id)) %>% 
  arrange(gsis_id, season, week) %>% 
  group_by(gsis_id, season, week) %>% 
  filter(n() > 1) %>% 
  head()

# Based on pfr_id
nfl_advancedStatsPFR_seasonal %>% 
  group_by(pfr_id, season) %>% 
  filter(n() > 1) %>% 
  head()

nfl_advancedStatsPFR_weekly %>% 
  arrange(game_id, pfr_id) %>% 
  group_by(game_id, pfr_id) %>% 
  filter(n() > 1) %>% 
  head()

nfl_advancedStatsPFR_weekly %>% 
  arrange(pfr_id, season, week) %>% 
  group_by(pfr_id, season, week) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_advancedStatsPFR_seasonal,
  file = "./data/nfl_advancedStatsPFR_seasonal.RData"
)

save(
  nfl_advancedStatsPFR_weekly,
  file = "./data/nfl_advancedStatsPFR_weekly.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_advancedStatsPFR_seasonal.RData")
load(file = "./data/nfl_advancedStatsPFR_weekly.RData")
```

### Player Contracts {#sec-playerContracts}

A Data Dictionary for player contracts data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_contracts.html>

```{r}
#| eval: false

nfl_playerContracts_raw <- progressr::with_progress(
  nflreadr::load_contracts())
```

```{r}
#| eval: false

save(
  nfl_playerContracts_raw,
  file = "./data/nfl_playerContracts_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_playerContracts_raw.RData")
```

The `nfl_playerContracts` object is in `player`-`year`-`team`-`value` form.
That is, each row should be uniquely identified by the combination of `otc_id`, `year_signed`, `team`, and `value`.
Let's rearrange the data accordingly:

```{r}
nfl_playerContracts <- nfl_playerContracts_raw %>% 
  select(otc_id, year_signed, team, everything()) %>% 
  arrange(player, otc_id, year_signed, team)
```

Let's check for duplicate `player`-`year`-`team`-`value` instances:

```{r}
nfl_playerContracts %>% 
  group_by(otc_id, year_signed, team, value) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_playerContracts,
  file = "./data/nfl_playerContracts.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_playerContracts.RData")
```

### FTN Charting Data {#sec-ftnCharting}

A Data Dictionary for FTN Charting data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_ftn_charting.html>

```{r}
#| eval: false

nfl_ftnCharting_raw <- progressr::with_progress(
  nflreadr::load_ftn_charting(seasons = TRUE))
```

```{r}
#| eval: false

save(
  nfl_ftnCharting_raw,
  file = "./data/nfl_ftnCharting_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_ftnCharting_raw.RData")
```

The `nfl_ftnCharting` object is in `game`-`play` form.
That is, each row should be uniquely identified by the combination of `nflverse_game_id` and `play_id`.
Let's rearrange the data accordingly:

```{r}
nfl_ftnCharting <- nfl_ftnCharting_raw %>% 
  select(nflverse_game_id, nflverse_play_id, everything()) %>% 
  arrange(nflverse_game_id, nflverse_play_id)
```

Let's check for duplicate `game`-`drive`-`play` instances:

```{r}
nfl_ftnCharting %>% 
  group_by(nflverse_game_id, nflverse_play_id) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_ftnCharting,
  file = "./data/nfl_ftnCharting.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_ftnCharting.RData")
```

### FantasyPros Rankings {#sec-fantasyProsRankings}

A Data Dictionary for FantasyPros ranking data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_ff_rankings.html>

```{r}
#| eval: false

#nfl_rankings_raw <- progressr::with_progress( # currently throws error
#  nflreadr::load_ff_rankings(type = "all"))

nfl_rankings_draft_raw <- progressr::with_progress(
  nflreadr::load_ff_rankings(type = "draft"))

nfl_rankings_weekly_raw <- progressr::with_progress(
  nflreadr::load_ff_rankings(type = "week"))
```

```{r}
#| eval: false

save(
  nfl_rankings_draft_raw,
  file = "./data/nfl_rankings_draft_raw.RData"
)

save(
  nfl_rankings_weekly_raw,
  file = "./data/nfl_rankings_weekly_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_rankings_draft_raw.RData")
load(file = "./data/nfl_rankings_weekly_raw.RData")
```

The `nfl_rankings_draft` object is in `player`-`page_type` form.
That is, each row should be uniquely identified by the player's `id`.
Let's rearrange the data accordingly:

```{r}
nfl_rankings_draft <- nfl_rankings_draft_raw %>% 
  select(id, page_type, player, pos, team, everything()) %>% 
  arrange(player, id, pos, page_type)
```

Let's check for duplicate `player`-`page_type` instances:

```{r}
nfl_rankings_draft %>% 
  group_by(id, page_type) %>% 
  filter(n() > 1) %>% 
  head()
```

The `nfl_rankings_weekly` object is in `player`-`page` form.
That is, each row should be uniquely identified by `fantasypros_id` and `page`.
Let's rearrange the data accordingly:

```{r}
nfl_rankings_weekly <- nfl_rankings_weekly_raw %>% 
  select(fantasypros_id, page, player_name, pos, team, everything()) %>% 
  arrange(player_name, fantasypros_id, page, pos)
```

Let's check for duplicate `player`-`page` instances:

```{r}
nfl_rankings_weekly %>% 
  group_by(fantasypros_id, page) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_rankings_draft,
  file = "./data/nfl_rankings_draft.RData"
)

save(
  nfl_rankings_weekly,
  file = "./data/nfl_rankings_weekly.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_rankings_draft.RData")
load(file = "./data/nfl_rankings_weekly.RData")
```

### Expected Fantasy Points {#sec-expectedFantasyPoints}

A Data Dictionary for expected fantasy points data is located at the following link: <https://nflreadr.nflverse.com/articles/dictionary_ff_opportunity.html>

```{r}
#| eval: false

nfl_expectedFantasyPoints_weekly_raw <- progressr::with_progress(
  nflreadr::load_ff_opportunity(
    seasons = TRUE,
    stat_type = "weekly",
    model_version = "latest"
  ))

nfl_expectedFantasyPoints_pass_raw <- progressr::with_progress(
  nflreadr::load_ff_opportunity(
    seasons = TRUE,
    stat_type = "pbp_pass",
    model_version = "latest"
  ))

nfl_expectedFantasyPoints_rush_raw <- progressr::with_progress(
  nflreadr::load_ff_opportunity(
    seasons = TRUE,
    stat_type = "pbp_rush",
    model_version = "latest"
  ))
```

```{r}
nfl_expectedFantasyPoints_weekly_raw <- nflreadr::load_ff_opportunity(
  seasons = TRUE,
  stat_type = "weekly",
  model_version = "latest"
  )

nfl_expectedFantasyPoints_pass_raw <- nflreadr::load_ff_opportunity(
  seasons = TRUE,
  stat_type = "pbp_pass",
  model_version = "latest"
  )

nfl_expectedFantasyPoints_rush_raw <- nflreadr::load_ff_opportunity(
  seasons = TRUE,
  stat_type = "pbp_rush",
  model_version = "latest"
  )
```

```{r}
save(
  nfl_expectedFantasyPoints_weekly_raw,
  file = "./data/nfl_expectedFantasyPoints_weekly_raw.RData"
)

save(
  nfl_expectedFantasyPoints_pass_raw,
  nfl_expectedFantasyPoints_rush_raw,
  file = "./data/nfl_expectedFantasyPoints_pbp_raw.RData"
)
```

```{r}
#| eval: false
#| include: false

load(file = "./data/nfl_expectedFantasyPoints_weekly_raw.RData")
load(file = "./data/nfl_expectedFantasyPoints_pbp_raw.RData")
```

```{r}
#| eval: false
#| include: false

load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_expectedFantasyPoints_weekly_raw.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_expectedFantasyPoints_pbp_raw.RData", fsep = ""))
```

```{r}
nfl_expectedFantasyPoints_pbp_list <- list(
  nfl_expectedFantasyPoints_pass_raw,
  nfl_expectedFantasyPoints_rush_raw)

nfl_expectedFantasyPoints_pbp <- full_join(
  nfl_expectedFantasyPoints_pass_raw,
  nfl_expectedFantasyPoints_rush_raw,
  by = c("game_id","fixed_drive","play_id"),
  suffix = c(".pass", ".rush")
)
```

The `nfl_expectedFantasyPoints_weekly` object is in `game`-`player` form and in `player`-`season`-`week` form.
That is, each row should be uniquely identified by the combination of `game_id` and `player_id`.
Each row should also be uniquely identified by the combination of `player_id`, `season`, and `week`.
Let's rearrange the data accordingly:

```{r}
nfl_expectedFantasyPoints_weekly <- nfl_expectedFantasyPoints_weekly_raw %>% 
  select(player_id, season, week, game_id, full_name, posteam, position, everything()) %>% 
  arrange(full_name, player_id, season, week)
```

Let's check for duplicate `game`-`player` instances and `player`-`season`-`week` instances:

```{r}
nfl_expectedFantasyPoints_weekly %>% 
  group_by(game_id, player_id) %>% 
  filter(n() > 1) %>% 
  head()

nfl_expectedFantasyPoints_weekly %>% 
  group_by(player_id, season, week) %>% 
  filter(n() > 1) %>% 
  head()
```

#### Processing {#sec-processingExpectedFantasyPoints}

Let's do some data cleanup:

```{r}
# Drop players with missing values for player_id
nfl_expectedFantasyPoints_weekly <- nfl_expectedFantasyPoints_weekly %>% 
  filter(!is.na(player_id))
```

Let's check again for duplicate `game`-`player` instances and `season`-`week`-`player` instances:

```{r}
nfl_expectedFantasyPoints_weekly %>% 
  group_by(game_id, player_id) %>% 
  filter(n() > 1) %>% 
  head()

nfl_expectedFantasyPoints_weekly %>% 
  group_by(player_id, season, week) %>% 
  filter(n() > 1) %>% 
  head()
```

The `nfl_expectedFantasyPoints_pbp` object is in `game`-`drive`-`play` form.
That is, each row should be uniquely identified by the combination of `game_id`, `fixed_drive`, and `play_id`.
Let's rearrange the data accordingly:

```{r}
nfl_expectedFantasyPoints_pbp <- nfl_expectedFantasyPoints_pbp %>% 
  select(game_id, fixed_drive, play_id, everything()) %>% 
  arrange(game_id, fixed_drive, play_id)
```

Let's check for duplicate `game`-`player` instances and `season`-`week`-`player` instances:

```{r}
nfl_expectedFantasyPoints_pbp %>% 
  group_by(game_id, fixed_drive, play_id) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
save(
  nfl_expectedFantasyPoints_weekly,
  file = "./data/nfl_expectedFantasyPoints_weekly.RData"
)

save(
  nfl_expectedFantasyPoints_pbp,
  file = "./data/nfl_expectedFantasyPoints_pbp.RData"
)
```

```{r}
#| include: false

# garbage collection
rm(nfl_expectedFantasyPoints_weekly_raw)
rm(nfl_expectedFantasyPoints_pbp_raw)
rm(nfl_expectedFantasyPoints_weekly)
rm(nfl_expectedFantasyPoints_pbp)
gc()
```

```{r}
#| eval: false
#| include: false

load(file = "./data/nfl_expectedFantasyPoints_weekly.RData")
load(file = "./data/nfl_expectedFantasyPoints_pbp.RData")
```

```{r}
#| eval: false
#| include: false

load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_expectedFantasyPoints_weekly.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_expectedFantasyPoints_pbp.RData", fsep = ""))
```

### Fantasy Football Projections {#sec-fantasyFootballProjections}

#### Download Players' Projections {#sec-scrapeProjections}

::: {#nte-downloadProjections .callout-note title="Downloading players' seasonal projections"}
Note: the following code takes a while to run.
:::

```{r}
#| eval: false

# Seasonal Projections
players_projections_seasonal_raw <- ffanalytics::scrape_data(
  season = NULL, # NULL grabs the current season
  week = 0) # 0 grabs seasonal projections

# Weekly Projections
players_projections_weekly_raw <- ffanalytics::scrape_data(
  season = NULL, # NULL grabs the current season
  week = NULL) # NULL grabs the current week
```

```{r}
#| eval: false

save(
  players_projections_seasonal_raw,
  file = "./data/players_projections_seasonal_raw.RData"
)

save(
  players_projections_weekly_raw,
  file = "./data/players_projections_weekly_raw.RData"
)
```

The data file is saved in the project repository and can be loaded using the following command:

```{r}
load(file = "./data/players_projections_seasonal_raw.RData")
load(file = "./data/players_projections_weekly_raw.RData")
```

The `players_projections_seasonal_raw` and `players_projections_weekly_raw` object is in `player`-`position`-`projection source` form.
That is, each row should be uniquely identified by the combination of `id`, `pos`  and `data_src`.
Each row should also be uniquely identified by the combination of `player`, `pos`, and `data_src`.

Let's check for duplicate `player`-`position`-`projection source` instances:

```{r}
players_projections_seasonal_raw %>% 
  bind_rows() %>% 
  select(id, pos, data_src, everything()) %>%
  arrange(player, id, pos, data_src) %>% 
  group_by(id, pos, data_src) %>% 
  filter(n() > 1, !is.na(id)) %>% 
  head()

players_projections_seasonal_raw %>% 
  bind_rows() %>% 
  select(player, pos, data_src, everything()) %>%
  arrange(player, id, pos, data_src) %>% 
  group_by(id, pos, data_src) %>% 
  filter(n() > 1, !is.na(id)) %>% 
  head()

players_projections_weekly_raw %>% 
  bind_rows() %>% 
  select(id, pos, data_src, everything()) %>%
  arrange(player, id, pos, data_src) %>% 
  group_by(id, pos, data_src) %>% 
  filter(n() > 1, !is.na(id)) %>% 
  head()

players_projections_weekly_raw %>% 
  bind_rows() %>% 
  select(player, pos, data_src, everything()) %>%
  arrange(player, id, pos, data_src) %>% 
  group_by(id, pos, data_src) %>% 
  filter(n() > 1, !is.na(id)) %>% 
  head()
```

#### Specify League Scoring Settings {#sec-leagueScoringSettings}

First, create a scoring object using the default scoring object:

```{r}
scoring_obj_default <- ffanalytics::scoring
```

View the default scoring settings:

```{r}
scoring_obj_default
```

Now, modify the scoring settings to match your league settings.
Below, we use the [scoring settings](https://support.nfl.com/hc/en-us/articles/4989179237404-Scoring) for fantasy leagues on NFL.com, which happen to be point-per-reception leagues (i.e., PPR leagues):

```{r}
scoring_obj <- scoring_obj_default

# Offense
scoring_obj$pass$pass_int <- -2
scoring_obj$rec$rec <- 1
scoring_obj$misc$fumbles_lost <- -2

# Kickers
scoring_obj$kick$fg_4049 <- 3

# Defense/Special Teams
scoring_obj$pts_bracket <- list(
  list(threshold = 0, points = 10),
  list(threshold = 6, points = 7),
  list(threshold = 13, points = 4),
  list(threshold = 20, points = 1),
  list(threshold = 27, points = 0),
  list(threshold = 34, points = -1),
  list(threshold = 99, points = -4)
)
```

```{r}
#| eval: false
#| include: false

# My Yahoo League
scoring_obj <- scoring_obj_default

scoring_obj$pass$pass_int <- -3
scoring_obj$misc$fumbles_lost <- -3
scoring_obj$idp$idp_fum_force <- -2
```

View our scoring settings:

```{r}
scoring_obj
```

#### Calculate Projected Points {#sec-calculateProjectedPoints}

Calculate projected points by source:

```{r}
players_projectedPoints_seasonal <- ffanalytics:::impute_and_score_sources(
  data_result = players_projections_seasonal_raw,
  scoring_rules = scoring_obj)

players_projectedPoints_weekly <- ffanalytics:::impute_and_score_sources(
  data_result = players_projections_weekly_raw,
  scoring_rules = scoring_obj)
```

Calculate projected statistics and points, averaged across sources:

```{r}
# Seasonal Projections
players_projectedStatsAverage_seasonal <- ffanalytics::projections_table(
  players_projections_seasonal_raw,
  scoring_rules = scoring_obj,
  return_raw_stats = TRUE)

players_projectedPointsAverage_seasonal <- ffanalytics::projections_table(
  players_projections_seasonal_raw,
  scoring_rules = scoring_obj,
  return_raw_stats = FALSE)

# Weekly Projections
players_projectedStatsAverage_weekly <- ffanalytics::projections_table(
  players_projections_weekly_raw,
  scoring_rules = scoring_obj,
  return_raw_stats = TRUE)

players_projectedPointsAverage_weekly <- ffanalytics::projections_table(
  players_projections_weekly_raw,
  scoring_rules = scoring_obj,
  return_raw_stats = FALSE)
```

The `players_projectedPoints_seasonal`, `players_projectedStatsAverage_seasonal`, `players_projectedPointsAverage_seasonal`, `players_projectedPoints_weekly`, `players_projectedStatsAverage_weekly`, and `players_projectedPointsAverage_weekly` objects are in `player`-`average type`-`position` form.
That is, each row should be uniquely identified by the combination of `id`, `avg_type`  and `pos` (or `position`).

Let's check for duplicate `player`-`position`-`projection source` instances:

```{r}
players_projectedPoints_seasonal %>% 
  bind_rows() %>% 
  select(id, pos, data_src, everything()) %>%
  arrange(player, id, pos, data_src) %>% 
  group_by(id, pos, data_src) %>% 
  filter(n() > 1, !is.na(id)) %>% 
  head()

players_projectedStatsAverage_seasonal %>% 
  group_by(id, avg_type, position) %>% 
  filter(n() > 1) %>% 
  head()

players_projectedPointsAverage_seasonal %>% 
  group_by(id, avg_type, pos) %>% 
  filter(n() > 1) %>% 
  head()

players_projectedPoints_weekly %>% 
  bind_rows() %>% 
  select(id, pos, data_src, everything()) %>%
  arrange(player, id, pos, data_src) %>% 
  group_by(id, pos, data_src) %>% 
  filter(n() > 1, !is.na(id)) %>% 
  head()

players_projectedStatsAverage_weekly %>% 
  group_by(id, avg_type, position) %>% 
  filter(n() > 1) %>% 
  head()

players_projectedPointsAverage_weekly %>% 
  group_by(id, avg_type, pos) %>% 
  filter(n() > 1) %>% 
  head()
```

Let's merge the two averaged projected statistics and points objects:

```{r}
players_projections_seasonal_average <- full_join(
  players_projectedPointsAverage_seasonal,
  players_projectedStatsAverage_seasonal,
  by = c("id","avg_type","pos" = "position")
)

players_projections_weekly_average <- full_join(
  players_projectedPointsAverage_weekly,
  players_projectedStatsAverage_weekly,
  by = c("id","avg_type","pos" = "position")
)
```

Let's again check for duplicate `player`-`position`-`projection source` instances:

```{r}
players_projections_seasonal_average %>% 
  group_by(id, avg_type, pos) %>% 
  filter(n() > 1) %>% 
  head()

players_projections_weekly_average %>% 
  group_by(id, avg_type, pos) %>% 
  filter(n() > 1) %>% 
  head()
```

#### Add Additional Player Information {#sec-addAdditionalInfo}

```{r}
#| eval: false

players_projections_seasonal_average <- players_projections_seasonal_average %>% 
  add_ecr() %>% 
  add_adp() %>% 
  add_aav() %>%
  add_uncertainty() %>% 
  add_player_info()

players_projections_weekly_average <- players_projections_weekly_average %>% 
  add_ecr() %>% 
  #add_uncertainty() %>% # currently throws an error
  add_player_info()
```

```{r}
#| eval: false

save(
  players_projectedPoints_seasonal, players_projections_seasonal_average,
  file = "./data/players_projectedPoints_seasonal.RData"
)

save(
  players_projectedPoints_weekly, players_projections_weekly_average,
  file = "./data/players_projectedPoints_weekly.RData"
)
```

The data file is saved in the project repository and can be loaded using the following command:

```{r}
load(file = "./data/players_projectedPoints_seasonal.RData")
load(file = "./data/players_projectedPoints_weekly.RData")
```

## Calculations {#sec-calculations}

### Historical Actual Player Statistics {#sec-calculateActualStats}

In addition to week-by-week actual player statistics, we can also compute historical actual player statistics as a function of different timeframes, including season-by-season and career statistics.

#### Career Statistics {#sec-calculateActualCareerStats}

First, we can compute the players' career statistics using the `calculate_stats()` function from the `nflfastR` package.

TODO: Insert code example.

##### OLD (DELETE CODE BELOW)

First, we can compute the players' career statistics using the `calculate_player_stats()`, `calculate_player_stats_def()`, and `calculate_player_stats_kicking()` functions from the `nflfastR` package for offensive players, defensive players, and kickers, respectively.

::: {#nte-calculateActualCareerStats .callout-note title="Calculating players' career statistics"}
Note: the following code takes a while to run.
:::

```{r}
#| eval: false

nfl_actualStats_offense_career_raw <- nflfastR::calculate_player_stats(
  nfl_pbp,
  weekly = FALSE)

nfl_actualStats_defense_career_raw <- nflfastR::calculate_player_stats_def(
  nfl_pbp,
  weekly = FALSE)

nfl_actualStats_kicking_career_raw <- nflfastR::calculate_player_stats_kicking(
  nfl_pbp,
  weekly = FALSE)
```

```{r}
#| eval: false

save(
  nfl_actualStats_offense_career_raw, nfl_actualStats_defense_career_raw, nfl_actualStats_kicking_career_raw,
  file = "./data/nfl_actualStats_career_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualStats_career_raw.RData")
```

The `nfl_actualStats_career` objects are in `player` form.
That is, each row should be uniquely identified by the combination of `player_id`.
Let's rearrange the data accordingly:

```{r}
nfl_actualStats_offense_career <- nfl_actualStats_offense_career_raw %>% 
  arrange(player_display_name, player_id)

nfl_actualStats_defense_career <- nfl_actualStats_defense_career_raw %>% 
  arrange(player_display_name, player_id)

nfl_actualStats_kicking_career <- nfl_actualStats_kicking_career_raw %>% 
  arrange(player_display_name, player_id)
```

Let's check for duplicate `player` instances:

```{r}
nfl_actualStats_offense_career %>% 
  group_by(player_id) %>% 
  filter(n() > 1) %>% 
  head()

nfl_actualStats_defense_career %>% 
  group_by(player_id) %>% 
  filter(n() > 1) %>% 
  head()

nfl_actualStats_kicking_career %>% 
  group_by(player_id) %>% 
  filter(n() > 1) %>% 
  head()
```

Let's do some data cleanup:

```{r}
# Sum statistics across a player's years with multiple teams
nfl_actualStats_defense_career <- nfl_actualStats_defense_career %>% 
  group_by(player_id) %>% 
  summarise(
    across(where(is.numeric), ~ sum(.x, na.rm = TRUE)),
    .groups = "drop"
  )

nfl_actualStats_kicking_career <- nfl_actualStats_kicking_career %>% 
  group_by(player_id) %>% 
  summarise(
    across(where(is.numeric), ~ sum(.x, na.rm = TRUE)),
    .groups = "drop"
  )

# Re-calculate percentage stats
nfl_actualStats_kicking_career <- nfl_actualStats_kicking_career %>% 
  mutate(
    fg_pct = fg_made / fg_att,
    pat_pct = pat_made / pat_att
  )

# Merge data back with player info
nfl_actualStats_defense_career_raw_playerInfo <- nfl_actualStats_defense_career_raw %>% 
  select(player_id, player_name, player_display_name, position, position_group, team, headshot_url) %>% 
  unique() %>% 
  group_by(player_id) %>% 
  slice_head(n = 1) %>% 
  ungroup()

nfl_actualStats_kicking_career_raw_playerInfo <- nfl_actualStats_kicking_career_raw %>% 
  select(player_id, player_name, player_display_name, position, position_group, team, headshot_url) %>% 
  unique() %>% 
  group_by(player_id) %>% 
  slice_head(n = 1) %>% 
  ungroup()

nfl_actualStats_defense_career <- nfl_actualStats_defense_career_raw_playerInfo %>% 
  right_join(
    nfl_actualStats_defense_career,
    by = "player_id"
  )

nfl_actualStats_kicking_career <- nfl_actualStats_kicking_career_raw_playerInfo %>% 
  right_join(
    nfl_actualStats_kicking_career,
    by = "player_id"
  )

# Rearrange data
nfl_actualStats_defense_career <- nfl_actualStats_defense_career %>% 
  arrange(player_display_name, player_id)

nfl_actualStats_kicking_career <- nfl_actualStats_kicking_career %>% 
  arrange(player_display_name, player_id)
```

Let's check again for duplicate `player` instances:

```{r}
nfl_actualStats_offense_career %>% 
  group_by(player_id) %>% 
  filter(n() > 1) %>% 
  head()

nfl_actualStats_defense_career %>% 
  group_by(player_id) %>% 
  filter(n() > 1) %>% 
  head()

nfl_actualStats_kicking_career %>% 
  group_by(player_id) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false
#| include: false

save(
  nfl_actualStats_offense_career, nfl_actualStats_defense_career, nfl_actualStats_kicking_career,
  file = "./data/nfl_actualStats_career.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualStats_career.RData")
```

#### Season-by-Season Statistics {#sec-calculateActualSeasonalStats}

Second, we can compute the players' season-by-season statistics.

TODO: Save/update data file in repo with the data generated from this code, and follow the data file through the rest of the book, updating code as necessary.

::: {#nte-downloadSeasonalActualStats .callout-note title="Downloading season-by-season statistics"}
Note: the following code takes a while to run.
:::

```{r}
#| eval: false
nfl_actualStats_seasonal_player_raw <- calculate_stats(
  seasons = TRUE,
  summary_level = "season",
  season_type = "REG")

nfl_actualStats_seasonal_team_raw <- calculate_stats(
  seasons = TRUE,
  summary_level = "season",
  stat_type = "team",
  season_type = "REG")

nfl_actualStats_seasonal_player_inclPost_raw <- calculate_stats(
  seasons = TRUE,
  summary_level = "season",
  season_type = "REG+POST")

nfl_actualStats_seasonal_team_inclPost_raw <- calculate_stats(
  seasons = TRUE,
  summary_level = "season",
  stat_type = "team",
  season_type = "REG+POST")
```

```{r}
#| eval: false

save(
  nfl_actualStats_seasonal_player_raw, nfl_actualStats_seasonal_team_raw,
  nfl_actualStats_seasonal_player_inclPost_raw, nfl_actualStats_seasonal_team_inclPost_raw,
  file = "./data/nfl_actualStats_seasonal_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualStats_seasonal_raw.RData")
```

A Data Dictionary for the variables is available in the `nfl_stats_variables` object that is returned when running the `calculate_stats()` function:

```{r}
nfl_stats_variables
```

The `nfl_actualStats_seasonal_player_raw` object is in `player`-`season` form.
That is, each row should be uniquely identified by the combination of `player_id` and `season`.
The `nfl_actualStats_seasonal_team_raw` object is in `team`-`season` form.
That is, each row should be uniquely identified by the combination of `team` and `season`.
Let's rearrange the data accordingly:

```{r}
nfl_actualStats_seasonal_player <- nfl_actualStats_seasonal_player_raw %>% 
  rename(team = recent_team) %>% 
  select(player_id, season, everything()) %>% 
  arrange(player_display_name, player_id, season)

nfl_actualStats_seasonal_team <- nfl_actualStats_seasonal_team_raw %>% 
  select(season, team, everything()) %>% 
  arrange(season, team)

nfl_actualStats_seasonal_player_inclPost <- nfl_actualStats_seasonal_player_inclPost_raw %>% 
  rename(team = recent_team) %>% 
  select(player_id, season, everything()) %>% 
  arrange(player_display_name, player_id, season)

nfl_actualStats_seasonal_team_inclPost <- nfl_actualStats_seasonal_team_inclPost_raw %>% 
  select(season, team, everything()) %>% 
  arrange(season, team)
```

Let's check for duplicate `player` instances:

```{r}
nfl_actualStats_seasonal_player %>% 
  group_by(player_id, season) %>% 
  filter(n() > 1) %>% 
  head()

nfl_actualStats_seasonal_team %>% 
  group_by(team, season) %>% 
  filter(n() > 1) %>% 
  head()

nfl_actualStats_seasonal_player_inclPost %>% 
  group_by(player_id, season) %>% 
  filter(n() > 1) %>% 
  head()

nfl_actualStats_seasonal_team_inclPost %>% 
  group_by(team, season) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false
#| include: false

save(
  nfl_actualStats_seasonal_player, nfl_actualStats_seasonal_team,
  nfl_actualStats_seasonal_player_inclPost, nfl_actualStats_seasonal_team_inclPost,
  file = "./data/nfl_actualStats_seasonal.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualStats_seasonal.RData")
```

##### OLD (DELETE CODE BELOW)

```{r}
seasons <- unique(nfl_pbp$season)

nfl_pbp_seasonalList <- list()
nfl_actualStats_offense_seasonalList <- list()
nfl_actualStats_defense_seasonalList <- list()
nfl_actualStats_kicking_seasonalList <- list()
```

::: {#nte-calculateActualSeasonalStats .callout-note title="Calculating players' season-by-season statistics"}
Note: the following code takes a while to run.
:::

```{r}
#| eval: false

pb <- txtProgressBar(
  min = 0,
  max = length(seasons),
  style = 3)

for(i in 1:length(seasons)){
  # Subset play-by-play data by season
  nfl_pbp_seasonalList[[i]] <- nfl_pbp %>% 
    dplyr::filter(season == seasons[i])
  
  # Compute actual statistics by season
  nfl_actualStats_offense_seasonalList[[i]] <- 
    nflfastR::calculate_player_stats(
      nfl_pbp_seasonalList[[i]],
      weekly = FALSE)
  
  nfl_actualStats_defense_seasonalList[[i]] <- 
    nflfastR::calculate_player_stats_def(
      nfl_pbp_seasonalList[[i]],
      weekly = FALSE)
  
  nfl_actualStats_kicking_seasonalList[[i]] <- 
    nflfastR::calculate_player_stats_kicking(
      nfl_pbp_seasonalList[[i]],
      weekly = FALSE)
  
  nfl_actualStats_offense_seasonalList[[i]]$season <- seasons[i]
  nfl_actualStats_defense_seasonalList[[i]]$season <- seasons[i]
  nfl_actualStats_kicking_seasonalList[[i]]$season <- seasons[i]
  
  print(
    paste("Completed computing projections for season: ", seasons[i], sep = ""))
  
  # Update the progress bar
  setTxtProgressBar(pb, i)
}

# Close the progress bar
close(pb)

nfl_actualStats_offense_seasonal_raw <- nfl_actualStats_offense_seasonalList %>% 
  dplyr::bind_rows()
nfl_actualStats_defense_seasonal_raw <- nfl_actualStats_defense_seasonalList %>% 
  dplyr::bind_rows()
nfl_actualStats_kicking_seasonal_raw <- nfl_actualStats_kicking_seasonalList %>% 
  dplyr::bind_rows()
```

```{r}
#| eval: false

save(
  nfl_actualStats_offense_seasonal_raw, nfl_actualStats_defense_seasonal_raw, nfl_actualStats_kicking_seasonal_raw,
  file = "./data/nfl_actualStats_seasonal_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualStats_seasonal_raw.RData")
```

The `nfl_actualStats_seasonal` objects are in `player`-`season` form.
That is, each row should be uniquely identified by the combination of `player_id` and `season`.
Let's rearrange the data accordingly:

```{r}
nfl_actualStats_offense_seasonal <- nfl_actualStats_offense_seasonal_raw %>% 
  rename(team = recent_team) %>% 
  select(player_id, season, everything()) %>% 
  arrange(player_display_name, player_id, season)

nfl_actualStats_defense_seasonal <- nfl_actualStats_defense_seasonal_raw %>% 
  select(player_id, season, everything()) %>% 
  arrange(player_display_name, player_id, season)

nfl_actualStats_kicking_seasonal <- nfl_actualStats_kicking_seasonal_raw %>% 
  select(player_id, season, everything()) %>% 
  arrange(player_display_name, player_id, season)
```

Let's check for duplicate `player` instances:

```{r}
nfl_actualStats_offense_seasonal %>% 
  group_by(player_id, season) %>% 
  filter(n() > 1) %>% 
  head()

nfl_actualStats_defense_seasonal %>% 
  group_by(player_id, season) %>% 
  filter(n() > 1) %>% 
  head()

nfl_actualStats_kicking_seasonal %>% 
  group_by(player_id, season) %>% 
  filter(n() > 1) %>% 
  head()
```

Let's do some data cleanup:

```{r}
# Sum statistics across a player's years with multiple teams
nfl_actualStats_defense_seasonal <- nfl_actualStats_defense_seasonal %>% 
  group_by(player_id, season) %>% 
  summarise(
    across(where(is.numeric), ~ sum(.x, na.rm = TRUE)),
    .groups = "drop"
  )

nfl_actualStats_kicking_seasonal <- nfl_actualStats_kicking_seasonal %>% 
  group_by(player_id, season) %>% 
  summarise(
    across(where(is.numeric), ~ sum(.x, na.rm = TRUE)),
    .groups = "drop"
  )

# Re-calculate percentage stats
nfl_actualStats_kicking_seasonal <- nfl_actualStats_kicking_seasonal %>% 
  mutate(
    fg_pct = fg_made / fg_att,
    pat_pct = pat_made / pat_att
  )

# Merge data back with player info
nfl_actualStats_defense_seasonal_raw_playerInfo <- nfl_actualStats_defense_seasonal_raw %>% 
  select(player_id, season, player_name, player_display_name, position, position_group, team, headshot_url) %>% 
  unique() %>% 
  group_by(player_id) %>% 
  slice_head(n = 1) %>% 
  ungroup()

nfl_actualStats_kicking_seasonal_raw_playerInfo <- nfl_actualStats_kicking_seasonal_raw %>% 
  select(player_id, season, player_name, player_display_name, position, position_group, team, headshot_url) %>% 
  unique() %>% 
  group_by(player_id) %>% 
  slice_head(n = 1) %>% 
  ungroup()

nfl_actualStats_defense_seasonal <- nfl_actualStats_defense_seasonal_raw_playerInfo %>% 
  right_join(
    nfl_actualStats_defense_seasonal,
    by = c("player_id","season")
  )

nfl_actualStats_kicking_seasonal <- nfl_actualStats_kicking_seasonal_raw_playerInfo %>% 
  right_join(
    nfl_actualStats_kicking_seasonal,
    by = c("player_id","season")
  )

# Rearrange data
nfl_actualStats_defense_seasonal <- nfl_actualStats_defense_seasonal %>% 
  select(player_id, season, everything()) %>% 
  arrange(player_display_name, player_id, season)

nfl_actualStats_kicking_seasonal <- nfl_actualStats_kicking_seasonal %>% 
  select(player_id, season, everything()) %>% 
  arrange(player_display_name, player_id, season)
```

Let's check again for duplicate `player` instances:

```{r}
nfl_actualStats_offense_seasonal %>% 
  group_by(player_id, season) %>% 
  filter(n() > 1) %>% 
  head()

nfl_actualStats_defense_seasonal %>% 
  group_by(player_id, season) %>% 
  filter(n() > 1) %>% 
  head()

nfl_actualStats_kicking_seasonal %>% 
  group_by(player_id, season) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false
#| include: false

save(
  nfl_actualStats_offense_seasonal, nfl_actualStats_defense_seasonal, nfl_actualStats_kicking_seasonal,
  file = "./data/nfl_actualStats_seasonal.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualStats_seasonal.RData")
```

#### Week-by-Week Statistics {#sec-calculateActualWeeklyStats}

We already load players' week-by-week statistics [above](#sec-downloadActualStats).
Nevertheless, we could compute players' weekly statistics from the play-by-play data using the following syntax:

TODO:

- Decide whether to use `calculate_stats()` from `nflfastR` or `load_player_stats()` from `nflreadr`.
- Save/update data file in repo with the data generated from the relevant code, and follow the data file through the rest of the book, updating code as necessary.

::: {#nte-downloadWeeklyActualStats .callout-note title="Downloading week-by-week statistics"}
Note: the following code takes a while to run.
:::

```{r}
#| eval: false
nfl_actualStats_weekly_player_raw <- calculate_stats(
  seasons = TRUE,
  summary_level = "week")

nfl_actualStats_weekly_team_raw <- calculate_stats(
  seasons = TRUE,
  summary_level = "week",
  stat_type = "team")
```

```{r}
#| include: false

# garbage collection
rm(nfl_pbp)
gc()
```

```{r}
#| eval: false

save(
  nfl_actualStats_weekly_player_raw, nfl_actualStats_weekly_team_raw,
  file = "./data/nfl_actualStats_weekly_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualStats_weekly_raw.RData")
```

The `nfl_actualStats_weekly` objects are in `player`-`season`-`week` form.
That is, each row should be uniquely identified by the combination of `player_id`, `season`, and `week`.
Let's rearrange the data accordingly:

```{r}
nfl_actualStats_weekly_player <- nfl_actualStats_weekly_player_raw %>% 
  select(player_id, season, week, everything()) %>% 
  arrange(player_display_name, player_id, season, week)

nfl_actualStats_weekly_team <- nfl_actualStats_weekly_team_raw %>% 
  select(season, week, team, everything()) %>% 
  arrange(season, week, team)
```

Let's check for duplicate `player`-`season`-`week` instances:

```{r}
nfl_actualStats_weekly_player %>% 
  group_by(player_id, season, week) %>% 
  filter(n() > 1) %>% 
  head()

nfl_actualStats_weekly_team %>% 
  group_by(team, season, week) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_actualStats_weekly_player, nfl_actualStats_weekly_team,
  file = "./data/nfl_actualStats_weekly.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualStats_weekly.RData")
```

##### OLD (DELETE CODE BELOW)

```{r}
#| eval: false

nfl_actualStats_offense_weekly <- nflfastR::calculate_player_stats(
  nfl_pbp,
  weekly = TRUE)

nfl_actualStats_defense_weekly <- nflfastR::calculate_player_stats_def(
  nfl_pbp,
  weekly = TRUE)

nfl_actualStats_kicking_weekly <- nflfastR::calculate_player_stats_kicking(
  nfl_pbp,
  weekly = TRUE)
```

```{r}
#| include: false

# garbage collection
rm(nfl_pbp)
gc()
```

### Historical Actual Fantasy Points {#sec-calculateActualPoints}

Specify scoring settings:

#### Week-by-Week {#sec-calculateActualPointsWeekly}

```{r}
nfl_actualFantasyPoints_player_weekly_seasonalList <- list()
nfl_actualFantasyPoints_dst_weekly_seasonalList <- list()
```

::: {#nte-calculateActualFantasyPointsWeekly .callout-note title="Calculating players' week-by-week fantasy points"}
Note: the following code takes a while to run.
:::

```{r}
#| eval: false

#nfl_actualFantasyPoints_weekly_raw <- ffanalytics:::actual_points_scoring(
#  season = 2023,
#  summary_level = c("week"),
#  stat_type = c("player", "dst", "team"),
#  season_type = c("REG", "POST", "REG+POST"),
#  scoring_rules = scoring_obj,
#  vor_baseline = NULL,
#  rename_colums = FALSE
#)

pb <- txtProgressBar(
  min = 0,
  max = length(seasons),
  style = 3)

for(i in 1:length(seasons)){
  # Compute actual statistics by season
  nfl_actualFantasyPoints_player_weekly_seasonalList[[i]] <- 
    ffanalytics:::actual_points_scoring(
      season = seasons[i],
      summary_level = c("week"),
      stat_type = c("player"),
      #season_type = c("REG"),
      scoring_rules = scoring_obj,
      vor_baseline = NULL,
      rename_colums = FALSE)
  
  nfl_actualFantasyPoints_dst_weekly_seasonalList[[i]] <- 
    ffanalytics:::actual_points_scoring(
      season = seasons[i],
      summary_level = c("week"),
      stat_type = c("dst"),
      #season_type = c("REG"),
      scoring_rules = scoring_obj,
      vor_baseline = NULL,
      rename_colums = FALSE)
  
  nfl_actualFantasyPoints_player_weekly_seasonalList[[i]]$season <- seasons[i]
  nfl_actualFantasyPoints_dst_weekly_seasonalList[[i]]$season <- seasons[i]
  
  print(
    paste("Completed computing actual fantasy points for season: ", seasons[i], sep = ""))
  
  # Update the progress bar
  setTxtProgressBar(pb, i)
}

# Close the progress bar
close(pb)

nfl_actualFantasyPoints_player_weekly_raw <- nfl_actualFantasyPoints_player_weekly_seasonalList %>% 
  dplyr::bind_rows()

nfl_actualFantasyPoints_dst_weekly_raw <- nfl_actualFantasyPoints_dst_weekly_seasonalList %>% 
  dplyr::bind_rows()
```

```{r}
#| eval: false

save(
  nfl_actualFantasyPoints_player_weekly_raw, nfl_actualFantasyPoints_dst_weekly_raw,
  file = "./data/nfl_actualFantasyPoints_weekly_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualFantasyPoints_weekly_raw.RData")
```

The `nfl_actualFantasyPoints_weekly` objects are in `player`-`season`-`week` (or `team`-`season`-`week`) form.
That is, each row should be uniquely identified by the combination of `player_id`, `season`, and `week` (or `team`-`season`-`week`).
Let's rearrange the data accordingly:

```{r}
nfl_actualFantasyPoints_player_weekly <- nfl_actualFantasyPoints_player_weekly_raw %>% 
  rename(
    fantasyPoints = raw_points,
    team = recent_team) %>% 
  select(player_id, season, week, everything()) %>% 
  arrange(player_display_name, player_id, season, week)

nfl_actualFantasyPoints_dst_weekly <- nfl_actualFantasyPoints_dst_weekly_raw %>% 
  rename(
    fantasyPoints = raw_points,
    team = recent_team) %>% 
  select(season, week, team, everything()) %>% 
  arrange(season, week, team)
```

Let's check for duplicate `player`-`season`-`week` instances:

```{r}
nfl_actualFantasyPoints_player_weekly %>% 
  group_by(player_id, season, week) %>% 
  filter(n() > 1) %>% 
  head()

nfl_actualFantasyPoints_dst_weekly %>% 
  group_by(team, season, week) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_actualFantasyPoints_player_weekly, nfl_actualFantasyPoints_dst_weekly,
  file = "./data/nfl_actualFantasyPoints_weekly.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualFantasyPoints_weekly.RData")
```

##### OLD (DELETE CODE BELOW)

```{r}
#| eval: false

nfl_actualStats_offense_weekly
nfl_actualStats_defense_weekly
nfl_actualStats_kicking_weekly

test_weekly_offense <- ffanalytics:::actual_points_scoring(
  nflr_player_stats_df = nfl_actualStats_offense_weekly %>% filter(season == 2023),
  nflr_pbp_data = nfl_pbp %>% filter(season == 2023),
  scoring_rules = scoring_obj,
  vor_baseline = NULL,
  rename_colums = TRUE)

test_weekly_defense <- ffanalytics:::actual_points_scoring(
  nflr_player_stats_df = nfl_actualStats_defense_weekly %>% filter(season == 2023),
  nflr_pbp_data = nfl_pbp %>% filter(season == 2023),
  scoring_rules = scoring_obj,
  vor_baseline = NULL,
  rename_colums = TRUE)

test_weekly_kicking <- ffanalytics:::actual_points_scoring(
  nflr_player_stats_df = nfl_actualStats_kicking_weekly %>% filter(season == 2023),
  nflr_pbp_data = nfl_pbp %>% filter(season == 2023),
  scoring_rules = scoring_obj,
  vor_baseline = NULL,
  rename_colums = TRUE)
```

#### Season-by-Season {#sec-calculateActualPointsSeasonal}

```{r}
nfl_actualFantasyPoints_player_seasonal_seasonalList <- list()
nfl_actualFantasyPoints_dst_seasonal_seasonalList <- list()
```

::: {#nte-calculateActualFantasyPointsSeasonal .callout-note title="Calculating players' season-by-season fantasy points"}
Note: the following code takes a while to run.
:::

```{r}
#| eval: false

#nfl_actualFantasyPoints_seasonal_raw <- ffanalytics:::actual_points_scoring(
#  season = 2023,
#  summary_level = c("season"),
#  stat_type = c("player", "dst", "team"),
#  season_type = c("REG"),
#  scoring_rules = scoring_obj,
#  vor_baseline = NULL,
#  rename_colums = TRUE
#)

pb <- txtProgressBar(
  min = 0,
  max = length(seasons),
  style = 3)

for(i in 1:length(seasons)){
  # Compute actual statistics by season
  nfl_actualFantasyPoints_player_seasonal_seasonalList[[i]] <- 
    ffanalytics:::actual_points_scoring(
      season = seasons[i],
      summary_level = c("season"),
      stat_type = c("player"),
      season_type = c("REG"),
      scoring_rules = scoring_obj,
      vor_baseline = NULL,
      rename_colums = FALSE)
  
  nfl_actualFantasyPoints_dst_seasonal_seasonalList[[i]] <- 
    ffanalytics:::actual_points_scoring(
      season = seasons[i],
      summary_level = c("season"),
      stat_type = c("dst"),
      season_type = c("REG"),
      scoring_rules = scoring_obj,
      vor_baseline = NULL,
      rename_colums = FALSE)
  
  nfl_actualFantasyPoints_player_seasonal_seasonalList[[i]]$season <- seasons[i]
  nfl_actualFantasyPoints_dst_seasonal_seasonalList[[i]]$season <- seasons[i]
  
  print(
    paste("Completed computing actual fantasy points for season: ", seasons[i], sep = ""))
  
  # Update the progress bar
  setTxtProgressBar(pb, i)
}

# Close the progress bar
close(pb)

nfl_actualFantasyPoints_player_seasonal_raw <- nfl_actualFantasyPoints_player_seasonal_seasonalList %>% 
  dplyr::bind_rows()

nfl_actualFantasyPoints_dst_seasonal_raw <- nfl_actualFantasyPoints_dst_seasonal_seasonalList %>% 
  dplyr::bind_rows()
```

```{r}
#| eval: false

save(
  nfl_actualFantasyPoints_player_seasonal_raw, nfl_actualFantasyPoints_dst_seasonal_raw,
  file = "./data/nfl_actualFantasyPoints_seasonal_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualFantasyPoints_seasonal_raw.RData")
```

The `nfl_actualFantasyPoints_seasonal` objects are in `player`-`season` (or `team`-`season`) form.
That is, each row should be uniquely identified by the combination of `player_id` and `season` (or `team`-`season`).
Let's rearrange the data accordingly:

```{r}
nfl_actualFantasyPoints_player_seasonal <- nfl_actualFantasyPoints_player_seasonal_raw %>% 
  rename(
    fantasyPoints = raw_points,
    team = recent_team) %>% 
  select(player_id, season, everything()) %>% 
  arrange(player_display_name, player_id, season)

nfl_actualFantasyPoints_dst_seasonal <- nfl_actualFantasyPoints_dst_seasonal_raw %>% 
  rename(
    fantasyPoints = raw_points,
    team = recent_team) %>% 
  select(season, team, everything()) %>% 
  arrange(season, team)
```

Let's check for duplicate `player`-`season`-`week` instances:

```{r}
nfl_actualFantasyPoints_player_seasonal %>% 
  group_by(player_id, season) %>% 
  filter(n() > 1) %>% 
  head()

nfl_actualFantasyPoints_dst_seasonal %>% 
  group_by(team, season) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
#| eval: false

save(
  nfl_actualFantasyPoints_player_seasonal, nfl_actualFantasyPoints_dst_seasonal,
  file = "./data/nfl_actualFantasyPoints_seasonal.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualFantasyPoints_seasonal.RData")
```

#### Career {#sec-calculateActualPointsCareer}

```{r}
nfl_actualFantasyPoints_player_career_raw <- nfl_actualFantasyPoints_player_seasonal %>% 
  group_by(player_id) %>% 
  summarise(fantasyPoints = sum(fantasyPoints, na.rm = TRUE))

nfl_actualFantasyPoints_player_career_raw <- full_join(
  nfl_actualFantasyPoints_player_career_raw,
  nfl_players %>% select(gsis_id, display_name, first_name, last_name, position_group, position),
  by = c("player_id" = "gsis_id")
)
```

```{r}
#| eval: false

save(
  nfl_actualFantasyPoints_player_career,
  file = "./data/nfl_actualFantasyPoints_career_raw.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualFantasyPoints_career_raw.RData")
```

```{r}
nfl_actualFantasyPoints_player_career <- nfl_actualFantasyPoints_player_career_raw %>% 
  select(player_id, display_name, first_name, last_name, position_group, position, fantasyPoints)
```

```{r}
#| eval: false

save(
  nfl_actualFantasyPoints_player_career,
  file = "./data/nfl_actualFantasyPoints_career.RData"
)
```

```{r}
#| include: false

load(file = "./data/nfl_actualFantasyPoints_career.RData")
```

### Player Age and Experience {#sec-calculatePlayerAge}

#### Weekly {#sec-calculatePlayerAgeWeekly}

```{r}
# Reshape from wide to long format
nfl_actualFantasyPoints_player_weekly_long <- nfl_actualFantasyPoints_player_weekly %>% 
  tidyr::pivot_longer(
    cols = c(team, opponent_team),
    names_to = "role",
    values_to = "team")

# Perform separate inner join operations for the home_team and away_team
nfl_actualFantasyPoints_player_weekly_home <- dplyr::inner_join(
  nfl_actualFantasyPoints_player_weekly_long,
  nfl_schedules,
  by = c("season","week","team" = "home_team")) %>% 
  mutate(home_away = "home_team")

nfl_actualFantasyPoints_player_weekly_away <- dplyr::inner_join(
  nfl_actualFantasyPoints_player_weekly_long,
  nfl_schedules,
  by = c("season","week","team" = "away_team")) %>% 
  mutate(home_away = "away_team")

# Combine the results of the join operations
nfl_actualFantasyPoints_player_weekly_schedules_long <- dplyr::bind_rows(
  nfl_actualFantasyPoints_player_weekly_home,
  nfl_actualFantasyPoints_player_weekly_away)

# Reshape from long to wide
player_game_gameday <- nfl_actualFantasyPoints_player_weekly_schedules_long %>%
  dplyr::distinct(player_id, season, week, game_id, home_away, team, gameday) %>% #, .keep_all = TRUE
  tidyr::pivot_wider(
    names_from = home_away,
    values_from = team)

# Merge player birthdate and the game date
player_game_birthdate_gameday <- dplyr::left_join(
  player_game_gameday,
  unique(nfl_players[,c("gsis_id","birth_date")]),
  by = c("player_id" = "gsis_id")
)

player_game_birthdate_gameday$birth_date <- lubridate::ymd(player_game_birthdate_gameday$birth_date)
player_game_birthdate_gameday$gameday <- lubridate::ymd(player_game_birthdate_gameday$gameday)

# Calculate player's age for a given week as the difference between their birthdate and the game date
player_game_birthdate_gameday$age <- lubridate::interval(
  start = player_game_birthdate_gameday$birth_date,
  end = player_game_birthdate_gameday$gameday
) %>% 
  lubridate::time_length(unit = "years")

# Merge with Pro Football Reference Data on Player Age by Season
player_game_birthdate_gameday <- player_game_birthdate_gameday %>% 
  dplyr::left_join(
    nfl_advancedStatsPFR_seasonal %>% filter(!is.na(gsis_id), !is.na(season), !is.na(age)) %>% select(gsis_id, season, age) %>% unique(),
    by = c("player_id" = "gsis_id", "season")
  )

# Set age as first non-missing value from calculation above or from PFR
player_game_birthdate_gameday <- player_game_birthdate_gameday %>% 
  mutate(age = coalesce(age.x, age.y)) %>% 
  select(-age.x, -age.y)

# Calculate ageCentered and ageCenteredQuadratic
player_game_birthdate_gameday$ageCentered20 <- player_game_birthdate_gameday$age - 20
player_game_birthdate_gameday$ageCentered20Quadratic <- player_game_birthdate_gameday$ageCentered20 ^ 2

# Merge with player info
player_age <- dplyr::left_join(
  player_game_birthdate_gameday,
  nfl_players %>% select(-birth_date, -team_abbr, - team_seq),
  by = c("player_id" = "gsis_id"))

# Add game_id to weekly stats to facilitate merging
nfl_actualFantasyPoints_player_weekly <- nfl_actualFantasyPoints_player_weekly %>% 
  dplyr::left_join(
    player_age[,c("season","week","player_id","game_id")],
    by = c("season","week","player_id"))

# Merge with player weekly stats
player_stats_weekly <- dplyr::full_join(
  player_age %>% select(-position, -position_group),
  nfl_actualFantasyPoints_player_weekly,
  by = c("season","week","player_id","game_id"))

player_stats_weekly$total_years_of_experience <- as.integer(player_stats_weekly$years_of_experience)

player_stats_weekly$years_of_experience <- NULL

distinct_seasons <- player_stats_weekly %>%
  dplyr::select(player_id, season) %>%
  dplyr::distinct() %>% 
  dplyr::left_join(
    nfl_players[,c("gsis_id","years_of_experience")],
    by = c("player_id" = "gsis_id")
  ) %>% 
  dplyr::mutate(total_years_of_experience = as.integer(years_of_experience)) %>% 
  dplyr::select(-years_of_experience)

years_of_experience <- distinct_seasons %>% 
  dplyr::arrange(player_id, -season) %>% 
  dplyr::group_by(player_id) %>%
  dplyr::mutate(years_of_experience = first(total_years_of_experience) - (row_number() - 1)) %>%
  dplyr::ungroup()

years_of_experience$years_of_experience[which(years_of_experience$years_of_experience < 0)] <- 0

player_stats_weekly <- player_stats_weekly %>% 
  dplyr::left_join(
    years_of_experience[,c("player_id","season","years_of_experience")],
    by = c("player_id","season")
  )
```

The `player_stats_weekly` objects are in `player`-`season`-`week` form.
That is, each row should be uniquely identified by the combination of `player_id`, `season`, and `week`.
Let's rearrange the data accordingly:

```{r}
player_stats_weekly <- player_stats_weekly %>% 
  arrange(player_display_name, player_id, season, week)
```

Let's check for duplicate `player`-`season`-`week` instances:

```{r}
player_stats_weekly %>% 
  group_by(player_id, season, week) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
# Save data
save(
  player_stats_weekly,
  file = "./data/player_stats_weekly.RData"
)
```

#### Seasonal {#sec-calculatePlayerAgeSeasonal}

```{r}
# Merge player info with seasonal stats
player_stats_seasonal <- dplyr::full_join(
  nfl_actualFantasyPoints_player_seasonal,
  nfl_players %>% select(-position, -position_group, -team_abbr, - team_seq),
  by = c("player_id" = "gsis_id")
)

# Calculate age
season_startdate <- nfl_schedules %>% 
  dplyr::group_by(season) %>% 
  dplyr::summarise(startdate = min(gameday, na.rm = TRUE))

player_stats_seasonal <- player_stats_seasonal %>% 
  dplyr::left_join(
    season_startdate,
    by = "season"
  )

player_stats_seasonal$age <- lubridate::interval(
  start = player_stats_seasonal$birth_date,
  end = player_stats_seasonal$startdate
) %>% 
  lubridate::time_length(unit = "years")

# Merge with Pro Football Reference Data on Player Age by Season
player_stats_seasonal <- player_stats_seasonal %>% 
  dplyr::left_join(
    nfl_advancedStatsPFR_seasonal %>% filter(!is.na(gsis_id), !is.na(season), !is.na(age)) %>% select(gsis_id, season, age) %>% unique(),
    by = c("player_id" = "gsis_id", "season")
  )

# Set age as first non-missing value from calculation above or from PFR
player_stats_seasonal <- player_stats_seasonal %>% 
  mutate(age = coalesce(age.x, age.y)) %>% 
  select(-age.x, -age.y)

# Calculate ageCentered and ageCenteredQuadratic
player_stats_seasonal$ageCentered20 <- player_stats_seasonal$age - 20
player_stats_seasonal$ageCentered20Quadratic <- player_stats_seasonal$ageCentered20 ^ 2

# Years of experience
player_stats_seasonal$years_of_experience <- NULL

player_stats_seasonal <- player_stats_seasonal %>% 
  dplyr::left_join(
    years_of_experience[,c("player_id","season","years_of_experience")],
    by = c("player_id","season")
  )
```

The `player_stats_seasonal` objects are in `player`-`season` form.
That is, each row should be uniquely identified by the combination of `player_id` and `season`.
Let's rearrange the data accordingly:

```{r}
player_stats_seasonal <- player_stats_seasonal %>% 
  select(player_id, season, everything()) %>% 
  arrange(player_display_name, player_id, season)
```

Let's check for duplicate `player`-`season` instances:

```{r}
player_stats_seasonal %>% 
  group_by(player_id, season) %>% 
  filter(n() > 1) %>% 
  head()
```

```{r}
# Save data
save(
  player_stats_seasonal,
  file = "./data/player_stats_seasonal.RData"
)
```

::: {.content-visible when-format="html"}

## Session Info {#sec-downloadFootballDataSessionInfo}

```{r}
sessionInfo()
```

:::
