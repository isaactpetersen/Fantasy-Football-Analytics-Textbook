# Machine Learning {#sec-machineLearning}

## Getting Started {#sec-machineLearningGettingStarted}

### Load Packages {#sec-machineLearningLoadPackages}

```{r}
library("LongituRF")
library("doParallel")
library("missForest")
library("powerjoin")
library("mice")
library("miceadds")
library("tidyverse")
```

### Load Data {#sec-machineLearningLoadData}

```{r}
#| eval: false
#| include: false

# Downloaded Data - Processed
load(file = "./data/nfl_players.RData")
load(file = "./data/nfl_teams.RData")
load(file = "./data/nfl_rosters.RData")
load(file = "./data/nfl_rosters_weekly.RData")
load(file = "./data/nfl_schedules.RData")
load(file = "./data/nfl_combine.RData")
load(file = "./data/nfl_draftPicks.RData")
load(file = "./data/nfl_depthCharts.RData")
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_pbp.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_4thdown.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_participation.RData", fsep = ""))
load(file = "./data/nfl_actualStats_weekly.RData")
load(file = "./data/nfl_injuries.RData")
load(file = "./data/nfl_snapCounts.RData")
load(file = "./data/nfl_espnQBR_seasonal.RData")
load(file = "./data/nfl_espnQBR_weekly.RData")
load(file = "./data/nfl_nextGenStats_weekly.RData")
load(file = "./data/nfl_advancedStatsPFR_seasonal.RData")
load(file = "./data/nfl_advancedStatsPFR_weekly.RData")
load(file = "./data/nfl_playerContracts.RData")
load(file = "./data/nfl_ftnCharting.RData")
load(file = "./data/nfl_playerIDs.RData")
load(file = "./data/nfl_rankings_draft.RData")
load(file = "./data/nfl_rankings_weekly.RData")
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_expectedFantasyPoints_weekly.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_expectedFantasyPoints_pbp.RData", fsep = ""))

# Calculated Data - Processed
load(file = "./data/nfl_actualStats_career.RData")
load(file = "./data/nfl_actualStats_seasonal.RData")
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/player_stats_weekly.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/player_stats_seasonal.RData", fsep = ""))
```

```{r}
# Downloaded Data - Processed
load(file = "./data/nfl_players.RData")
load(file = "./data/nfl_teams.RData")
load(file = "./data/nfl_rosters.RData")
load(file = "./data/nfl_rosters_weekly.RData")
load(file = "./data/nfl_schedules.RData")
load(file = "./data/nfl_combine.RData")
load(file = "./data/nfl_draftPicks.RData")
load(file = "./data/nfl_depthCharts.RData")
load(file = "./data/nfl_pbp.RData")
load(file = "./data/nfl_4thdown.RData")
load(file = "./data/nfl_participation.RData")
load(file = "./data/nfl_actualStats_weekly.RData")
load(file = "./data/nfl_injuries.RData")
load(file = "./data/nfl_snapCounts.RData")
load(file = "./data/nfl_espnQBR_seasonal.RData")
load(file = "./data/nfl_espnQBR_weekly.RData")
load(file = "./data/nfl_nextGenStats_weekly.RData")
load(file = "./data/nfl_advancedStatsPFR_seasonal.RData")
load(file = "./data/nfl_advancedStatsPFR_weekly.RData")
load(file = "./data/nfl_playerContracts.RData")
load(file = "./data/nfl_ftnCharting.RData")
load(file = "./data/nfl_playerIDs.RData")
load(file = "./data/nfl_rankings_draft.RData")
load(file = "./data/nfl_rankings_weekly.RData")
load(file = "./data/nfl_expectedFantasyPoints_weekly.RData")
load(file = "./data/nfl_expectedFantasyPoints_pbp.RData")

# Calculated Data - Processed
load(file = "./data/nfl_actualStats_career.RData")
load(file = "./data/nfl_actualStats_seasonal.RData")
load(file = "./data/player_stats_weekly.RData")
load(file = "./data/player_stats_seasonal.RData")
```

## Overview of Machine Learning {#sec-machineLearningOverview}

Machine learning can be useful for leveraging big data and lots of predictor variable to develop predictive models with greater accuracy.
However, many machine learning techniques are black boxesâ€”it is often unclear
Machine learning tends to be a data-driven, atheoretical technique.
This can result in overfitting.
Thus, when estimating machine learning models, it is common to keep a hold-out sample for use in cross-validation to evaluate the extent of shrinkage of model coefficients.
Shrinkage occurs when predictor variables explain some random error variance in the original model.
When the model is applied to an independent sample, the predictive model will likely not perform quite as well, and the regressions coefficients will tend to get smaller (i.e., shrink).

## Data Processing {#sec-machineLearningDataProcessing}

```{r}
#| eval: false
#| include: false

varNames <- c(
  names(nfl_players),
  names(nfl_teams),
  names(nfl_rosters),
  names(nfl_rosters_weekly),
  names(nfl_schedules),
  names(nfl_combine),
  names(nfl_draftPicks),
  names(nfl_depthCharts),
  names(nfl_pbp),
  names(nfl_4thdown),
  names(nfl_participation),
  names(nfl_actualStats_offense_weekly),
  names(nfl_injuries),
  names(nfl_snapCounts),
  names(nfl_espnQBR),
  names(nfl_nextGenStats_weekly),
  names(nfl_advancedStatsPFR_seasonal),
  names(nfl_advancedStatsPFR_weekly),
  names(nfl_playerContracts),
  names(nfl_ftnCharting),
  names(nfl_playerIDs),
  names(nfl_rankings),
  names(nfl_expectedFantasyPoints_weekly),
  names(nfl_expectedFantasyPoints_pbp)
)

varNames <- unique(varNames)

write.csv(
  varNames,
  file = "./data/varNames.csv",
  row.names = FALSE
)

nfl_players$gsis_id
nfl_rosters$gsis_id
nfl_rosters_weekly$gsis_id
nfl_draftPicks$gsis_id
nfl_depthCharts$gsis_id
nfl_advancedStatsPFR_seasonal$gsis_id

nfl_actualStats_offense_weekly$player_id
nfl_expectedFantasyPoints_weekly$player_id

nfl_rankings$id

nfl_combine$pfr_id
nfl_advancedStatsPFR$pfr_id
nfl_advancedStatsPFR$pfr_player_id

nfl_playerIDs$gsis_id
nfl_playerIDs$pfr_id
```

### Prepare Data for Merging {#sec-machineLearningPrepareDataForMerging}

```{r}
# Prepare data for merging
#-todo: calculate years_of_experience
## Use common name for the same (gsis_id) ID variable
nfl_actualStats_offense_weekly <- nfl_actualStats_offense_weekly %>% 
  rename(gsis_id = player_id)

nfl_actualStats_offense_seasonal <- nfl_actualStats_offense_seasonal %>% 
  rename(gsis_id = player_id)

player_stats_seasonal_offense <- player_stats_seasonal_offense %>% 
  rename(gsis_id = player_id)

player_stats_weekly_offense <- player_stats_weekly_offense %>% 
  rename(gsis_id = player_id)

nfl_expectedFantasyPoints_weekly <- nfl_expectedFantasyPoints_weekly %>% 
  rename(gsis_id = player_id)

## Rename other variables to ensure common names
player_stats_seasonal_offense <- player_stats_seasonal_offense %>% 
  rename(team = team_abbr)

## Ensure variables with the same name have the same type
nfl_players <- nfl_players %>% 
  mutate(
    birth_date = as.Date(birth_date),
    jersey_number = as.character(jersey_number),
    gsis_it_id = as.character(gsis_it_id),
    years_of_experience = as.integer(years_of_experience))

player_stats_seasonal_offense <- player_stats_seasonal_offense %>% 
  mutate(
    birth_date = as.Date(birth_date),
    jersey_number = as.character(jersey_number),
    gsis_it_id = as.character(gsis_it_id))

nfl_rosters <- nfl_rosters %>% 
  mutate(
    draft_number = as.integer(draft_number))

nfl_rosters_weekly <- nfl_rosters %>% 
  mutate(
    draft_number = as.integer(draft_number))

nfl_depthCharts <- nfl_depthCharts %>% 
  mutate(
    season = as.integer(season))

nfl_expectedFantasyPoints_weekly <- nfl_expectedFantasyPoints_weekly %>% 
  mutate(
    receptions = as.integer(receptions))

## Rename variables
#-todo: rename variables in expected fantasy points so they don't get coalesced with actual points
nfl_draftPicks <- nfl_draftPicks %>%
  rename(
    games_career = games,
    pass_completions_career = pass_completions,
    pass_attempts_career = pass_attempts,
    pass_yards_career = pass_yards,
    pass_tds_career = pass_tds,
    pass_ints_career = pass_ints,
    rush_atts_career = rush_atts,
    rush_yards_career = rush_yards,
    rush_tds_career = rush_tds,
    receptions_career = receptions,
    rec_yards_career = rec_yards,
    rec_tds_career = rec_tds,
    def_solo_tackles_career = def_solo_tackles,
    def_ints_career = def_ints,
    def_sacks_career = def_sacks
  )

# Check duplicate ids
player_stats_seasonal_offense %>% 
  group_by(gsis_id, season) %>% 
  filter(n() > 1) %>% 
  head()

nfl_advancedStatsPFR_seasonal %>% 
  group_by(gsis_id, season) %>% 
  filter(n() > 1) %>% 
  head()
```

### Merge Data {#sec-machineLearningMergeData}

```{r}
# Create lists of objects to merge, depending on data structure: id; or id-season; or id-season-week
#-todo: remove redundant variables
playerListToMerge <- list(
  nfl_players %>% filter(!is.na(gsis_id)) %>% select(-season, -years_of_experience),
  nfl_draftPicks %>% filter(!is.na(gsis_id)) %>% select(-season, -age)
)

playerSeasonListToMerge <- list(
  player_stats_seasonal_offense %>% filter(!is.na(gsis_id), !is.na(season), !is.na(team))
)

playerSeasonTeamListToMerge <- list(
  nfl_advancedStatsPFR_seasonal %>% filter(!is.na(gsis_id), !is.na(season), !is.na(team))
)

playerSeasonWeekListToMerge <- list(
  nfl_rosters_weekly %>% filter(!is.na(gsis_id), !is.na(season), !is.na(week)),
  #nfl_actualStats_offense_weekly,
  nfl_expectedFantasyPoints_weekly %>% filter(!is.na(gsis_id), !is.na(season), !is.na(week))
  #nfl_advancedStatsPFR_weekly,
)

playerSeasonWeekPositionListToMerge <- list(
  nfl_depthCharts %>% filter(!is.na(gsis_id), !is.na(season), !is.na(week)),
)

# Merge data
playerMerged <- playerListToMerge %>% 
  reduce(
    powerjoin::power_full_join,
    by = c("gsis_id"),
    conflict = coalesce_xy)

playerSeasonMerged <- playerSeasonListToMerge %>% 
  reduce(
    powerjoin::power_full_join,
    by = c("gsis_id","season"),
    conflict = coalesce_xy)

playerSeasonTeamMerged <- playerSeasonTeamListToMerge %>% 
  reduce(
    powerjoin::power_full_join,
    by = c("gsis_id","season"),
    conflict = coalesce_xy)

playerSeasonWeekMerged <- playerSeasonWeekListToMerge %>% 
  reduce(
    powerjoin::power_full_join,
    by = c("gsis_id","season","week"),
    conflict = coalesce_xy)

seasonalData <- powerjoin::power_full_join(
  idSeasonMerged,
  idMerged,
  by = "gsis_id",
  conflict = coalesce_xy
)

seasonalAndWeeklyData <- powerjoin::power_full_join(
  idSeasonWeekMerged,
  seasonalData,
  by = c("gsis_id","season"),
  conflict = coalesce_xy
)

# check on duplicate id-by-season data (nfl_rosters, nfl_advancedStatsPFR_seasonal)
seasonalData %>% 
  select(gsis_id, season)

seasonalData %>% 
  select(gsis_id, season) %>% 
  unique()
```

### Subset to Predictor Variables and Outcome Variable {#sec-subsetToPredictorsAndOutcome}

```{r}
seasonalData %>% select_if(~class(.) == "Date")
seasonalData %>% select_if(is.character)
seasonalData %>% select_if(is.factor)
seasonalData %>% select_if(is.logical)

seasonalData_subset <- seasonalData %>% 
  dplyr::select(-c(
    birth_date, loaded, full_name, player_name, player_display_name, display_name, suffix, headshot_url, player, pos,
    espn_id, sportradar_id, yahoo_id, rotowire_id, pff_id, fantasy_data_id, sleeper_id, pfr_id,
    pfr_player_id, cfb_player_id, pfr_player_name, esb_id, gsis_it_id, smart_id,
    college, college_name, team_abbr, current_team_id, college_conference, draft_club, status_description_abbr,
    status_short_description, short_name, headshot, uniform_number, jersey_number, first_name, last_name,
    football_name, team
    ))
```

### Convert Character Predictors to Factors {#sec-convertCharacterToFactor}

```{r}
seasonalData_subset <- seasonalData_subset %>% mutate(across(where(is.character), as.factor))
seasonalData_subset <- seasonalData_subset %>% mutate(across(where(is.logical), as.factor))

seasonalData_subset %>% select_if(~class(.) == "Date") %>% str()
seasonalData_subset %>% select_if(is.character) %>% str()
seasonalData_subset %>% select_if(is.factor) %>% str()
seasonalData_subset %>% select_if(is.logical) %>% str()
```

### Impute the Missing Data {#sec-missingDataImputation}

(CONSIDER WIDENING THE DATA TO AVOID MULTILEVEL IMPUTATION)

#### `missForest`

```{r}
num_cores <- detectCores()
num_cores

registerDoParallel(cores = num_cores)

seasonalData_subset_imp <- missForest::missForest(
  seasonalData_subset %>% select(ageCentered20, ageCentered20Quadratic, fantasy_points) %>% data.frame,
  verbose = TRUE,
  mtry = 100,
  parallelize = "forests")
```

#### `MICE`

```{r}
# Specify data to impute
dataToImpute <- seasonalData_subset %>% 
  select(gsis_id, season, ageCentered20, ageCentered20Quadratic, fantasy_points, years_of_experience) %>% 
  filter(!is.na(gsis_id), !is.na(season)) %>% 
  mutate(ID = as.integer(as.factor(as.character(gsis_id)))) %>% 
  arrange(gsis_id, season)

# Specify variables to impute
varsToImpute <- c("fantasy_points")
Y <- varsToImpute

# Specify predictors of missing data
clusterVariable <- "ID"
fixedEffectPredictors <- c("ageCentered20Quadratic")
randomEffectPrectors <- c("ageCentered20")

# Specify number of imputations
numImputations <- 1

# Specify the imputation method
meth <- make.method(dataToImpute)
meth[1:length(meth)] <- ""
meth[Y] <- "2l.pmm" # specify the imputation method here; this can differ by outcome variable

# Specify the predictor matrix

pred <- make.predictorMatrix(dataToImpute)
pred[1:nrow(pred), 1:ncol(pred)] <- 0
pred[Y, clusterVariable] <- (-2) # cluster variable
pred[Y, randomEffectPrectors] <- 2 # random effect predictor
#pred[Y, fixedEffectPredictors] <- 1 # fixed effect predictor
pred[Y, Y] <- 1 # fixed effect predictor of each predictor in predicting the other predictors

diag(pred) <- 0
pred

# Imputation
mi_mice <- mice(
  as.data.frame(dataToImpute),
  method = meth,
  predictorMatrix = pred,
  m = numImputations,
  maxit = 100, # generally use 100 maximum iterations; this example uses 5 for speed
  seed = 52242)

mi_mice$loggedEvents

seasonalData_subset_imp <- complete(
  mi_mice,
  action = "stacked",
  include = FALSE)
```


## Fitting the Traditional Regression Models {#sec-fittingModels-regression}

### Regression with One Predictor {#sec-regressionOnePredictor}

### Regression with Multiple Predictors {#sec-regressionMultiplePredictors}

## Fitting the Machine Learning Models {#sec-fittingModels-machineLearning}

### Least Absolute Shrinkage and Selection Option (LASSO) {#sec-lasso}

### Ridge Regression {#sec-ridgeRegression}

### Elastic Net {#sec-elasticNet}

### Random Forest Machine Learning {#sec-randomForest}

#### Cross-Sectional Data {#sec-randomForestCrossSectionalData}

#### Longitudinal Data {#sec-randomForestLongitudinalData}

[@Hu2023]

```{r}
smerf <- LongituRF::MERF(
  X = seasonalData[,c("ageCentered20")] %>% as.matrix(),
  Y = seasonalData$fantasy_points,
  Z = seasonalData[,c("ageCentered20")] %>% as.matrix(),
  id = seasonalData$gsis_id,
  time = seasonalData$ageCentered20,
  mtry = 2,
  ntree = 500,
  sto = "BM")

smerf$forest # is the fitted random forest (obtained at the last iteration)
smerf$random_effects # are the predicted random effects for each individual
smerf$omega # are the predicted stochastic processes
plot(smerf$Vraisemblance) # evolution of the log-likelihood
smerf$OOB # OOB error at each iteration
```

### *k*-Fold Cross-Validation {#sec-kfoldCV}

### Leave-One-Out (LOO) Cross-Validation {#sec-looCV}

## Conclusion {#sec-machineLearningConclusion}

::: {.content-visible when-format="html"}

## Session Info {#sec-machineLearningSessionInfo}

```{r}
sessionInfo()
```

:::
