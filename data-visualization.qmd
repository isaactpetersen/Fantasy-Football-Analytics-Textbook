# Data Visualization {#sec-dataVisualization}

## Getting Started {#sec-dataVisualizationGettingStarted}

### Load Packages {#sec-dataVisualizationLoadPackages}

```{r}
library("tidyverse")
library("nflplotR")
library("plotly")
```

### Load Data {#sec-dataVisualizationLoadData}

```{r}
#| eval: false
#| include: false

load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_pbp.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/player_stats_weekly.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/player_stats_seasonal.RData", fsep = ""))
```

```{r}
load(file = "./data/nfl_pbp.RData")
load(file = "./data/player_stats_weekly.RData")
load(file = "./data/player_stats_seasonal.RData")
```

We created the `player_stats_weekly.RData` and `player_stats_seasonal.RData` objects in @sec-calculatePlayerAge.

## Overview {#sec-dataVisualizationOverview}

The R Graph Gallery provides examples of various types of plots: <https://r-graph-gallery.com>.

## Univariate Distribution {#sec-univariateDistribution}

### Histogram {#sec-histogram}

A histogram of fantasy points is depicted in @fig-histogram.

```{r}
#| label: fig-histogram
#| fig-cap: "Histogram of Fantasy Points."

ggplot2::ggplot(
  data = player_stats_seasonal_offense %>%
    filter(position_group %in% c("QB","RB","WR","TE")),
  mapping = aes(
    x = fantasy_points)
) +
  geom_histogram(
    color = "#000000",
    fill = "#0099F8"
  ) +
  theme_classic()
```

### Density Plot {#sec-densityPlot}

A histogram of fantasy points is depicted in @fig-density.

```{r}
#| label: fig-density
#| fig-cap: "Density Plot of Fantasy Points."

ggplot2::ggplot(
  data = player_stats_seasonal_offense %>%
    filter(position_group %in% c("QB","RB","WR","TE")),
  mapping = aes(
    x = fantasy_points,
    fill = position_group)
) +
  geom_density(alpha = 0.7) + # add transparency
  theme_classic()
```

### Histogram with Overlaid Density and Rug Plot {#sec-histogramDensity}

A histogram of fantasy points with an overlaid density and rug plot is depicted in @fig-histogramDensity.

```{r}
#| label: fig-histogramDensity
#| fig-cap: "Histogram with Overlaid Density and Rug Plot."

ggplot2::ggplot(
  data = player_stats_seasonal_offense %>%
    filter(position_group %in% c("QB","RB","WR","TE")),
  mapping = aes(
    x = fantasy_points)
) +
  geom_histogram(
    aes(y = after_stat(density)),
    color = "#000000",
    fill = "#0099F8"
  ) +
  geom_density(
    color = "#000000",
    fill = "#F85700",
    alpha = 0.6 # add transparency
  ) +
  geom_rug() +
  theme_classic()
```

### Box-and-Whisker Plot {#sec-boxAndWhiskerPlot}

A box-and-whisker plot of fantasy points is depicted in @fig-boxAndWhisker.

```{r}
#| label: fig-boxAndWhisker
#| fig-cap: "Box-and-Whisker Plot."

ggplot2::ggplot(
  data = player_stats_seasonal_offense %>%
    filter(position_group %in% c("QB","RB","WR","TE")),
  mapping = aes(
    x = position_group,
    y = fantasy_points,
    fill = position_group)
) +
  geom_boxplot() +
  theme_classic() + 
  theme(legend.position = "none")
```

### Violin Plot {#sec-violinPlot}

A violin plot of fantasy points is depicted in @fig-boxAndWhisker.

```{r}
#| label: fig-violin
#| fig-cap: "Violin Plot."

ggplot2::ggplot(
  data = player_stats_seasonal_offense %>%
    filter(position_group %in% c("QB","RB","WR","TE")),
  mapping = aes(
    x = position_group,
    y = fantasy_points,
    fill = position_group)
) +
  geom_violin(draw_quantiles = c(0.25, 0.5, 0.75)) +
  theme_classic() + 
  theme(legend.position = "none")
```

## Scatterplot {#sec-scatterplot}

First, we prepare the data:

```{r}
# Subset Data
rb_seasonal <- player_stats_seasonal_offense %>% 
  filter(position_group == "RB")
```

Second, we create the base plot using the `ggplot()` function of the `ggplot2` package, as in @fig-scatterplot1.
We specify the data object and the variables in the data object that are associated with the x- and y-axes:

```{r}
#| label: fig-scatterplot1
#| fig-cap: "Base Plot."

ggplot2::ggplot(
  data = rb_seasonal, # specify data object
  aes(
    x = age, # specify variable on x-axis
    y = rushing_yards)) # specify variable on y-axis
```

Third, we create a scatterplot using the `geom_point()` function from the `ggplot2` package, as in @fig-scatterplot2:

```{r}
#| label: fig-scatterplot2
#| fig-cap: "Scatterplot."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point() # add points for scatterplot
```

Fourth, we add a linear best-fit line using the `geom_smooth()`, as in @fig-scatterplot3:

```{r}
#| label: fig-scatterplot3
#| fig-cap: "Scatterplot with Linear Best-Fit Line."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point() +
  geom_smooth(method = "lm") # add linear best-fit line
```

We could also estimate a quadratic polynomial best-fit line, as in @fig-scatterplot4:

```{r}
#| label: fig-scatterplot4
#| fig-cap: "Scatterplot with Quadratic Best-Fit Line."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point() +
  geom_smooth(
    method = "lm",
    formula = y ~ poly(x, 2)) # add quadratic best-fit line
```

Or, we could estimate a smooth best-fit line using locally estimated scatterplot smoothing (LOESS) to allow for any form of nonlinearity, as in @fig-scatterplot5:

```{r}
#| label: fig-scatterplot5
#| fig-cap: "Scatterplot with Best-Fit Line Using Locally Estimated Scatterplot Smoothing (LOESS)."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point() +
  geom_smooth(method = "loess") # add smooth best-fit (LOESS) line
```

By default, the best-fit line is based on a generalized additive model, which allows for nonlinearity, as in @fig-scatterplot6:

```{r}
#| label: fig-scatterplot6
#| fig-cap: "Scatterplot with Best-Fit Line from Generalized Additive Model."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point() +
  geom_smooth() # add GAM best-fit line; same as specifying method = "gam"
```

Then, we can change the axes, as in @fig-scatterplot7:

```{r}
#| label: fig-scatterplot7
#| fig-cap: "Scatterplot with Modified Axes."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point() +
  geom_smooth() +
  scale_x_continuous(
    expand = c(0,0), # set origin of x-axis to 0
    lim = c(20,40), # set limits of x-axis
    breaks = seq(from = 20, to = 40, by = 5) # specify x-axis labels
  ) +
  scale_y_continuous(
    expand = c(0,0), # set origin of y-axis to 0
    lim = c(0,NA), # set limits of y-axis
    breaks = seq(from = 0, to = 2500, by = 250) # specify y-axis labels
  )
```

Then, we can add plot labels, as in @fig-scatterplot8:

```{r}
#| label: fig-scatterplot8
#| fig-cap: "Scatterplot with Plot Labels."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point() +
  geom_smooth() +
  scale_x_continuous(
    expand = c(0,0),
    lim = c(20,40),
    breaks = seq(from = 20, to = 40, by = 5)
  ) +
  scale_y_continuous(
    expand = c(0,0),
    lim = c(0,NA),
    breaks = seq(from = 0, to = 2500, by = 250)
  ) +
  labs( # add plot labels
    x = "Running Back's Age (years)",
    y = "Rushing Yards Per Season",
    title = "NFL Rushing Yards (Season) by Player Age",
    subtitle = "(Among Running Backs)"
  )
```

Then, we can use a theme such as the classic theme (`theme_classic()`) to make it more visually presentable, as in @fig-scatterplot9:

```{r}
#| label: fig-scatterplot9
#| fig-cap: "Scatterplot with Classic Theme."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point() +
  geom_smooth() +
  scale_x_continuous(
    expand = c(0,0),
    lim = c(20,40),
    breaks = seq(from = 20, to = 40, by = 5)
  ) +
  scale_y_continuous(
    expand = c(0,0),
    lim = c(0,NA),
    breaks = seq(from = 0, to = 2500, by = 250)
  ) +
  labs(
    x = "Running Back's Age (years)",
    y = "Rushing Yards Per Season",
    title = "NFL Rushing Yards (Season) by Player Age",
    subtitle = "(Among Running Backs)"
  ) +
  theme_classic() # use the classic theme
```

Or, we could use a different theme, such as the dark theme (`theme_dark()`) in @fig-scatterplot10.
For a list of themes available in `ggplot2`, see here: <https://ggplot2-book.org/themes#sec-themes>.

```{r}
#| label: fig-scatterplot10
#| fig-cap: "Scatterplot with Dark Theme."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point() +
  geom_smooth() +
  scale_x_continuous(
    expand = c(0,0),
    lim = c(20,40),
    breaks = seq(from = 20, to = 40, by = 5)
  ) +
  scale_y_continuous(
    expand = c(0,0),
    lim = c(0,NA),
    breaks = seq(from = 0, to = 2500, by = 250)
  ) +
  labs(
    x = "Running Back's Age (years)",
    y = "Rushing Yards Per Season",
    title = "NFL Rushing Yards (Season) by Player Age",
    subtitle = "(Among Running Backs)"
  ) +
  theme_dark() # use the dark theme
```

::: {.content-visible when-format="html:js"}

After creating our plot, we can make the plot interactive using the `ggplotly()` function from the plotly package, as in @fig-scatterplot11.

```{r}
#| label: fig-scatterplot11
#| fig-cap: "Interactive Scatterplot Using Plotly."

plot_ypcByPlayerAge <- ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point(
    aes(
      text = player_display_name, # add player name for mouse over tooltip
      label = season)) + # add season for mouse over tooltip
  geom_smooth() +
  scale_x_continuous(
    expand = c(0,0),
    lim = c(20,40),
    breaks = seq(from = 20, to = 40, by = 5)
  ) +
  scale_y_continuous(
    expand = c(0,0),
    lim = c(0,NA),
    breaks = seq(from = 0, to = 2500, by = 250)
  ) +
  labs(
    x = "Running Back's Age (years)",
    y = "Rushing Yards Per Season",
    title = "NFL Rushing Yards (Season) by Player Age",
    subtitle = "(Among Running Backs)"
  ) +
  theme_classic()

ggplotly(plot_ypcByPlayerAge)
```

:::

::: {.content-visible when-format="pdf"}

After creating our plot, we can make the plot interactive using the `ggplotly()` function from the plotly package.

```{r}
#| eval: false

plot_ypcByPlayerAge <- ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point(
    aes(
      text = player_display_name, # add player name for mouse over tooltip
      label = season)) + # add season for mouse over tooltip
  geom_smooth() +
  scale_x_continuous(
    expand = c(0,0),
    lim = c(20,40),
    breaks = seq(from = 20, to = 40, by = 5)
  ) +
  scale_y_continuous(
    expand = c(0,0),
    lim = c(0,NA),
    breaks = seq(from = 0, to = 2500, by = 250)
  ) +
  labs(
    x = "Running Back's Age (years)",
    y = "Rushing Yards Per Season",
    title = "NFL Rushing Yards (Season) by Player Age",
    subtitle = "(Among Running Backs)"
  ) +
  theme_classic()

ggplotly(plot_ypcByPlayerAge)
```

:::

## Line Chart {#sec-lineChart}

A bar plot of Tom Brady's fantasy points by season is depicted in @fig-lineChart.

```{r}
#| label: fig-lineChart
#| fig-cap: "Line Chart."

ggplot2::ggplot(
  data = player_stats_seasonal_offense %>%
    filter(player_display_name == "Tom Brady"),
  mapping = aes(
    x = season,
    y = fantasy_points,
    fill = position_group
    )
) +
  geom_line(
    linewidth = 1.5,
    color = "blue"
  ) +
  theme_classic()
```

## Bar Plot {#sec-barPlot}

To create a bar plot, we first compute summary statistics:

```{r}
confidenceLevel <- .95 # for 95% confidence interval

player_stats_seasonal_offense_summary <- player_stats_seasonal_offense %>%
    filter(position_group %in% c("QB","RB","WR","TE")) %>% 
  group_by(position_group) %>%
  summarise( 
    n = sum(!is.na(fantasy_points)),
    mean = mean(fantasy_points, na.rm = TRUE),
    sd = sd(fantasy_points, na.rm = TRUE)
  ) %>%
  mutate(se = sd/sqrt(n)) %>%
  mutate(
    ci_lower = mean - qt(p = 1 - (1 - confidenceLevel) / 2, df = n - 1) * se,
    ci_upper = mean + qt(p = 1 - (1 - confidenceLevel) / 2, df = n - 1) * se
  )
```

The summary statistics are in @tbl-summaryStats.

```{r}
#| label: tbl-summaryStats
#| tbl-cap: "Table of Summary Statistics."

player_stats_seasonal_offense_summary
```

A bar plot of fantasy points by position is depicted in @fig-barPlot.

```{r}
#| label: fig-barPlot
#| fig-cap: "Bar Plot."

ggplot2::ggplot(
  data = player_stats_seasonal_offense_summary,
  mapping = aes(
    x = position_group,
    y = mean,
    fill = position_group,
    color = position_group
    )
) +
  geom_bar(
    stat = "identity") +
  theme_classic()
```

Based on the summary statistics in @tbl-summaryStats, we create a bar plot with bars representing the 95% confidence interval in @fig-barPlotConfidenceInterval.

```{r}
#| label: fig-barPlotConfidenceInterval
#| fig-cap: "Bar Plot with Bars Representing the 95% Confidence Interval."

ggplot2::ggplot(
  data = player_stats_seasonal_offense_summary %>%
    filter(position_group %in% c("QB","RB","WR","TE")),
  mapping = aes(
    x = position_group,
    y = mean,
    fill = position_group,
    color = position_group
    )
) +
  geom_bar(
    stat = "identity") +
  geom_errorbar(
    aes(
      ymin = ci_lower,
      ymax = ci_upper),
    width = 0.2,
    color = "black"
  ) +
  theme_classic()
```

## Examples {#sec-scatterplotExamples}

### Players {#sec-scatterplotPlayers}

#### Running Back Performance By Player Age {#sec-plotRBperformanceByAge}

```{r}
# Prepare Data
rushing_attempts <- nfl_pbp %>% 
  dplyr::filter(season_type == "REG") %>% 
  dplyr::filter(
    rush == 1,
    rush_attempt == 1,
    qb_scramble == 0,
    qb_dropback == 0,
    !is.na(rushing_yards))

rb_yardsPerCarry <- rushing_attempts %>% 
  dplyr::group_by(rusher_id, season) %>% 
  dplyr::summarise(
    ypc = mean(rushing_yards, na.rm = TRUE),
    rush_attempts = n(),
    .groups = "drop") %>% 
  dplyr::ungroup() %>% 
  dplyr::left_join(
    player_stats_seasonal_offense,
    by = c("rusher_id" = "player_id", "season")
  ) %>% 
  dplyr::filter(
    position_group == "RB",
    rush_attempts >= 50)
```

##### Rushing Yards Per Carry {#sec-plotYPCbyAge}

::: {.content-visible when-format="html:js"}

Rushing yards per carry over the course of the season is depicted as a function of the Running Back's age in @fig-rushYPCperSeasonByAge.


```{r}
#| label: fig-rushYPCperSeasonByAge
#| fig-cap: "Rushing Yards Per Carry (Season) by Player Age."

plot_ypcByPlayerAge2 <- ggplot2::ggplot(
  data = rb_yardsPerCarry,
  aes(
    x = age,
    y = ypc)) +
  geom_point(
    aes(
      text = player_display_name,
      label = season)) +
  geom_smooth() +
  labs(
    x = "Running Back's Age (years)",
    y = "Rushing Yards Per Carry (Season)",
    title = "NFL Rushing Yards Per Carry (Season) by Player Age",
    subtitle = "(minimum 50 rushing attempts)"
  ) +
  theme_classic()

ggplotly(plot_ypcByPlayerAge2)
```

:::

::: {.content-visible when-format="pdf"}

Rushing yards per carry over the course of the season is depicted as a function of the Running Back's age in @fig-rushYPCperSeasonByAgePDF.

```{r}
#| label: fig-rushYPCperSeasonByAgePDF
#| fig-cap: "NFL Rushing Yards Per Carry Per Season by Player Age."

ggplot2::ggplot(
  data = rb_yardsPerCarry,
  aes(
    x = age,
    y = ypc)) +
  geom_point(
    aes(
      text = player_display_name,
      label = season)) +
  geom_smooth() +
  labs(
    x = "Running Back's Age (years)",
    y = "Rushing Yards Per Carry (Season)",
    title = "NFL Rushing Yards Per Carry (Season) by Player Age",
    subtitle = "(minimum 50 rushing attempts)"
  ) +
  theme_classic()
```

:::

##### Rushing EPA Per Season {#sec-plotRushEPAbyAge}

::: {.content-visible when-format="html:js"}

Rushing expected points added (EPA) over the course of the season is depicted as a function of the Running Back's age in @fig-rushEPAperSeasonByAge.

```{r}
#| label: fig-rushEPAperSeasonByAge
#| fig-cap: "Rushing Expected Points Added (Season) by Player Age."

plot_rushEPAbyPlayerAge <- ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_epa)) +
  geom_point(
    aes(
      text = player_display_name,
      label = season)) +
  geom_smooth() +
  labs(
    x = "Running Back's Age (years)",
    y = "Rushing EPA (Season)",
    title = "NFL Rushing Expected Points Added (Season) by Player Age"
  ) +
  theme_classic()

ggplotly(plot_rushEPAbyPlayerAge)
```

:::

::: {.content-visible when-format="pdf"}

Rushing expected points added (EPA) over the course of the season is depicted as a function of the Running Back's age in @fig-rushEPAperSeasonByAgePDF.

```{r}
#| label: fig-rushEPAperSeasonByAgePDF
#| fig-cap: "NFL Rushing Expected Points Added (EPA) per Season by Player Age."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_epa)) +
  geom_point(
    aes(
      text = player_display_name,
      label = season)) +
  geom_smooth() +
  labs(
    x = "Running Back's Age (years)",
    y = "Rushing EPA (Season)",
    title = "NFL Rushing Expected Points Added (Season) by Player Age"
  ) +
  theme_classic()
```

:::

### Teams {#sec-scatterplotTeams}

#### Defensive and Offensive EPA per Play {#sec-plotDefOffEPA}

Expected points added (EPA) per play by the team with possession.

```{r}
pbp_regularSeason <- nfl_pbp %>% 
  dplyr::filter(
    season == 2023,
    season_type == "REG") %>%
  dplyr::filter(!is.na(posteam) & (rush == 1 | pass == 1))

epa_offense <- pbp_regularSeason %>%
  dplyr::group_by(team = posteam) %>%
  dplyr::summarise(off_epa = mean(epa, na.rm = TRUE))

epa_defense <- pbp_regularSeason %>%
  dplyr::group_by(team = defteam) %>%
  dplyr::summarise(def_epa = mean(epa, na.rm = TRUE))

epa_combined <- epa_offense %>%
  dplyr::inner_join(
    epa_defense,
    by = "team")
```

Defensive EPA per play during the 2023 NFL season is depicted as a function of offensive EPA per play in @fig-plotDefOffEPA.

```{r}
#| label: fig-plotDefOffEPA
#| fig-cap: "2023 NFL Offensive and Defensive EPA Per Play."

ggplot2::ggplot(
  data = epa_combined,
  aes(
    x = off_epa,
    y = def_epa)) +
  nflplotR::geom_mean_lines(
    aes(
      x0 = off_epa ,
      y0 = def_epa)) +
  nflplotR::geom_nfl_logos(
    aes(
      team_abbr = team),
      width = 0.065,
      alpha = 0.7) +
  labs(
    x = "Offense EPA/play",
    y = "Defense EPA/play",
    title = "2023 NFL Offensive and Defensive EPA per Play"
  ) +
  theme_classic() +
  scale_y_reverse()
```

## Conclusion {#sec-dataVisualizationConclusion}

::: {.content-visible when-format="html"}

## Session Info {#sec-dataVisualizationSessionInfo}

```{r}
sessionInfo()
```

:::
