# Data Visualization {#sec-dataVisualization}

## Getting Started {#sec-dataVisualizationGettingStarted}

### Load Packages {#sec-dataVisualizationLoadPackages}

```{r}
library("nflplotR")
library("plotly")
library("gghighlight")
library("ggridges")
library("tidyverse")
```

### Load Data {#sec-dataVisualizationLoadData}

```{r}
#| eval: false
#| include: false

load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/nfl_pbp.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/player_stats_weekly.RData", fsep = ""))
load(file = file.path(path, "/OneDrive - University of Iowa/Teaching/Courses/Fantasy Football/Data/player_stats_seasonal.RData", fsep = ""))
```

```{r}
load(file = "./data/nfl_pbp.RData")
load(file = "./data/player_stats_weekly.RData")
load(file = "./data/player_stats_seasonal.RData")
```

We created the `player_stats_weekly.RData` and `player_stats_seasonal.RData` objects in @sec-calculatePlayerAge.

## Overview {#sec-dataVisualizationOverview}

### Principles of Graphic Design {#sec-dataVisualizationOverviewGraphicDesign}

When designing graphics, it is important to understand general principles of graphic design.
An article that describes important principles about graphic design is at the following link: <https://www.adobe.com/express/learn/blog/8-basic-design-principles-to-help-you-create-better-graphics> (archived at <https://perma.cc/29P9-NNSK>).
The important principles include:

> 1. Focus on alignment.
> 2. Use hierarchy to help focus your design.
> 3. Leverage contrast to accentuate important design elements.
> 4. Use repetition to your advantage.
> 5. Consider proximity when organizing your graphic elements.
> 6. Make sure your designs have balance.
> 7. Optimize color to support your design.
> 8. Leave negative space.

### Principles of Data Visualization {#sec-dataVisualizationOverviewPrinciples}

Data visualization involves graphic design in a particular domain—the visualization of data (numeric-derived information).
@Schwabish2021 describes five principles in data visualization:

> 1. Show the data.
> 2. Reduce the clutter.
> 3. Integrate the graphics and text.
> 4. Avoid the spaghetti chart.
> 5. Start with gray.

"Showing the data" involves showing the data that matters the most.
"Reducing the clutter" involves removing non-data things that obscure the data—for example, extraneous gridlines, tick marks, data markers (e.g., symbols to distinguish between series), and complex shadings (e.g., textured or filled gradients).
"Integrating the graphics and text" involves using headline titles, clear and useful labels (instead of legends), and helpful annotations.
Headline or newspaper-like titles are titles that are succinct with active phasing and that indicate the take-away message (e.g., "Quarterbacks Threw Fewer Touchdowns in 2024 than in Previous Years").
In terms of labels, @Schwabish2021 advocates to label the data directly instead of using a legend.
In terms of helpful annotations, you can provide additional text that helps explain the data (e.g., peaks or valleys, outliers, or other variations that deserve explanation), including how to interpret the chart.
"Avoiding the spaghetti chart" means avoiding packed charts with too much information that makes them difficult to interpret.
Spaghetti charts are lines with many lines that, make the plot look like a bunch of spaghetti.
However, @Schwabish2021 also advocates against using charts of other types that are complicated and difficult to interpret due to too much information, such as complicated maps or bar plots with too many colors, icons, or bars.
If there are too many lines or series, @Schwabish2021 advocates breaking it up into multiple charts (i.e., facets, trellis charts, or small multiples).
"Starting with gray" refers to the idea of using gray as the default color for most lines/points/bars, so that you can use a color to highlight the lines/points/bars of interest.
In addition, as noted by @Schwabish2021, it is important to treat data as objectively as possible and not to present figures in a biased way as to mislead.

In his classic book, @Tufte2001 states that effective data visualizations should follow principles of graphical excellence and integrity.
He notes that "Graphical excellence is that which gives to the viewer the greatest number of ideas in the shortest time with the least ink in the smallest space." (p. 51).
That is, data visualizations should seek to maximize the data-to-ink ratio (within reason), and should spend less space on "fluff" (i.e., non-data things that can be erased without losing meaning, such as grid lines, redundancies, etc.).
This is consistent with Schwabish's -@Schwabish2021 principles of showing the data and reducing the clutter.
@Tufte2001 describes six principles of graphical integrity:

> 1. The representation of numbers, as physically measured on the surface of the graphic itself, should be directly proportional to the numerical quantities represented.
> 2. Clear, detailed, and thorough labeling should be used to defeat graphic distortion and ambiguity. Write out explanations of the data on the graphic itself. Label important events in the data.
> 3. Show data variation, not design variation.
> 4. In time-series displays of money, deflated and standardized units of monetary measurement are nearly always better than nominal units.
> 5. The number of information-carrying (variable) dimensions depicted should not exceed the number of dimensions in the data.
> 6. Graphics must not quote data out of context.
> 
> --- Tufte [-@Tufte2001, p. 77]

@Tufte2001 also provides recommendations for friendly, accessible graphics, including:

- spell words out (rather than using abbreviations)
- have words run from left to write (including the y-axis title)
- include little messages to help explain the data
- place labels on the graphic so no legend is needed
- avoid elaborately encoded shadings, cross-hatching, and colors
- avoid "chartjunk"—i.e., unnecessary or distracting elements (e.g., excessive decoration, overly complex graphics, graphical effects, and irrelevant information such as moiré vibration, heavy grids, and self-promoting graphs) that do not improve viewers' understanding of the data
- if colors are used, use colors that are distinguishable by color-deficient and color-blind viewers (red–green is a common form of color-blindness)
- use type (i.e., of the text) that is clear, precise, and modest
- use text that is upper-and-lower case, not all capitals

### Creating Data Visualizations in `R` {#sec-dataVisualizationOverviewInR}

The R Graph Gallery provides examples of various types of plots: <https://r-graph-gallery.com>.
Books on data visualization in `R` include [*`ggplot2`: Elegant Graphics for Data Analysis*](https://ggplot2-book.org) [@ggplot3rdEd] and [*`R` Graphics Cookbook: Practical Recipes for Visualizing Data*](https://r-graphics.org) [@Chang2018].
In this chapter, we will examine how to create statistical graphics to visualize data.
We will create the plots using the `ggplot2` package.
When creating plots in `ggplot2` with multiple points or lines (e.g., multiple players or levels of a predictor variable), it is easiest to do so with the data in [long form](#sec-wideToLong) (as opposed to [wide form](#sec-longToWide)).

A key principle of graphic design and data visualization is the importance of contrast.
Each visual component (e.g., line) that is important to see should be easy to distinguish.
For instance, you can highlight lines or points of interest to draw people's attention to the target of interest [@Schwabish2021].
For examples of highlighting in figures, see Figures [-@fig-lineChartHighlighting] (@sec-lineChartHighlighting) and [-@fig-simulationOf10CoinFlips].
It is also important to use color schemes with distinguishable colors.
Good color schemes for sequential, diverging, and qualitative (i.e., categorical) data are provided by ColorBrewer (<https://colorbrewer2.org>) and are available using the `scale_color_brewer()` and `scale_fill_brewer()` functions of the `ggplot2` package, as demonstrated in @fig-barPlotColorScheme (@sec-barPlotModifiedColorScheme).

## Univariate Distribution {#sec-univariateDistribution}

### Histogram {#sec-histogram}

A histogram of fantasy points is depicted in @fig-histogram.

```{r}
#| label: fig-histogram
#| fig-cap: "Histogram of Fantasy Points."

ggplot2::ggplot(
  data = player_stats_seasonal_offense %>%
    filter(position_group %in% c("QB","RB","WR","TE")),
  mapping = aes(
    x = fantasy_points)
) +
  geom_histogram(
    color = "#000000",
    fill = "#0099F8"
  ) +
  labs(
    x = "Fantasy Points",
    title = "Histogram of Fantasy Points"
  ) +
  theme_classic() +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) # horizontal y-axis title
```

### Density Plot {#sec-densityPlot}

A histogram of fantasy points is depicted in @fig-density.

```{r}
#| label: fig-density
#| fig-cap: "Density Plot of Fantasy Points by Position."

ggplot2::ggplot(
  data = player_stats_seasonal_offense %>%
    filter(position_group %in% c("QB","RB","WR","TE")),
  mapping = aes(
    x = fantasy_points,
    fill = position_group)
) +
  geom_density(alpha = 0.7) + # add transparency
  labs(
    x = "Fantasy Points",
    fill = "Position",
    title = "Density Plot of Fantasy Points by Position"
  ) +
  theme_classic() +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) # horizontal y-axis title
```

### Histogram with Overlaid Density and Rug Plot {#sec-histogramDensity}

A histogram of fantasy points with an overlaid density and rug plot is depicted in @fig-histogramDensity.

```{r}
#| label: fig-histogramDensity
#| fig-cap: "Histogram with Overlaid Density and Rug Plot."

ggplot2::ggplot(
  data = player_stats_seasonal_offense %>%
    filter(position_group %in% c("QB","RB","WR","TE")),
  mapping = aes(
    x = fantasy_points)
) +
  geom_histogram(
    aes(y = after_stat(density)),
    color = "#000000",
    fill = "#0099F8"
  ) +
  geom_density(
    color = "#000000",
    fill = "#F85700",
    alpha = 0.6 # add transparency
  ) +
  geom_rug() +
  labs(
    x = "Fantasy Points",
    title = "Histogram of Fantasy Points with Overlaid Density and Rug Plot"
  ) +
  theme_classic() +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) # horizontal y-axis title
```

### Box-and-Whisker Plot {#sec-boxAndWhiskerPlot}

A box-and-whisker plot of fantasy points is depicted in @fig-boxAndWhisker.

```{r}
#| label: fig-boxAndWhisker
#| fig-cap: "Box-and-Whisker Plot."

ggplot2::ggplot(
  data = player_stats_seasonal_offense %>%
    filter(position_group %in% c("QB","RB","WR","TE")),
  mapping = aes(
    x = position_group,
    y = fantasy_points,
    fill = position_group)
) +
  geom_boxplot() +
  labs(
    x = "Position",
    y = "Fantasy Points",
    title = "Box-and-Whisker Plot of Fantasy Points by Position"
  ) +
  theme_classic() + 
  theme(
    legend.position = "none",
    axis.title.y = element_text(angle = 0, vjust = 0.5)) # horizontal y-axis title
```

### Violin Plot {#sec-violinPlot}

A violin plot of fantasy points is depicted in @fig-violin.

```{r}
#| label: fig-violin
#| fig-cap: "Violin Plot. Lines represent the 25th, 50th, and 75th quantiles."

ggplot2::ggplot(
  data = player_stats_seasonal_offense %>%
    filter(position_group %in% c("QB","RB","WR","TE")),
  mapping = aes(
    x = position_group,
    y = fantasy_points,
    fill = position_group)
) +
  geom_violin(draw_quantiles = c(0.25, 0.5, 0.75)) +
  labs(
    x = "Position",
    y = "Fantasy Points",
    title = "Violin Plot of Fantasy Points by Position",
    subtitle = "Lines represent the 25th, 50th, and 75th quantiles"
  ) +
  theme_classic() + 
  theme(
    legend.position = "none",
    axis.title.y = element_text(angle = 0, vjust = 0.5)) # horizontal y-axis title
```

### Ridgeline Plot {#sec-ridgelinePlot}

A ridgeline plot of fantasy points is depicted in @fig-ridgeline1.

```{r}
#| label: fig-ridgeline1
#| fig-cap: "Ridgeline Plot."

ggplot2::ggplot(
  data = player_stats_seasonal_offense %>%
    filter(position_group %in% c("QB","RB","WR","TE")),
  mapping = aes(
    x = fantasy_points,
    y = position_group,
    group = position_group,
    fill = position_group)
) +
  ggridges::geom_density_ridges(
    rel_min_height = 0.0085, # remove trailing tails
  ) +
  labs(
    x = "Fantasy Points",
    y = "Position",
    title = "Ridgeline Plot of Fantasy Points by Position"
  ) +
  theme_classic() + 
  theme(
    legend.position = "none",
    axis.title.y = element_text(angle = 0, vjust = 0.5)) # horizontal y-axis title
```

We can add lines at the quartiles, as depicted in @fig-ridgeline2.

```{r}
#| label: fig-ridgeline2
#| fig-cap: "Ridgeline Plot. Lines represent the 25th, 50th, and 75th quantiles."

ggplot2::ggplot(
  data = player_stats_seasonal_offense %>%
    filter(position_group %in% c("QB","RB","WR","TE")),
  mapping = aes(
    x = fantasy_points,
    y = position_group,
    group = position_group,
    fill = factor(after_stat(quantile)))
) +
  ggridges::stat_density_ridges(
    rel_min_height = 0.0085, # remove trailing tails
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE,
    quantiles = 4,
    quantile_lines = TRUE
  ) +
   scale_fill_viridis_d() + # use viridis color scheme
  labs(
    x = "Fantasy Points",
    y = "Position",
    title = "Ridgeline Plot of Fantasy Points by Position",
    subtitle = "Vertical lines represent the 25th, 50th, and 75th quantiles",
    fill = "Quartile"
  ) +
  theme_classic() +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) # horizontal y-axis title
```

## Scatterplot {#sec-scatterplot}

As a tutorial, we walk through some of the (many) modifications that can be made to create an advanced, customized plot in `ggplot2`.

First, we prepare the data:

```{r}
# Subset Data
rb_seasonal <- player_stats_seasonal_offense %>% 
  filter(position_group == "RB")
```

### Base Layer {#sec-scatterplotBaseLayer}

Second, we create the base layer of the plot using the `ggplot()` function of the `ggplot2` package, as in @fig-scatterplot1.
We specify the data object and the variables in the data object that are associated with the x- and y-axes:

```{r}
#| label: fig-scatterplot1
#| fig-cap: "Base Plot."

ggplot2::ggplot(
  data = rb_seasonal, # specify data object
  aes(
    x = age, # specify variable on x-axis
    y = rushing_yards)) # specify variable on y-axis
```

### Add Points {#sec-scatterplotAddPoints}

Third, we create a scatterplot using the `geom_point()` function from the `ggplot2` package, as in @fig-scatterplot2:

```{r}
#| label: fig-scatterplot2
#| fig-cap: "Scatterplot."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point() # add points for scatterplot
```

### Best-Fit Line {#sec-scatterplotBestFitLine}

Fourth, we add a linear best-fit line using the `geom_smooth()`, as in @fig-scatterplot3:

```{r}
#| label: fig-scatterplot3
#| fig-cap: "Scatterplot with Linear Best-Fit Line."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point() +
  geom_smooth(method = "lm") # add linear best-fit line
```

We could also estimate a quadratic polynomial best-fit line, as in @fig-scatterplot4:

```{r}
#| label: fig-scatterplot4
#| fig-cap: "Scatterplot with Quadratic Best-Fit Line."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point() +
  geom_smooth(
    method = "lm",
    formula = y ~ poly(x, 2)) # add quadratic best-fit line
```

Or, we could estimate a smooth best-fit line using locally estimated scatterplot smoothing (LOESS) to allow for any form of nonlinearity, as in @fig-scatterplot5:

```{r}
#| label: fig-scatterplot5
#| fig-cap: "Scatterplot with Best-Fit Line Using Locally Estimated Scatterplot Smoothing (LOESS)."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point() +
  geom_smooth(method = "loess") # add smooth best-fit (LOESS) line
```

By default, the best-fit line is based on a generalized additive model, which allows for nonlinearity, as in @fig-scatterplot6:

```{r}
#| label: fig-scatterplot6
#| fig-cap: "Scatterplot with Best-Fit Line from Generalized Additive Model."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point() +
  geom_smooth() # add GAM best-fit line; same as specifying method = "gam"
```

### Modify Axes {#sec-scatterplotAxes}

Then, we can change the axes, as in @fig-scatterplot7:

```{r}
#| label: fig-scatterplot7
#| fig-cap: "Scatterplot with Modified Axes."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point() +
  geom_smooth() +
  scale_x_continuous(
    expand = c(0,0), # set origin of x-axis to 0
    lim = c(20,40), # set limits of x-axis
    breaks = seq(from = 20, to = 40, by = 5) # specify x-axis labels
  ) +
  scale_y_continuous(
    expand = c(0,0), # set origin of y-axis to 0
    lim = c(0,NA), # set limits of y-axis
    breaks = seq(from = 0, to = 2500, by = 250) # specify y-axis labels
  )
```

### Plot Labels {#sec-scatterplotPlotLabels}

Then, we can add plot labels, as in @fig-scatterplot8:

```{r}
#| label: fig-scatterplot8
#| fig-cap: "Scatterplot with Plot Labels."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point() +
  geom_smooth() +
  scale_x_continuous(
    expand = c(0,0),
    lim = c(20,40),
    breaks = seq(from = 20, to = 40, by = 5)
  ) +
  scale_y_continuous(
    expand = c(0,0),
    lim = c(0,NA),
    breaks = seq(from = 0, to = 2500, by = 250)
  ) +
  labs( # add plot labels
    x = "Running Back's Age (years)",
    y = "Rushing Yards (Season)",
    title = "NFL Rushing Yards (Season) by Player Age",
    subtitle = "(Among Running Backs)"
  )
```

### Theme {#sec-scatterplotTheme}

Then, we can use a theme such as the classic theme (`theme_classic()`) to make it more visually presentable, as in @fig-scatterplot9:

```{r}
#| label: fig-scatterplot9
#| fig-cap: "Scatterplot with Classic Theme."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point() +
  geom_smooth() +
  scale_x_continuous(
    expand = c(0,0),
    lim = c(20,40),
    breaks = seq(from = 20, to = 40, by = 5)
  ) +
  scale_y_continuous(
    expand = c(0,0),
    lim = c(0,NA),
    breaks = seq(from = 0, to = 2500, by = 250)
  ) +
  labs(
    x = "Running Back's Age (years)",
    y = "Rushing Yards (Season)",
    title = "NFL Rushing Yards (Season) by Player Age",
    subtitle = "(Among Running Backs)"
  ) +
  theme_classic() # use the classic theme
```

Or, we could use a different theme, such as the dark theme (`theme_dark()`) in @fig-scatterplot10.
For a list of themes available in `ggplot2`, see here: <https://ggplot2-book.org/themes#sec-themes>.

```{r}
#| label: fig-scatterplot10
#| fig-cap: "Scatterplot with Dark Theme."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point() +
  geom_smooth() +
  scale_x_continuous(
    expand = c(0,0),
    lim = c(20,40),
    breaks = seq(from = 20, to = 40, by = 5)
  ) +
  scale_y_continuous(
    expand = c(0,0),
    lim = c(0,NA),
    breaks = seq(from = 0, to = 2500, by = 250)
  ) +
  labs(
    x = "Running Back's Age (years)",
    y = "Rushing Yards (Season)",
    title = "NFL Rushing Yards (Season) by Player Age",
    subtitle = "(Among Running Backs)"
  ) +
  theme_dark() # use the dark theme
```

### Interactive {#sec-scatterplotInteractive}

::: {.content-visible when-format="html:js"}

After creating our plot, we can make the plot interactive using the `ggplotly()` function from the `plotly` package, as in @fig-scatterplot11.

```{r}
#| label: fig-scatterplot11
#| fig-cap: "Interactive Scatterplot Using Plotly."

plot_ypcByPlayerAge <- ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point(
    aes(
      text = player_display_name, # add player name for mouse over tooltip
      label = season)) + # add season for mouse over tooltip
  geom_smooth() +
  scale_x_continuous(
    expand = c(0,0),
    lim = c(20,40),
    breaks = seq(from = 20, to = 40, by = 5)
  ) +
  scale_y_continuous(
    expand = c(0,0),
    lim = c(0,NA),
    breaks = seq(from = 0, to = 2500, by = 250)
  ) +
  labs(
    x = "Running Back's Age (years)",
    y = "Rushing Yards (Season)",
    title = "NFL Rushing Yards (Season) by Player Age",
    subtitle = "(Among Running Backs)"
  ) +
  theme_classic()

ggplotly(plot_ypcByPlayerAge)
```

:::

::: {.content-visible when-format="pdf"}

After creating our plot, we can make the plot interactive using the `ggplotly()` function from the `plotly` package.

```{r}
#| eval: false

plot_ypcByPlayerAge <- ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_yards)) +
  geom_point(
    aes(
      text = player_display_name, # add player name for mouse over tooltip
      label = season)) + # add season for mouse over tooltip
  geom_smooth() +
  scale_x_continuous(
    expand = c(0,0),
    lim = c(20,40),
    breaks = seq(from = 20, to = 40, by = 5)
  ) +
  scale_y_continuous(
    expand = c(0,0),
    lim = c(0,NA),
    breaks = seq(from = 0, to = 2500, by = 250)
  ) +
  labs(
    x = "Running Back's Age (years)",
    y = "Rushing Yards (Season)",
    title = "NFL Rushing Yards (Season) by Player Age",
    subtitle = "(Among Running Backs)"
  ) +
  theme_classic()

ggplotly(plot_ypcByPlayerAge)
```

:::

## Line Chart {#sec-lineChart}

A bar plot of Tom Brady's fantasy points by season is depicted in @fig-lineChart.

```{r}
#| label: fig-lineChart
#| fig-cap: "Line Chart."

ggplot2::ggplot(
  data = player_stats_seasonal_offense %>%
    filter(player_display_name == "Tom Brady"),
  mapping = aes(
    x = season,
    y = fantasy_points
    )
) +
  geom_line(
    linewidth = 1.5,
    color = "blue"
  ) +
  labs(
    x = "Season",
    y = "Fantasy Points",
    title = "Bar Plot of Tom Brady's Fantasy Points by Season"
  ) +
  theme_classic() +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) # horizontal y-axis title
```

### With Highlighting {#sec-lineChartHighlighting}

```{r}
#| label: fig-lineChartHighlighting
#| fig-cap: "Line Chart with Highlighting."

ggplot2::ggplot(
  data = player_stats_seasonal_offense,
  mapping = aes(
    x = season,
    y = fantasy_points,
    group = player_id,
    color = player_display_name)
) +
  geom_line() +
  gghighlight::gghighlight(
    player_display_name == "Tom Brady",
    label_key = player_display_name) +
  labs(
    x = "Season",
    y = "Fantasy Points",
    title = "Fantasy Points by Season and Player",
    subtitle = "(Tom Brady in Red)"
  ) +
  theme_classic() +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) # horizontal y-axis title
```

## Bar Plot {#sec-barPlot}

To create a bar plot, we first compute summary statistics:

```{r}
confidenceLevel <- .95 # for 95% confidence interval

player_stats_seasonal_offense_summary <- player_stats_seasonal_offense %>%
    filter(position_group %in% c("QB","RB","WR","TE")) %>% 
  group_by(position_group) %>%
  summarise( 
    n = sum(!is.na(fantasy_points)),
    mean = mean(fantasy_points, na.rm = TRUE),
    sd = sd(fantasy_points, na.rm = TRUE)
  ) %>%
  mutate(se = sd/sqrt(n)) %>%
  mutate(
    ci_lower = mean - qt(p = 1 - (1 - confidenceLevel) / 2, df = n - 1) * se,
    ci_upper = mean + qt(p = 1 - (1 - confidenceLevel) / 2, df = n - 1) * se
  )
```

The summary statistics are in @tbl-summaryStats.

```{r}
#| label: tbl-summaryStats
#| tbl-cap: "Table of Summary Statistics."

player_stats_seasonal_offense_summary
```

A bar plot of fantasy points by position is depicted in @fig-barPlot.

```{r}
#| label: fig-barPlot
#| fig-cap: "Bar Plot."

ggplot2::ggplot(
  data = player_stats_seasonal_offense_summary,
  mapping = aes(
    x = position_group,
    y = mean,
    fill = position_group
    )
) +
  geom_bar(
    stat = "identity") +
  labs(
    x = "Position",
    y = "Fantasy Points",
    title = "Bar Plot of Fantasy Points by Position"
  ) +
  theme_classic() + 
  theme(legend.position = "none") +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) # horizontal y-axis title
```

### With Error Bars {#sec-barPlotErrorBars}

Based on the summary statistics in @tbl-summaryStats, we create a bar plot with bars representing the 95% confidence interval in @fig-barPlotConfidenceInterval.

```{r}
#| label: fig-barPlotConfidenceInterval
#| fig-cap: "Bar Plot with Bars Representing the 95% Confidence Interval."

ggplot2::ggplot(
  data = player_stats_seasonal_offense_summary %>%
    filter(position_group %in% c("QB","RB","WR","TE")),
  mapping = aes(
    x = position_group,
    y = mean,
    fill = position_group
    )
) +
  geom_bar(
    stat = "identity") +
  geom_errorbar(
    aes(
      ymin = ci_lower,
      ymax = ci_upper),
    width = 0.2,
    color = "black"
  ) +
  labs(
    x = "Position",
    y = "Fantasy Points",
    title = "Bar Plot of Fantasy Points by Position"
  ) +
  theme_classic() + 
  theme(legend.position = "none") +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) # horizontal y-axis title
```

### Modified Color Scheme {#sec-barPlotModifiedColorScheme}

We can also modify the color scheme, as in @fig-barPlotColorScheme

```{r}
#| label: fig-barPlotColorScheme
#| fig-cap: "Bar Plot with Bars Representing the 95% Confidence Interval."

ggplot2::ggplot(
  data = player_stats_seasonal_offense_summary %>%
    filter(position_group %in% c("QB","RB","WR","TE")),
  mapping = aes(
    x = position_group,
    y = mean,
    fill = position_group
    )
) +
  geom_bar(
    stat = "identity") +
  scale_fill_brewer(palette = "Dark2") +
  geom_errorbar(
    aes(
      ymin = ci_lower,
      ymax = ci_upper),
    width = 0.2,
    color = "black"
  ) +
  labs(
    x = "Position",
    y = "Fantasy Points",
    title = "Bar Plot of Fantasy Points by Position"
  ) +
  theme_classic() + 
  theme(legend.position = "none") +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) # horizontal y-axis title
```

## Examples {#sec-scatterplotExamples}

### Players {#sec-scatterplotPlayers}

#### Running Back Performance By Player Age {#sec-plotRBperformanceByAge}

```{r}
# Prepare Data
rushing_attempts <- nfl_pbp %>% 
  dplyr::filter(season_type == "REG") %>% 
  dplyr::filter(
    rush == 1,
    rush_attempt == 1,
    qb_scramble == 0,
    qb_dropback == 0,
    !is.na(rushing_yards))

rb_yardsPerCarry <- rushing_attempts %>% 
  dplyr::group_by(rusher_id, season) %>% 
  dplyr::summarise(
    ypc = mean(rushing_yards, na.rm = TRUE),
    rush_attempts = n(),
    .groups = "drop") %>% 
  dplyr::ungroup() %>% 
  dplyr::left_join(
    player_stats_seasonal_offense,
    by = c("rusher_id" = "player_id", "season")
  ) %>% 
  dplyr::filter(
    position_group == "RB",
    rush_attempts >= 50)
```

##### Rushing Yards Per Carry {#sec-plotYPCbyAge}

::: {.content-visible when-format="html:js"}

Rushing yards per carry over the course of the season is depicted as a function of the Running Back's age in @fig-rushYPCperSeasonByAge.

```{r}
#| label: fig-rushYPCperSeasonByAge
#| fig-cap: "Rushing Yards Per Carry (Season) by Player Age."

plot_ypcByPlayerAge2 <- ggplot2::ggplot(
  data = rb_yardsPerCarry,
  aes(
    x = age,
    y = ypc)) +
  geom_point(
    aes(
      text = player_display_name,
      label = season)) +
  geom_smooth() +
  labs(
    x = "Running Back's Age (years)",
    y = "Rushing Yards Per Carry (Season)",
    title = "NFL Rushing Yards Per Carry (Season) by Player Age",
    subtitle = "(minimum 50 rushing attempts)"
  ) +
  theme_classic()

ggplotly(plot_ypcByPlayerAge2)
```

:::

::: {.content-visible when-format="pdf"}

Rushing yards per carry over the course of the season is depicted as a function of the Running Back's age in @fig-rushYPCperSeasonByAgePDF.

```{r}
#| label: fig-rushYPCperSeasonByAgePDF
#| fig-cap: "NFL Rushing Yards Per Carry Per Season by Player Age."

ggplot2::ggplot(
  data = rb_yardsPerCarry,
  aes(
    x = age,
    y = ypc)) +
  geom_point(
    aes(
      text = player_display_name,
      label = season)) +
  geom_smooth() +
  labs(
    x = "Running Back's Age (years)",
    y = "Rushing Yards Per Carry (Season)",
    title = "NFL Rushing Yards Per Carry (Season) by Player Age",
    subtitle = "(minimum 50 rushing attempts)"
  ) +
  theme_classic()
```

:::

##### Rushing EPA Per Season {#sec-plotRushEPAbyAge}

::: {.content-visible when-format="html:js"}

Rushing expected points added (EPA) over the course of the season is depicted as a function of the Running Back's age in @fig-rushEPAperSeasonByAge.

```{r}
#| label: fig-rushEPAperSeasonByAge
#| fig-cap: "Rushing Expected Points Added (Season) by Player Age."

plot_rushEPAbyPlayerAge <- ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_epa)) +
  geom_point(
    aes(
      text = player_display_name,
      label = season)) +
  geom_smooth() +
  labs(
    x = "Running Back's Age (years)",
    y = "Rushing EPA (Season)",
    title = "NFL Rushing Expected Points Added (Season) by Player Age"
  ) +
  theme_classic()

ggplotly(plot_rushEPAbyPlayerAge)
```

:::

::: {.content-visible when-format="pdf"}

Rushing expected points added (EPA) over the course of the season is depicted as a function of the Running Back's age in @fig-rushEPAperSeasonByAgePDF.

```{r}
#| label: fig-rushEPAperSeasonByAgePDF
#| fig-cap: "NFL Rushing Expected Points Added (EPA) During a Season by Player Age."

ggplot2::ggplot(
  data = rb_seasonal,
  aes(
    x = age,
    y = rushing_epa)) +
  geom_point(
    aes(
      text = player_display_name,
      label = season)) +
  geom_smooth() +
  labs(
    x = "Running Back's Age (years)",
    y = "Rushing EPA (Season)",
    title = "NFL Rushing Expected Points Added (Season) by Player Age"
  ) +
  theme_classic()
```

:::

### Teams {#sec-scatterplotTeams}

#### Defensive and Offensive EPA per Play {#sec-plotDefOffEPA}

Expected points added (EPA) per play by the team with possession.

```{r}
pbp_regularSeason <- nfl_pbp %>% 
  dplyr::filter(
    season == 2023,
    season_type == "REG") %>%
  dplyr::filter(!is.na(posteam) & (rush == 1 | pass == 1))

epa_offense <- pbp_regularSeason %>%
  dplyr::group_by(team = posteam) %>%
  dplyr::summarise(off_epa = mean(epa, na.rm = TRUE))

epa_defense <- pbp_regularSeason %>%
  dplyr::group_by(team = defteam) %>%
  dplyr::summarise(def_epa = mean(epa, na.rm = TRUE))

epa_combined <- epa_offense %>%
  dplyr::inner_join(
    epa_defense,
    by = "team")
```

Defensive EPA per play during the 2023 NFL season is depicted as a function of offensive EPA per play in @fig-plotDefOffEPA.

```{r}
#| label: fig-plotDefOffEPA
#| fig-cap: "2023 NFL Offensive and Defensive EPA Per Play."

ggplot2::ggplot(
  data = epa_combined,
  aes(
    x = off_epa,
    y = def_epa)) +
  nflplotR::geom_mean_lines(
    aes(
      x0 = off_epa ,
      y0 = def_epa)) +
  nflplotR::geom_nfl_logos(
    aes(
      team_abbr = team),
      width = 0.065,
      alpha = 0.7) +
  labs(
    x = "Offense EPA/play",
    y = "Defense EPA/play",
    title = "2023 NFL Offensive and Defensive EPA per Play"
  ) +
  theme_classic() +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) + # horizontal y-axis title
  scale_y_reverse()
```

## Conclusion {#sec-dataVisualizationConclusion}

::: {.content-visible when-format="html"}

## Session Info {#sec-dataVisualizationSessionInfo}

```{r}
sessionInfo()
```

:::
